Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID np_create_global SEMI vars program_1 np_end_program
Rule 2     program -> PROGRAM ID np_create_global SEMI program_1 np_end_program
Rule 3     program_1 -> function program_1
Rule 4     program_1 -> main_block
Rule 5     vars -> vars_1
Rule 6     vars_1 -> LET vars_prima_1 vars_1
Rule 7     vars_1 -> LET vars_prima_1
Rule 8     vars_prima_1 -> ID COLON type np_add_vars SEMI
Rule 9     vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1
Rule 10    type -> INT type_1
Rule 11    type -> FLOAT type_1
Rule 12    type -> CHAR type_1
Rule 13    type -> BOOL type_1
Rule 14    type_1 -> LBRACKET expression RBRACKET
Rule 15    type_1 -> epsilon
Rule 16    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
Rule 17    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
Rule 18    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
Rule 19    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
Rule 20    main_block -> MAIN np_create_main_scope LPAREN RPAREN block
Rule 21    main_block -> MAIN np_create_main_scope LPAREN RPAREN vars block
Rule 22    block -> LBRACE statements RBRACE
Rule 23    return_type -> VOID
Rule 24    return_type -> type
Rule 25    params -> ID COLON type np_add_vars np_add_params_type COMMA params
Rule 26    params -> ID COLON type np_add_vars np_add_params_type
Rule 27    statements -> function_call statements1
Rule 28    statements -> assignment statements1
Rule 29    statements -> condition statements1
Rule 30    statements -> writing statements1
Rule 31    statements -> reading statements1
Rule 32    statements -> repetition statements1
Rule 33    statements -> return statements1
Rule 34    statements -> expression statements1
Rule 35    statements -> special_functions statements1
Rule 36    special_functions -> mean
Rule 37    special_functions -> median
Rule 38    special_functions -> mode
Rule 39    special_functions -> variance
Rule 40    special_functions -> standard_deviation
Rule 41    statements1 -> statements
Rule 42    statements1 -> epsilon
Rule 43    assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
Rule 44    assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI
Rule 45    condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
Rule 46    condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
Rule 47    expression -> exp
Rule 48    expression -> expression1 np_add_quadruple_logical
Rule 49    expression -> expression0 np_add_quadruple_or_and
Rule 50    expression0 -> expression AND np_add_operator expression
Rule 51    expression0 -> expression OR np_add_operator expression
Rule 52    expression1 -> exp LT np_add_operator exp
Rule 53    expression1 -> exp LE np_add_operator exp
Rule 54    expression1 -> exp GT np_add_operator exp
Rule 55    expression1 -> exp GE np_add_operator exp
Rule 56    expression1 -> exp EQ np_add_operator exp
Rule 57    expression1 -> exp NE np_add_operator exp
Rule 58    exp -> term np_add_quadruple_sum_min
Rule 59    exp -> term np_add_quadruple_sum_min exp_1
Rule 60    exp_1 -> PLUS np_add_operator exp
Rule 61    exp_1 -> MINUS np_add_operator exp
Rule 62    term -> factor np_add_quadruple_times_div
Rule 63    term -> factor np_add_quadruple_times_div term_2
Rule 64    term_2 -> TIMES np_add_operator term
Rule 65    term_2 -> DIVIDE np_add_operator term
Rule 66    factor -> LPAREN np_add_paren expression RPAREN np_pop_paren
Rule 67    factor -> LBRACKET expression RBRACKET
Rule 68    factor -> function_call
Rule 69    factor -> factor_prima_1
Rule 70    factor_prima_1 -> PLUS varcte
Rule 71    factor_prima_1 -> MINUS varcte
Rule 72    factor_prima_1 -> varcte
Rule 73    varcte -> ID np_add_id_quad
Rule 74    varcte -> CTEI np_add_cte_int
Rule 75    varcte -> CTEF np_add_cte_float
Rule 76    varcte -> CTEC np_add_cte_char
Rule 77    varcte -> TRUE np_add_cte_bool
Rule 78    varcte -> FALSE np_add_cte_bool
Rule 79    writing -> PRINT LPAREN writing_1 RPAREN SEMI
Rule 80    writing_1 -> expression np_add_print_quadruple_exp COMMA writing_1
Rule 81    writing_1 -> CTESTRING np_add_print_quadruple_str COMMA writing_1
Rule 82    writing_1 -> expression np_add_print_quadruple_exp
Rule 83    writing_1 -> CTESTRING np_add_print_quadruple_str
Rule 84    reading -> READ LPAREN reading_1 RPAREN SEMI
Rule 85    reading_1 -> ID COMMA reading_1
Rule 86    reading_1 -> ID LBRACKET expression RBRACKET COMMA reading_1
Rule 87    reading_1 -> ID
Rule 88    reading_1 -> ID LBRACKET expression RBRACKET
Rule 89    repetition -> non_conditional_loop
Rule 90    repetition -> conditional_loop
Rule 91    conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
Rule 92    non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
Rule 93    return -> RETURN expression np_add_return_quadruple SEMI
Rule 94    function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
Rule 95    function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
Rule 96    function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
Rule 97    function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN
Rule 98    function_call_1 -> expression np_function_call_add_param
Rule 99    function_call_1 -> expression np_function_call_add_param COMMA function_call_1
Rule 100   mean -> MEAN LPAREN expression RPAREN SEMI
Rule 101   median -> MEDIAN LPAREN expression RPAREN SEMI
Rule 102   mode -> MODE LPAREN expression RPAREN SEMI
Rule 103   variance -> VARIANCE LPAREN expression RPAREN SEMI
Rule 104   standard_deviation -> STDEV LPAREN expression RPAREN SEMI
Rule 105   epsilon -> <empty>
Rule 106   np_create_global -> <empty>
Rule 107   np_create_main_scope -> <empty>
Rule 108   np_create_new_scope -> <empty>
Rule 109   np_add_satck_vars -> <empty>
Rule 110   np_add_vars -> <empty>
Rule 111   np_add_id_quad -> <empty>
Rule 112   np_add_cte_int -> <empty>
Rule 113   np_add_cte_float -> <empty>
Rule 114   np_add_cte_char -> <empty>
Rule 115   np_add_cte_bool -> <empty>
Rule 116   np_add_operator -> <empty>
Rule 117   np_add_paren -> <empty>
Rule 118   np_pop_paren -> <empty>
Rule 119   np_add_quadruple_sum_min -> <empty>
Rule 120   np_add_quadruple_times_div -> <empty>
Rule 121   np_add_quadruple_logical -> <empty>
Rule 122   np_add_quadruple_or_and -> <empty>
Rule 123   np_assign_expression -> <empty>
Rule 124   np_condition_gotof -> <empty>
Rule 125   np_condition_end_gotof -> <empty>
Rule 126   np_condition_goto_else -> <empty>
Rule 127   np_while_init -> <empty>
Rule 128   np_while_expression -> <empty>
Rule 129   np_while_end_block -> <empty>
Rule 130   np_assign_expression_for -> <empty>
Rule 131   np_non_conditional_limit -> <empty>
Rule 132   np_non_conditional_end -> <empty>
Rule 133   np_add_print_quadruple_str -> <empty>
Rule 134   np_add_print_quadruple_exp -> <empty>
Rule 135   np_add_return_quadruple -> <empty>
Rule 136   np_add_params_type -> <empty>
Rule 137   np_set_func_start_point -> <empty>
Rule 138   np_end_function -> <empty>
Rule 139   np_end_program -> <empty>
Rule 140   np_check_function_call -> <empty>
Rule 141   np_function_call_add_param -> <empty>
Rule 142   np_function_end_params -> <empty>

Terminals, with rules where they appear

AND                  : 50
BOOL                 : 13
BY                   : 92
CHAR                 : 12
COLON                : 8 16 17 18 19 25 26
COMMA                : 9 25 80 81 85 86 99
CTEC                 : 76
CTEF                 : 75
CTEI                 : 74
CTESTRING            : 81 83
DIVIDE               : 65
DO                   : 91
ELSE                 : 46
EQ                   : 56
EQUALS               : 43 44 92
FALSE                : 78
FLOAT                : 11
FOR                  : 92
FUNCTION             : 16 17 18 19
GE                   : 55
GT                   : 54
ID                   : 1 2 8 9 16 17 18 19 25 26 43 44 73 85 86 87 88 92 94 95 96 97
IF                   : 45 46
INT                  : 10
LBRACE               : 22
LBRACKET             : 14 44 67 86 88
LE                   : 53
LET                  : 6 7
LPAREN               : 16 17 18 19 20 21 45 46 66 79 84 91 92 94 95 96 97 100 101 102 103 104
LT                   : 52
MAIN                 : 20 21
MEAN                 : 100
MEDIAN               : 101
MINUS                : 61 71
MODE                 : 102
NE                   : 57
OR                   : 51
PLUS                 : 60 70
PRINT                : 79
PROGRAM              : 1 2
RBRACE               : 22
RBRACKET             : 14 44 67 86 88
READ                 : 84
RETURN               : 93
RPAREN               : 16 17 18 19 20 21 45 46 66 79 84 91 92 94 95 96 97 100 101 102 103 104
SEMI                 : 1 2 8 43 44 79 84 93 94 95 100 101 102 103 104
STDEV                : 104
TIMES                : 64
TO                   : 92
TRUE                 : 77
VARIANCE             : 103
VOID                 : 23
WHILE                : 91
error                : 

Nonterminals, with rules where they appear

assignment           : 28
block                : 16 17 18 19 20 21 45 46 46 91 92
condition            : 29
conditional_loop     : 90
epsilon              : 15 42
exp                  : 47 52 52 53 53 54 54 55 55 56 56 57 57 60 61
exp_1                : 59
expression           : 14 34 43 44 44 45 46 50 50 51 51 66 67 80 82 86 88 91 92 92 92 93 98 99 100 101 102 103 104
expression0          : 49
expression1          : 48
factor               : 62 63
factor_prima_1       : 69
function             : 3
function_call        : 27 68
function_call_1      : 95 96 99
main_block           : 4
mean                 : 36
median               : 37
mode                 : 38
non_conditional_loop : 89
np_add_cte_bool      : 77 78
np_add_cte_char      : 76
np_add_cte_float     : 75
np_add_cte_int       : 74
np_add_id_quad       : 43 73 92
np_add_operator      : 43 50 51 52 53 54 55 56 57 60 61 64 65 92
np_add_params_type   : 25 26
np_add_paren         : 66
np_add_print_quadruple_exp : 80 82
np_add_print_quadruple_str : 81 83
np_add_quadruple_logical : 48
np_add_quadruple_or_and : 49
np_add_quadruple_sum_min : 58 59
np_add_quadruple_times_div : 62 63
np_add_return_quadruple : 93
np_add_satck_vars    : 9
np_add_vars          : 8 25 26
np_assign_expression : 43
np_assign_expression_for : 92
np_check_function_call : 94 95 96 97
np_condition_end_gotof : 45 46
np_condition_goto_else : 46
np_condition_gotof   : 45 46
np_create_global     : 1 2
np_create_main_scope : 20 21
np_create_new_scope  : 16 17 18 19
np_end_function      : 16 17 18 19
np_end_program       : 1 2
np_function_call_add_param : 98 99
np_function_end_params : 94 95 96 97
np_non_conditional_end : 92
np_non_conditional_limit : 92
np_pop_paren         : 66
np_set_func_start_point : 16 17 18 19
np_while_end_block   : 91
np_while_expression  : 91
np_while_init        : 91
params               : 17 19 25
program              : 0
program_1            : 1 2 3
reading              : 31
reading_1            : 84 85 86
repetition           : 32
return               : 33
return_type          : 16 17 18 19
special_functions    : 35
standard_deviation   : 40
statements           : 22 41
statements1          : 27 28 29 30 31 32 33 34 35
term                 : 58 59 64 65
term_2               : 63
type                 : 8 24 25 26
type_1               : 10 11 12 13
varcte               : 70 71 72
variance             : 39
vars                 : 1 18 19 21
vars_1               : 5 6
vars_prima_1         : 6 7 9
writing              : 30
writing_1            : 79 80 81

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID np_create_global SEMI vars program_1 np_end_program
    (2) program -> . PROGRAM ID np_create_global SEMI program_1 np_end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID np_create_global SEMI vars program_1 np_end_program
    (2) program -> PROGRAM . ID np_create_global SEMI program_1 np_end_program

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . np_create_global SEMI vars program_1 np_end_program
    (2) program -> PROGRAM ID . np_create_global SEMI program_1 np_end_program
    (106) np_create_global -> .

    SEMI            reduce using rule 106 (np_create_global -> .)

    np_create_global               shift and go to state 4

state 4

    (1) program -> PROGRAM ID np_create_global . SEMI vars program_1 np_end_program
    (2) program -> PROGRAM ID np_create_global . SEMI program_1 np_end_program

    SEMI            shift and go to state 5


state 5

    (1) program -> PROGRAM ID np_create_global SEMI . vars program_1 np_end_program
    (2) program -> PROGRAM ID np_create_global SEMI . program_1 np_end_program
    (5) vars -> . vars_1
    (3) program_1 -> . function program_1
    (4) program_1 -> . main_block
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1
    (16) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (20) main_block -> . MAIN np_create_main_scope LPAREN RPAREN block
    (21) main_block -> . MAIN np_create_main_scope LPAREN RPAREN vars block

    LET             shift and go to state 11
    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

    vars                           shift and go to state 6
    program_1                      shift and go to state 7
    vars_1                         shift and go to state 8
    function                       shift and go to state 9
    main_block                     shift and go to state 10

state 6

    (1) program -> PROGRAM ID np_create_global SEMI vars . program_1 np_end_program
    (3) program_1 -> . function program_1
    (4) program_1 -> . main_block
    (16) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (20) main_block -> . MAIN np_create_main_scope LPAREN RPAREN block
    (21) main_block -> . MAIN np_create_main_scope LPAREN RPAREN vars block

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

    program_1                      shift and go to state 14
    function                       shift and go to state 9
    main_block                     shift and go to state 10

state 7

    (2) program -> PROGRAM ID np_create_global SEMI program_1 . np_end_program
    (139) np_end_program -> .

    $end            reduce using rule 139 (np_end_program -> .)

    np_end_program                 shift and go to state 15

state 8

    (5) vars -> vars_1 .

    FUNCTION        reduce using rule 5 (vars -> vars_1 .)
    MAIN            reduce using rule 5 (vars -> vars_1 .)
    LBRACE          reduce using rule 5 (vars -> vars_1 .)


state 9

    (3) program_1 -> function . program_1
    (3) program_1 -> . function program_1
    (4) program_1 -> . main_block
    (16) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (20) main_block -> . MAIN np_create_main_scope LPAREN RPAREN block
    (21) main_block -> . MAIN np_create_main_scope LPAREN RPAREN vars block

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

    function                       shift and go to state 9
    program_1                      shift and go to state 16
    main_block                     shift and go to state 10

state 10

    (4) program_1 -> main_block .

    $end            reduce using rule 4 (program_1 -> main_block .)


state 11

    (6) vars_1 -> LET . vars_prima_1 vars_1
    (7) vars_1 -> LET . vars_prima_1
    (8) vars_prima_1 -> . ID COLON type np_add_vars SEMI
    (9) vars_prima_1 -> . ID np_add_satck_vars COMMA vars_prima_1

    ID              shift and go to state 18

    vars_prima_1                   shift and go to state 17

state 12

    (16) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function

    ID              shift and go to state 19


state 13

    (20) main_block -> MAIN . np_create_main_scope LPAREN RPAREN block
    (21) main_block -> MAIN . np_create_main_scope LPAREN RPAREN vars block
    (107) np_create_main_scope -> .

    LPAREN          reduce using rule 107 (np_create_main_scope -> .)

    np_create_main_scope           shift and go to state 20

state 14

    (1) program -> PROGRAM ID np_create_global SEMI vars program_1 . np_end_program
    (139) np_end_program -> .

    $end            reduce using rule 139 (np_end_program -> .)

    np_end_program                 shift and go to state 21

state 15

    (2) program -> PROGRAM ID np_create_global SEMI program_1 np_end_program .

    $end            reduce using rule 2 (program -> PROGRAM ID np_create_global SEMI program_1 np_end_program .)


state 16

    (3) program_1 -> function program_1 .

    $end            reduce using rule 3 (program_1 -> function program_1 .)


state 17

    (6) vars_1 -> LET vars_prima_1 . vars_1
    (7) vars_1 -> LET vars_prima_1 .
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    FUNCTION        reduce using rule 7 (vars_1 -> LET vars_prima_1 .)
    MAIN            reduce using rule 7 (vars_1 -> LET vars_prima_1 .)
    LBRACE          reduce using rule 7 (vars_1 -> LET vars_prima_1 .)
    LET             shift and go to state 11

    vars_1                         shift and go to state 22

state 18

    (8) vars_prima_1 -> ID . COLON type np_add_vars SEMI
    (9) vars_prima_1 -> ID . np_add_satck_vars COMMA vars_prima_1
    (109) np_add_satck_vars -> .

    COLON           shift and go to state 23
    COMMA           reduce using rule 109 (np_add_satck_vars -> .)

    np_add_satck_vars              shift and go to state 24

state 19

    (16) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function

    COLON           shift and go to state 25


state 20

    (20) main_block -> MAIN np_create_main_scope . LPAREN RPAREN block
    (21) main_block -> MAIN np_create_main_scope . LPAREN RPAREN vars block

    LPAREN          shift and go to state 26


state 21

    (1) program -> PROGRAM ID np_create_global SEMI vars program_1 np_end_program .

    $end            reduce using rule 1 (program -> PROGRAM ID np_create_global SEMI vars program_1 np_end_program .)


state 22

    (6) vars_1 -> LET vars_prima_1 vars_1 .

    FUNCTION        reduce using rule 6 (vars_1 -> LET vars_prima_1 vars_1 .)
    MAIN            reduce using rule 6 (vars_1 -> LET vars_prima_1 vars_1 .)
    LBRACE          reduce using rule 6 (vars_1 -> LET vars_prima_1 vars_1 .)


state 23

    (8) vars_prima_1 -> ID COLON . type np_add_vars SEMI
    (10) type -> . INT type_1
    (11) type -> . FLOAT type_1
    (12) type -> . CHAR type_1
    (13) type -> . BOOL type_1

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    BOOL            shift and go to state 31

    type                           shift and go to state 27

state 24

    (9) vars_prima_1 -> ID np_add_satck_vars . COMMA vars_prima_1

    COMMA           shift and go to state 32


state 25

    (16) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (23) return_type -> . VOID
    (24) return_type -> . type
    (10) type -> . INT type_1
    (11) type -> . FLOAT type_1
    (12) type -> . CHAR type_1
    (13) type -> . BOOL type_1

    VOID            shift and go to state 34
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    BOOL            shift and go to state 31

    return_type                    shift and go to state 33
    type                           shift and go to state 35

state 26

    (20) main_block -> MAIN np_create_main_scope LPAREN . RPAREN block
    (21) main_block -> MAIN np_create_main_scope LPAREN . RPAREN vars block

    RPAREN          shift and go to state 36


state 27

    (8) vars_prima_1 -> ID COLON type . np_add_vars SEMI
    (110) np_add_vars -> .

    SEMI            reduce using rule 110 (np_add_vars -> .)

    np_add_vars                    shift and go to state 37

state 28

    (10) type -> INT . type_1
    (14) type_1 -> . LBRACKET expression RBRACKET
    (15) type_1 -> . epsilon
    (105) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 105 (epsilon -> .)
    LPAREN          reduce using rule 105 (epsilon -> .)
    COMMA           reduce using rule 105 (epsilon -> .)
    RPAREN          reduce using rule 105 (epsilon -> .)

    type_1                         shift and go to state 38
    epsilon                        shift and go to state 40

state 29

    (11) type -> FLOAT . type_1
    (14) type_1 -> . LBRACKET expression RBRACKET
    (15) type_1 -> . epsilon
    (105) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 105 (epsilon -> .)
    LPAREN          reduce using rule 105 (epsilon -> .)
    COMMA           reduce using rule 105 (epsilon -> .)
    RPAREN          reduce using rule 105 (epsilon -> .)

    type_1                         shift and go to state 41
    epsilon                        shift and go to state 40

state 30

    (12) type -> CHAR . type_1
    (14) type_1 -> . LBRACKET expression RBRACKET
    (15) type_1 -> . epsilon
    (105) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 105 (epsilon -> .)
    LPAREN          reduce using rule 105 (epsilon -> .)
    COMMA           reduce using rule 105 (epsilon -> .)
    RPAREN          reduce using rule 105 (epsilon -> .)

    type_1                         shift and go to state 42
    epsilon                        shift and go to state 40

state 31

    (13) type -> BOOL . type_1
    (14) type_1 -> . LBRACKET expression RBRACKET
    (15) type_1 -> . epsilon
    (105) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 105 (epsilon -> .)
    LPAREN          reduce using rule 105 (epsilon -> .)
    COMMA           reduce using rule 105 (epsilon -> .)
    RPAREN          reduce using rule 105 (epsilon -> .)

    type_1                         shift and go to state 43
    epsilon                        shift and go to state 40

state 32

    (9) vars_prima_1 -> ID np_add_satck_vars COMMA . vars_prima_1
    (8) vars_prima_1 -> . ID COLON type np_add_vars SEMI
    (9) vars_prima_1 -> . ID np_add_satck_vars COMMA vars_prima_1

    ID              shift and go to state 18

    vars_prima_1                   shift and go to state 44

state 33

    (16) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (108) np_create_new_scope -> .

    LPAREN          reduce using rule 108 (np_create_new_scope -> .)

    np_create_new_scope            shift and go to state 45

state 34

    (23) return_type -> VOID .

    LPAREN          reduce using rule 23 (return_type -> VOID .)


state 35

    (24) return_type -> type .

    LPAREN          reduce using rule 24 (return_type -> type .)


state 36

    (20) main_block -> MAIN np_create_main_scope LPAREN RPAREN . block
    (21) main_block -> MAIN np_create_main_scope LPAREN RPAREN . vars block
    (22) block -> . LBRACE statements RBRACE
    (5) vars -> . vars_1
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    LBRACE          shift and go to state 48
    LET             shift and go to state 11

    block                          shift and go to state 46
    vars                           shift and go to state 47
    vars_1                         shift and go to state 8

state 37

    (8) vars_prima_1 -> ID COLON type np_add_vars . SEMI

    SEMI            shift and go to state 49


state 38

    (10) type -> INT type_1 .

    SEMI            reduce using rule 10 (type -> INT type_1 .)
    LPAREN          reduce using rule 10 (type -> INT type_1 .)
    COMMA           reduce using rule 10 (type -> INT type_1 .)
    RPAREN          reduce using rule 10 (type -> INT type_1 .)


state 39

    (14) type_1 -> LBRACKET . expression RBRACKET
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 51
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 40

    (15) type_1 -> epsilon .

    SEMI            reduce using rule 15 (type_1 -> epsilon .)
    LPAREN          reduce using rule 15 (type_1 -> epsilon .)
    COMMA           reduce using rule 15 (type_1 -> epsilon .)
    RPAREN          reduce using rule 15 (type_1 -> epsilon .)


state 41

    (11) type -> FLOAT type_1 .

    SEMI            reduce using rule 11 (type -> FLOAT type_1 .)
    LPAREN          reduce using rule 11 (type -> FLOAT type_1 .)
    COMMA           reduce using rule 11 (type -> FLOAT type_1 .)
    RPAREN          reduce using rule 11 (type -> FLOAT type_1 .)


state 42

    (12) type -> CHAR type_1 .

    SEMI            reduce using rule 12 (type -> CHAR type_1 .)
    LPAREN          reduce using rule 12 (type -> CHAR type_1 .)
    COMMA           reduce using rule 12 (type -> CHAR type_1 .)
    RPAREN          reduce using rule 12 (type -> CHAR type_1 .)


state 43

    (13) type -> BOOL type_1 .

    SEMI            reduce using rule 13 (type -> BOOL type_1 .)
    LPAREN          reduce using rule 13 (type -> BOOL type_1 .)
    COMMA           reduce using rule 13 (type -> BOOL type_1 .)
    RPAREN          reduce using rule 13 (type -> BOOL type_1 .)


state 44

    (9) vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .

    LET             reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)
    FUNCTION        reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)
    MAIN            reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)
    LBRACE          reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)


state 45

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN params RPAREN vars np_set_func_start_point block np_end_function

    LPAREN          shift and go to state 69


state 46

    (20) main_block -> MAIN np_create_main_scope LPAREN RPAREN block .

    $end            reduce using rule 20 (main_block -> MAIN np_create_main_scope LPAREN RPAREN block .)


state 47

    (21) main_block -> MAIN np_create_main_scope LPAREN RPAREN vars . block
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 70

state 48

    (22) block -> LBRACE . statements RBRACE
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    statements                     shift and go to state 71
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 49

    (8) vars_prima_1 -> ID COLON type np_add_vars SEMI .

    LET             reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)
    FUNCTION        reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)
    MAIN            reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)
    LBRACE          reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)


state 50

    (67) factor -> LBRACKET . expression RBRACKET
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 100
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 51

    (14) type_1 -> LBRACKET expression . RBRACKET
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RBRACKET        shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 52

    (47) expression -> exp .
    (52) expression1 -> exp . LT np_add_operator exp
    (53) expression1 -> exp . LE np_add_operator exp
    (54) expression1 -> exp . GT np_add_operator exp
    (55) expression1 -> exp . GE np_add_operator exp
    (56) expression1 -> exp . EQ np_add_operator exp
    (57) expression1 -> exp . NE np_add_operator exp

    RBRACKET        reduce using rule 47 (expression -> exp .)
    AND             reduce using rule 47 (expression -> exp .)
    OR              reduce using rule 47 (expression -> exp .)
    ID              reduce using rule 47 (expression -> exp .)
    IF              reduce using rule 47 (expression -> exp .)
    PRINT           reduce using rule 47 (expression -> exp .)
    READ            reduce using rule 47 (expression -> exp .)
    RETURN          reduce using rule 47 (expression -> exp .)
    FOR             reduce using rule 47 (expression -> exp .)
    WHILE           reduce using rule 47 (expression -> exp .)
    MEAN            reduce using rule 47 (expression -> exp .)
    MEDIAN          reduce using rule 47 (expression -> exp .)
    MODE            reduce using rule 47 (expression -> exp .)
    VARIANCE        reduce using rule 47 (expression -> exp .)
    STDEV           reduce using rule 47 (expression -> exp .)
    LPAREN          reduce using rule 47 (expression -> exp .)
    LBRACKET        reduce using rule 47 (expression -> exp .)
    PLUS            reduce using rule 47 (expression -> exp .)
    MINUS           reduce using rule 47 (expression -> exp .)
    CTEI            reduce using rule 47 (expression -> exp .)
    CTEF            reduce using rule 47 (expression -> exp .)
    CTEC            reduce using rule 47 (expression -> exp .)
    TRUE            reduce using rule 47 (expression -> exp .)
    FALSE           reduce using rule 47 (expression -> exp .)
    RBRACE          reduce using rule 47 (expression -> exp .)
    SEMI            reduce using rule 47 (expression -> exp .)
    RPAREN          reduce using rule 47 (expression -> exp .)
    COMMA           reduce using rule 47 (expression -> exp .)
    TO              reduce using rule 47 (expression -> exp .)
    BY              reduce using rule 47 (expression -> exp .)
    LT              shift and go to state 104
    LE              shift and go to state 105
    GT              shift and go to state 106
    GE              shift and go to state 107
    EQ              shift and go to state 108
    NE              shift and go to state 109


state 53

    (48) expression -> expression1 . np_add_quadruple_logical
    (121) np_add_quadruple_logical -> .

    RBRACKET        reduce using rule 121 (np_add_quadruple_logical -> .)
    AND             reduce using rule 121 (np_add_quadruple_logical -> .)
    OR              reduce using rule 121 (np_add_quadruple_logical -> .)
    ID              reduce using rule 121 (np_add_quadruple_logical -> .)
    IF              reduce using rule 121 (np_add_quadruple_logical -> .)
    PRINT           reduce using rule 121 (np_add_quadruple_logical -> .)
    READ            reduce using rule 121 (np_add_quadruple_logical -> .)
    RETURN          reduce using rule 121 (np_add_quadruple_logical -> .)
    FOR             reduce using rule 121 (np_add_quadruple_logical -> .)
    WHILE           reduce using rule 121 (np_add_quadruple_logical -> .)
    MEAN            reduce using rule 121 (np_add_quadruple_logical -> .)
    MEDIAN          reduce using rule 121 (np_add_quadruple_logical -> .)
    MODE            reduce using rule 121 (np_add_quadruple_logical -> .)
    VARIANCE        reduce using rule 121 (np_add_quadruple_logical -> .)
    STDEV           reduce using rule 121 (np_add_quadruple_logical -> .)
    LPAREN          reduce using rule 121 (np_add_quadruple_logical -> .)
    LBRACKET        reduce using rule 121 (np_add_quadruple_logical -> .)
    PLUS            reduce using rule 121 (np_add_quadruple_logical -> .)
    MINUS           reduce using rule 121 (np_add_quadruple_logical -> .)
    CTEI            reduce using rule 121 (np_add_quadruple_logical -> .)
    CTEF            reduce using rule 121 (np_add_quadruple_logical -> .)
    CTEC            reduce using rule 121 (np_add_quadruple_logical -> .)
    TRUE            reduce using rule 121 (np_add_quadruple_logical -> .)
    FALSE           reduce using rule 121 (np_add_quadruple_logical -> .)
    RBRACE          reduce using rule 121 (np_add_quadruple_logical -> .)
    SEMI            reduce using rule 121 (np_add_quadruple_logical -> .)
    RPAREN          reduce using rule 121 (np_add_quadruple_logical -> .)
    COMMA           reduce using rule 121 (np_add_quadruple_logical -> .)
    TO              reduce using rule 121 (np_add_quadruple_logical -> .)
    BY              reduce using rule 121 (np_add_quadruple_logical -> .)

    np_add_quadruple_logical       shift and go to state 110

state 54

    (49) expression -> expression0 . np_add_quadruple_or_and
    (122) np_add_quadruple_or_and -> .

    RBRACKET        reduce using rule 122 (np_add_quadruple_or_and -> .)
    AND             reduce using rule 122 (np_add_quadruple_or_and -> .)
    OR              reduce using rule 122 (np_add_quadruple_or_and -> .)
    ID              reduce using rule 122 (np_add_quadruple_or_and -> .)
    IF              reduce using rule 122 (np_add_quadruple_or_and -> .)
    PRINT           reduce using rule 122 (np_add_quadruple_or_and -> .)
    READ            reduce using rule 122 (np_add_quadruple_or_and -> .)
    RETURN          reduce using rule 122 (np_add_quadruple_or_and -> .)
    FOR             reduce using rule 122 (np_add_quadruple_or_and -> .)
    WHILE           reduce using rule 122 (np_add_quadruple_or_and -> .)
    MEAN            reduce using rule 122 (np_add_quadruple_or_and -> .)
    MEDIAN          reduce using rule 122 (np_add_quadruple_or_and -> .)
    MODE            reduce using rule 122 (np_add_quadruple_or_and -> .)
    VARIANCE        reduce using rule 122 (np_add_quadruple_or_and -> .)
    STDEV           reduce using rule 122 (np_add_quadruple_or_and -> .)
    LPAREN          reduce using rule 122 (np_add_quadruple_or_and -> .)
    LBRACKET        reduce using rule 122 (np_add_quadruple_or_and -> .)
    PLUS            reduce using rule 122 (np_add_quadruple_or_and -> .)
    MINUS           reduce using rule 122 (np_add_quadruple_or_and -> .)
    CTEI            reduce using rule 122 (np_add_quadruple_or_and -> .)
    CTEF            reduce using rule 122 (np_add_quadruple_or_and -> .)
    CTEC            reduce using rule 122 (np_add_quadruple_or_and -> .)
    TRUE            reduce using rule 122 (np_add_quadruple_or_and -> .)
    FALSE           reduce using rule 122 (np_add_quadruple_or_and -> .)
    RBRACE          reduce using rule 122 (np_add_quadruple_or_and -> .)
    SEMI            reduce using rule 122 (np_add_quadruple_or_and -> .)
    RPAREN          reduce using rule 122 (np_add_quadruple_or_and -> .)
    COMMA           reduce using rule 122 (np_add_quadruple_or_and -> .)
    TO              reduce using rule 122 (np_add_quadruple_or_and -> .)
    BY              reduce using rule 122 (np_add_quadruple_or_and -> .)

    np_add_quadruple_or_and        shift and go to state 111

state 55

    (58) exp -> term . np_add_quadruple_sum_min
    (59) exp -> term . np_add_quadruple_sum_min exp_1
    (119) np_add_quadruple_sum_min -> .

    PLUS            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    MINUS           reduce using rule 119 (np_add_quadruple_sum_min -> .)
    LT              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    LE              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    GT              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    GE              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    EQ              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    NE              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    RBRACKET        reduce using rule 119 (np_add_quadruple_sum_min -> .)
    AND             reduce using rule 119 (np_add_quadruple_sum_min -> .)
    OR              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    ID              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    IF              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    PRINT           reduce using rule 119 (np_add_quadruple_sum_min -> .)
    READ            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    RETURN          reduce using rule 119 (np_add_quadruple_sum_min -> .)
    FOR             reduce using rule 119 (np_add_quadruple_sum_min -> .)
    WHILE           reduce using rule 119 (np_add_quadruple_sum_min -> .)
    MEAN            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    MEDIAN          reduce using rule 119 (np_add_quadruple_sum_min -> .)
    MODE            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    VARIANCE        reduce using rule 119 (np_add_quadruple_sum_min -> .)
    STDEV           reduce using rule 119 (np_add_quadruple_sum_min -> .)
    LPAREN          reduce using rule 119 (np_add_quadruple_sum_min -> .)
    LBRACKET        reduce using rule 119 (np_add_quadruple_sum_min -> .)
    CTEI            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    CTEF            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    CTEC            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    TRUE            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    FALSE           reduce using rule 119 (np_add_quadruple_sum_min -> .)
    RBRACE          reduce using rule 119 (np_add_quadruple_sum_min -> .)
    SEMI            reduce using rule 119 (np_add_quadruple_sum_min -> .)
    RPAREN          reduce using rule 119 (np_add_quadruple_sum_min -> .)
    COMMA           reduce using rule 119 (np_add_quadruple_sum_min -> .)
    TO              reduce using rule 119 (np_add_quadruple_sum_min -> .)
    BY              reduce using rule 119 (np_add_quadruple_sum_min -> .)

    np_add_quadruple_sum_min       shift and go to state 112

state 56

    (62) term -> factor . np_add_quadruple_times_div
    (63) term -> factor . np_add_quadruple_times_div term_2
    (120) np_add_quadruple_times_div -> .

    TIMES           reduce using rule 120 (np_add_quadruple_times_div -> .)
    DIVIDE          reduce using rule 120 (np_add_quadruple_times_div -> .)
    PLUS            reduce using rule 120 (np_add_quadruple_times_div -> .)
    MINUS           reduce using rule 120 (np_add_quadruple_times_div -> .)
    LT              reduce using rule 120 (np_add_quadruple_times_div -> .)
    LE              reduce using rule 120 (np_add_quadruple_times_div -> .)
    GT              reduce using rule 120 (np_add_quadruple_times_div -> .)
    GE              reduce using rule 120 (np_add_quadruple_times_div -> .)
    EQ              reduce using rule 120 (np_add_quadruple_times_div -> .)
    NE              reduce using rule 120 (np_add_quadruple_times_div -> .)
    RBRACKET        reduce using rule 120 (np_add_quadruple_times_div -> .)
    AND             reduce using rule 120 (np_add_quadruple_times_div -> .)
    OR              reduce using rule 120 (np_add_quadruple_times_div -> .)
    ID              reduce using rule 120 (np_add_quadruple_times_div -> .)
    IF              reduce using rule 120 (np_add_quadruple_times_div -> .)
    PRINT           reduce using rule 120 (np_add_quadruple_times_div -> .)
    READ            reduce using rule 120 (np_add_quadruple_times_div -> .)
    RETURN          reduce using rule 120 (np_add_quadruple_times_div -> .)
    FOR             reduce using rule 120 (np_add_quadruple_times_div -> .)
    WHILE           reduce using rule 120 (np_add_quadruple_times_div -> .)
    MEAN            reduce using rule 120 (np_add_quadruple_times_div -> .)
    MEDIAN          reduce using rule 120 (np_add_quadruple_times_div -> .)
    MODE            reduce using rule 120 (np_add_quadruple_times_div -> .)
    VARIANCE        reduce using rule 120 (np_add_quadruple_times_div -> .)
    STDEV           reduce using rule 120 (np_add_quadruple_times_div -> .)
    LPAREN          reduce using rule 120 (np_add_quadruple_times_div -> .)
    LBRACKET        reduce using rule 120 (np_add_quadruple_times_div -> .)
    CTEI            reduce using rule 120 (np_add_quadruple_times_div -> .)
    CTEF            reduce using rule 120 (np_add_quadruple_times_div -> .)
    CTEC            reduce using rule 120 (np_add_quadruple_times_div -> .)
    TRUE            reduce using rule 120 (np_add_quadruple_times_div -> .)
    FALSE           reduce using rule 120 (np_add_quadruple_times_div -> .)
    RBRACE          reduce using rule 120 (np_add_quadruple_times_div -> .)
    SEMI            reduce using rule 120 (np_add_quadruple_times_div -> .)
    RPAREN          reduce using rule 120 (np_add_quadruple_times_div -> .)
    COMMA           reduce using rule 120 (np_add_quadruple_times_div -> .)
    TO              reduce using rule 120 (np_add_quadruple_times_div -> .)
    BY              reduce using rule 120 (np_add_quadruple_times_div -> .)

    np_add_quadruple_times_div     shift and go to state 113

state 57

    (66) factor -> LPAREN . np_add_paren expression RPAREN np_pop_paren
    (117) np_add_paren -> .

    LPAREN          reduce using rule 117 (np_add_paren -> .)
    LBRACKET        reduce using rule 117 (np_add_paren -> .)
    ID              reduce using rule 117 (np_add_paren -> .)
    PLUS            reduce using rule 117 (np_add_paren -> .)
    MINUS           reduce using rule 117 (np_add_paren -> .)
    CTEI            reduce using rule 117 (np_add_paren -> .)
    CTEF            reduce using rule 117 (np_add_paren -> .)
    CTEC            reduce using rule 117 (np_add_paren -> .)
    TRUE            reduce using rule 117 (np_add_paren -> .)
    FALSE           reduce using rule 117 (np_add_paren -> .)

    np_add_paren                   shift and go to state 114

state 58

    (68) factor -> function_call .

    TIMES           reduce using rule 68 (factor -> function_call .)
    DIVIDE          reduce using rule 68 (factor -> function_call .)
    PLUS            reduce using rule 68 (factor -> function_call .)
    MINUS           reduce using rule 68 (factor -> function_call .)
    LT              reduce using rule 68 (factor -> function_call .)
    LE              reduce using rule 68 (factor -> function_call .)
    GT              reduce using rule 68 (factor -> function_call .)
    GE              reduce using rule 68 (factor -> function_call .)
    EQ              reduce using rule 68 (factor -> function_call .)
    NE              reduce using rule 68 (factor -> function_call .)
    RBRACKET        reduce using rule 68 (factor -> function_call .)
    AND             reduce using rule 68 (factor -> function_call .)
    OR              reduce using rule 68 (factor -> function_call .)
    SEMI            reduce using rule 68 (factor -> function_call .)
    RPAREN          reduce using rule 68 (factor -> function_call .)
    COMMA           reduce using rule 68 (factor -> function_call .)
    ID              reduce using rule 68 (factor -> function_call .)
    IF              reduce using rule 68 (factor -> function_call .)
    PRINT           reduce using rule 68 (factor -> function_call .)
    READ            reduce using rule 68 (factor -> function_call .)
    RETURN          reduce using rule 68 (factor -> function_call .)
    FOR             reduce using rule 68 (factor -> function_call .)
    WHILE           reduce using rule 68 (factor -> function_call .)
    MEAN            reduce using rule 68 (factor -> function_call .)
    MEDIAN          reduce using rule 68 (factor -> function_call .)
    MODE            reduce using rule 68 (factor -> function_call .)
    VARIANCE        reduce using rule 68 (factor -> function_call .)
    STDEV           reduce using rule 68 (factor -> function_call .)
    LPAREN          reduce using rule 68 (factor -> function_call .)
    LBRACKET        reduce using rule 68 (factor -> function_call .)
    CTEI            reduce using rule 68 (factor -> function_call .)
    CTEF            reduce using rule 68 (factor -> function_call .)
    CTEC            reduce using rule 68 (factor -> function_call .)
    TRUE            reduce using rule 68 (factor -> function_call .)
    FALSE           reduce using rule 68 (factor -> function_call .)
    RBRACE          reduce using rule 68 (factor -> function_call .)
    TO              reduce using rule 68 (factor -> function_call .)
    BY              reduce using rule 68 (factor -> function_call .)


state 59

    (69) factor -> factor_prima_1 .

    TIMES           reduce using rule 69 (factor -> factor_prima_1 .)
    DIVIDE          reduce using rule 69 (factor -> factor_prima_1 .)
    PLUS            reduce using rule 69 (factor -> factor_prima_1 .)
    MINUS           reduce using rule 69 (factor -> factor_prima_1 .)
    LT              reduce using rule 69 (factor -> factor_prima_1 .)
    LE              reduce using rule 69 (factor -> factor_prima_1 .)
    GT              reduce using rule 69 (factor -> factor_prima_1 .)
    GE              reduce using rule 69 (factor -> factor_prima_1 .)
    EQ              reduce using rule 69 (factor -> factor_prima_1 .)
    NE              reduce using rule 69 (factor -> factor_prima_1 .)
    RBRACKET        reduce using rule 69 (factor -> factor_prima_1 .)
    AND             reduce using rule 69 (factor -> factor_prima_1 .)
    OR              reduce using rule 69 (factor -> factor_prima_1 .)
    ID              reduce using rule 69 (factor -> factor_prima_1 .)
    IF              reduce using rule 69 (factor -> factor_prima_1 .)
    PRINT           reduce using rule 69 (factor -> factor_prima_1 .)
    READ            reduce using rule 69 (factor -> factor_prima_1 .)
    RETURN          reduce using rule 69 (factor -> factor_prima_1 .)
    FOR             reduce using rule 69 (factor -> factor_prima_1 .)
    WHILE           reduce using rule 69 (factor -> factor_prima_1 .)
    MEAN            reduce using rule 69 (factor -> factor_prima_1 .)
    MEDIAN          reduce using rule 69 (factor -> factor_prima_1 .)
    MODE            reduce using rule 69 (factor -> factor_prima_1 .)
    VARIANCE        reduce using rule 69 (factor -> factor_prima_1 .)
    STDEV           reduce using rule 69 (factor -> factor_prima_1 .)
    LPAREN          reduce using rule 69 (factor -> factor_prima_1 .)
    LBRACKET        reduce using rule 69 (factor -> factor_prima_1 .)
    CTEI            reduce using rule 69 (factor -> factor_prima_1 .)
    CTEF            reduce using rule 69 (factor -> factor_prima_1 .)
    CTEC            reduce using rule 69 (factor -> factor_prima_1 .)
    TRUE            reduce using rule 69 (factor -> factor_prima_1 .)
    FALSE           reduce using rule 69 (factor -> factor_prima_1 .)
    RBRACE          reduce using rule 69 (factor -> factor_prima_1 .)
    SEMI            reduce using rule 69 (factor -> factor_prima_1 .)
    RPAREN          reduce using rule 69 (factor -> factor_prima_1 .)
    COMMA           reduce using rule 69 (factor -> factor_prima_1 .)
    TO              reduce using rule 69 (factor -> factor_prima_1 .)
    BY              reduce using rule 69 (factor -> factor_prima_1 .)


state 60

    (94) function_call -> ID . LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> ID . LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> ID . LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> ID . LPAREN np_check_function_call np_function_end_params RPAREN
    (73) varcte -> ID . np_add_id_quad
    (111) np_add_id_quad -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 115
    TIMES           reduce using rule 111 (np_add_id_quad -> .)
    DIVIDE          reduce using rule 111 (np_add_id_quad -> .)
    PLUS            reduce using rule 111 (np_add_id_quad -> .)
    MINUS           reduce using rule 111 (np_add_id_quad -> .)
    LT              reduce using rule 111 (np_add_id_quad -> .)
    LE              reduce using rule 111 (np_add_id_quad -> .)
    GT              reduce using rule 111 (np_add_id_quad -> .)
    GE              reduce using rule 111 (np_add_id_quad -> .)
    EQ              reduce using rule 111 (np_add_id_quad -> .)
    NE              reduce using rule 111 (np_add_id_quad -> .)
    RBRACKET        reduce using rule 111 (np_add_id_quad -> .)
    AND             reduce using rule 111 (np_add_id_quad -> .)
    OR              reduce using rule 111 (np_add_id_quad -> .)
    SEMI            reduce using rule 111 (np_add_id_quad -> .)
    RPAREN          reduce using rule 111 (np_add_id_quad -> .)
    COMMA           reduce using rule 111 (np_add_id_quad -> .)
    ID              reduce using rule 111 (np_add_id_quad -> .)
    IF              reduce using rule 111 (np_add_id_quad -> .)
    PRINT           reduce using rule 111 (np_add_id_quad -> .)
    READ            reduce using rule 111 (np_add_id_quad -> .)
    RETURN          reduce using rule 111 (np_add_id_quad -> .)
    FOR             reduce using rule 111 (np_add_id_quad -> .)
    WHILE           reduce using rule 111 (np_add_id_quad -> .)
    MEAN            reduce using rule 111 (np_add_id_quad -> .)
    MEDIAN          reduce using rule 111 (np_add_id_quad -> .)
    MODE            reduce using rule 111 (np_add_id_quad -> .)
    VARIANCE        reduce using rule 111 (np_add_id_quad -> .)
    STDEV           reduce using rule 111 (np_add_id_quad -> .)
    LBRACKET        reduce using rule 111 (np_add_id_quad -> .)
    CTEI            reduce using rule 111 (np_add_id_quad -> .)
    CTEF            reduce using rule 111 (np_add_id_quad -> .)
    CTEC            reduce using rule 111 (np_add_id_quad -> .)
    TRUE            reduce using rule 111 (np_add_id_quad -> .)
    FALSE           reduce using rule 111 (np_add_id_quad -> .)
    RBRACE          reduce using rule 111 (np_add_id_quad -> .)
    TO              reduce using rule 111 (np_add_id_quad -> .)
    BY              reduce using rule 111 (np_add_id_quad -> .)

  ! LPAREN          [ reduce using rule 111 (np_add_id_quad -> .) ]

    np_add_id_quad                 shift and go to state 116

state 61

    (70) factor_prima_1 -> PLUS . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    ID              shift and go to state 118
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    varcte                         shift and go to state 117

state 62

    (72) factor_prima_1 -> varcte .

    TIMES           reduce using rule 72 (factor_prima_1 -> varcte .)
    DIVIDE          reduce using rule 72 (factor_prima_1 -> varcte .)
    PLUS            reduce using rule 72 (factor_prima_1 -> varcte .)
    MINUS           reduce using rule 72 (factor_prima_1 -> varcte .)
    LT              reduce using rule 72 (factor_prima_1 -> varcte .)
    LE              reduce using rule 72 (factor_prima_1 -> varcte .)
    GT              reduce using rule 72 (factor_prima_1 -> varcte .)
    GE              reduce using rule 72 (factor_prima_1 -> varcte .)
    EQ              reduce using rule 72 (factor_prima_1 -> varcte .)
    NE              reduce using rule 72 (factor_prima_1 -> varcte .)
    RBRACKET        reduce using rule 72 (factor_prima_1 -> varcte .)
    AND             reduce using rule 72 (factor_prima_1 -> varcte .)
    OR              reduce using rule 72 (factor_prima_1 -> varcte .)
    ID              reduce using rule 72 (factor_prima_1 -> varcte .)
    IF              reduce using rule 72 (factor_prima_1 -> varcte .)
    PRINT           reduce using rule 72 (factor_prima_1 -> varcte .)
    READ            reduce using rule 72 (factor_prima_1 -> varcte .)
    RETURN          reduce using rule 72 (factor_prima_1 -> varcte .)
    FOR             reduce using rule 72 (factor_prima_1 -> varcte .)
    WHILE           reduce using rule 72 (factor_prima_1 -> varcte .)
    MEAN            reduce using rule 72 (factor_prima_1 -> varcte .)
    MEDIAN          reduce using rule 72 (factor_prima_1 -> varcte .)
    MODE            reduce using rule 72 (factor_prima_1 -> varcte .)
    VARIANCE        reduce using rule 72 (factor_prima_1 -> varcte .)
    STDEV           reduce using rule 72 (factor_prima_1 -> varcte .)
    LPAREN          reduce using rule 72 (factor_prima_1 -> varcte .)
    LBRACKET        reduce using rule 72 (factor_prima_1 -> varcte .)
    CTEI            reduce using rule 72 (factor_prima_1 -> varcte .)
    CTEF            reduce using rule 72 (factor_prima_1 -> varcte .)
    CTEC            reduce using rule 72 (factor_prima_1 -> varcte .)
    TRUE            reduce using rule 72 (factor_prima_1 -> varcte .)
    FALSE           reduce using rule 72 (factor_prima_1 -> varcte .)
    RBRACE          reduce using rule 72 (factor_prima_1 -> varcte .)
    SEMI            reduce using rule 72 (factor_prima_1 -> varcte .)
    RPAREN          reduce using rule 72 (factor_prima_1 -> varcte .)
    COMMA           reduce using rule 72 (factor_prima_1 -> varcte .)
    TO              reduce using rule 72 (factor_prima_1 -> varcte .)
    BY              reduce using rule 72 (factor_prima_1 -> varcte .)


state 63

    (71) factor_prima_1 -> MINUS . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    ID              shift and go to state 118
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    varcte                         shift and go to state 119

state 64

    (74) varcte -> CTEI . np_add_cte_int
    (112) np_add_cte_int -> .

    TIMES           reduce using rule 112 (np_add_cte_int -> .)
    DIVIDE          reduce using rule 112 (np_add_cte_int -> .)
    PLUS            reduce using rule 112 (np_add_cte_int -> .)
    MINUS           reduce using rule 112 (np_add_cte_int -> .)
    LT              reduce using rule 112 (np_add_cte_int -> .)
    LE              reduce using rule 112 (np_add_cte_int -> .)
    GT              reduce using rule 112 (np_add_cte_int -> .)
    GE              reduce using rule 112 (np_add_cte_int -> .)
    EQ              reduce using rule 112 (np_add_cte_int -> .)
    NE              reduce using rule 112 (np_add_cte_int -> .)
    RBRACKET        reduce using rule 112 (np_add_cte_int -> .)
    AND             reduce using rule 112 (np_add_cte_int -> .)
    OR              reduce using rule 112 (np_add_cte_int -> .)
    ID              reduce using rule 112 (np_add_cte_int -> .)
    IF              reduce using rule 112 (np_add_cte_int -> .)
    PRINT           reduce using rule 112 (np_add_cte_int -> .)
    READ            reduce using rule 112 (np_add_cte_int -> .)
    RETURN          reduce using rule 112 (np_add_cte_int -> .)
    FOR             reduce using rule 112 (np_add_cte_int -> .)
    WHILE           reduce using rule 112 (np_add_cte_int -> .)
    MEAN            reduce using rule 112 (np_add_cte_int -> .)
    MEDIAN          reduce using rule 112 (np_add_cte_int -> .)
    MODE            reduce using rule 112 (np_add_cte_int -> .)
    VARIANCE        reduce using rule 112 (np_add_cte_int -> .)
    STDEV           reduce using rule 112 (np_add_cte_int -> .)
    LPAREN          reduce using rule 112 (np_add_cte_int -> .)
    LBRACKET        reduce using rule 112 (np_add_cte_int -> .)
    CTEI            reduce using rule 112 (np_add_cte_int -> .)
    CTEF            reduce using rule 112 (np_add_cte_int -> .)
    CTEC            reduce using rule 112 (np_add_cte_int -> .)
    TRUE            reduce using rule 112 (np_add_cte_int -> .)
    FALSE           reduce using rule 112 (np_add_cte_int -> .)
    RBRACE          reduce using rule 112 (np_add_cte_int -> .)
    SEMI            reduce using rule 112 (np_add_cte_int -> .)
    RPAREN          reduce using rule 112 (np_add_cte_int -> .)
    COMMA           reduce using rule 112 (np_add_cte_int -> .)
    TO              reduce using rule 112 (np_add_cte_int -> .)
    BY              reduce using rule 112 (np_add_cte_int -> .)

    np_add_cte_int                 shift and go to state 120

state 65

    (75) varcte -> CTEF . np_add_cte_float
    (113) np_add_cte_float -> .

    TIMES           reduce using rule 113 (np_add_cte_float -> .)
    DIVIDE          reduce using rule 113 (np_add_cte_float -> .)
    PLUS            reduce using rule 113 (np_add_cte_float -> .)
    MINUS           reduce using rule 113 (np_add_cte_float -> .)
    LT              reduce using rule 113 (np_add_cte_float -> .)
    LE              reduce using rule 113 (np_add_cte_float -> .)
    GT              reduce using rule 113 (np_add_cte_float -> .)
    GE              reduce using rule 113 (np_add_cte_float -> .)
    EQ              reduce using rule 113 (np_add_cte_float -> .)
    NE              reduce using rule 113 (np_add_cte_float -> .)
    RBRACKET        reduce using rule 113 (np_add_cte_float -> .)
    AND             reduce using rule 113 (np_add_cte_float -> .)
    OR              reduce using rule 113 (np_add_cte_float -> .)
    ID              reduce using rule 113 (np_add_cte_float -> .)
    IF              reduce using rule 113 (np_add_cte_float -> .)
    PRINT           reduce using rule 113 (np_add_cte_float -> .)
    READ            reduce using rule 113 (np_add_cte_float -> .)
    RETURN          reduce using rule 113 (np_add_cte_float -> .)
    FOR             reduce using rule 113 (np_add_cte_float -> .)
    WHILE           reduce using rule 113 (np_add_cte_float -> .)
    MEAN            reduce using rule 113 (np_add_cte_float -> .)
    MEDIAN          reduce using rule 113 (np_add_cte_float -> .)
    MODE            reduce using rule 113 (np_add_cte_float -> .)
    VARIANCE        reduce using rule 113 (np_add_cte_float -> .)
    STDEV           reduce using rule 113 (np_add_cte_float -> .)
    LPAREN          reduce using rule 113 (np_add_cte_float -> .)
    LBRACKET        reduce using rule 113 (np_add_cte_float -> .)
    CTEI            reduce using rule 113 (np_add_cte_float -> .)
    CTEF            reduce using rule 113 (np_add_cte_float -> .)
    CTEC            reduce using rule 113 (np_add_cte_float -> .)
    TRUE            reduce using rule 113 (np_add_cte_float -> .)
    FALSE           reduce using rule 113 (np_add_cte_float -> .)
    RBRACE          reduce using rule 113 (np_add_cte_float -> .)
    SEMI            reduce using rule 113 (np_add_cte_float -> .)
    RPAREN          reduce using rule 113 (np_add_cte_float -> .)
    COMMA           reduce using rule 113 (np_add_cte_float -> .)
    TO              reduce using rule 113 (np_add_cte_float -> .)
    BY              reduce using rule 113 (np_add_cte_float -> .)

    np_add_cte_float               shift and go to state 121

state 66

    (76) varcte -> CTEC . np_add_cte_char
    (114) np_add_cte_char -> .

    TIMES           reduce using rule 114 (np_add_cte_char -> .)
    DIVIDE          reduce using rule 114 (np_add_cte_char -> .)
    PLUS            reduce using rule 114 (np_add_cte_char -> .)
    MINUS           reduce using rule 114 (np_add_cte_char -> .)
    LT              reduce using rule 114 (np_add_cte_char -> .)
    LE              reduce using rule 114 (np_add_cte_char -> .)
    GT              reduce using rule 114 (np_add_cte_char -> .)
    GE              reduce using rule 114 (np_add_cte_char -> .)
    EQ              reduce using rule 114 (np_add_cte_char -> .)
    NE              reduce using rule 114 (np_add_cte_char -> .)
    RBRACKET        reduce using rule 114 (np_add_cte_char -> .)
    AND             reduce using rule 114 (np_add_cte_char -> .)
    OR              reduce using rule 114 (np_add_cte_char -> .)
    ID              reduce using rule 114 (np_add_cte_char -> .)
    IF              reduce using rule 114 (np_add_cte_char -> .)
    PRINT           reduce using rule 114 (np_add_cte_char -> .)
    READ            reduce using rule 114 (np_add_cte_char -> .)
    RETURN          reduce using rule 114 (np_add_cte_char -> .)
    FOR             reduce using rule 114 (np_add_cte_char -> .)
    WHILE           reduce using rule 114 (np_add_cte_char -> .)
    MEAN            reduce using rule 114 (np_add_cte_char -> .)
    MEDIAN          reduce using rule 114 (np_add_cte_char -> .)
    MODE            reduce using rule 114 (np_add_cte_char -> .)
    VARIANCE        reduce using rule 114 (np_add_cte_char -> .)
    STDEV           reduce using rule 114 (np_add_cte_char -> .)
    LPAREN          reduce using rule 114 (np_add_cte_char -> .)
    LBRACKET        reduce using rule 114 (np_add_cte_char -> .)
    CTEI            reduce using rule 114 (np_add_cte_char -> .)
    CTEF            reduce using rule 114 (np_add_cte_char -> .)
    CTEC            reduce using rule 114 (np_add_cte_char -> .)
    TRUE            reduce using rule 114 (np_add_cte_char -> .)
    FALSE           reduce using rule 114 (np_add_cte_char -> .)
    RBRACE          reduce using rule 114 (np_add_cte_char -> .)
    SEMI            reduce using rule 114 (np_add_cte_char -> .)
    RPAREN          reduce using rule 114 (np_add_cte_char -> .)
    COMMA           reduce using rule 114 (np_add_cte_char -> .)
    TO              reduce using rule 114 (np_add_cte_char -> .)
    BY              reduce using rule 114 (np_add_cte_char -> .)

    np_add_cte_char                shift and go to state 122

state 67

    (77) varcte -> TRUE . np_add_cte_bool
    (115) np_add_cte_bool -> .

    TIMES           reduce using rule 115 (np_add_cte_bool -> .)
    DIVIDE          reduce using rule 115 (np_add_cte_bool -> .)
    PLUS            reduce using rule 115 (np_add_cte_bool -> .)
    MINUS           reduce using rule 115 (np_add_cte_bool -> .)
    LT              reduce using rule 115 (np_add_cte_bool -> .)
    LE              reduce using rule 115 (np_add_cte_bool -> .)
    GT              reduce using rule 115 (np_add_cte_bool -> .)
    GE              reduce using rule 115 (np_add_cte_bool -> .)
    EQ              reduce using rule 115 (np_add_cte_bool -> .)
    NE              reduce using rule 115 (np_add_cte_bool -> .)
    RBRACKET        reduce using rule 115 (np_add_cte_bool -> .)
    AND             reduce using rule 115 (np_add_cte_bool -> .)
    OR              reduce using rule 115 (np_add_cte_bool -> .)
    ID              reduce using rule 115 (np_add_cte_bool -> .)
    IF              reduce using rule 115 (np_add_cte_bool -> .)
    PRINT           reduce using rule 115 (np_add_cte_bool -> .)
    READ            reduce using rule 115 (np_add_cte_bool -> .)
    RETURN          reduce using rule 115 (np_add_cte_bool -> .)
    FOR             reduce using rule 115 (np_add_cte_bool -> .)
    WHILE           reduce using rule 115 (np_add_cte_bool -> .)
    MEAN            reduce using rule 115 (np_add_cte_bool -> .)
    MEDIAN          reduce using rule 115 (np_add_cte_bool -> .)
    MODE            reduce using rule 115 (np_add_cte_bool -> .)
    VARIANCE        reduce using rule 115 (np_add_cte_bool -> .)
    STDEV           reduce using rule 115 (np_add_cte_bool -> .)
    LPAREN          reduce using rule 115 (np_add_cte_bool -> .)
    LBRACKET        reduce using rule 115 (np_add_cte_bool -> .)
    CTEI            reduce using rule 115 (np_add_cte_bool -> .)
    CTEF            reduce using rule 115 (np_add_cte_bool -> .)
    CTEC            reduce using rule 115 (np_add_cte_bool -> .)
    TRUE            reduce using rule 115 (np_add_cte_bool -> .)
    FALSE           reduce using rule 115 (np_add_cte_bool -> .)
    RBRACE          reduce using rule 115 (np_add_cte_bool -> .)
    SEMI            reduce using rule 115 (np_add_cte_bool -> .)
    RPAREN          reduce using rule 115 (np_add_cte_bool -> .)
    COMMA           reduce using rule 115 (np_add_cte_bool -> .)
    TO              reduce using rule 115 (np_add_cte_bool -> .)
    BY              reduce using rule 115 (np_add_cte_bool -> .)

    np_add_cte_bool                shift and go to state 123

state 68

    (78) varcte -> FALSE . np_add_cte_bool
    (115) np_add_cte_bool -> .

    TIMES           reduce using rule 115 (np_add_cte_bool -> .)
    DIVIDE          reduce using rule 115 (np_add_cte_bool -> .)
    PLUS            reduce using rule 115 (np_add_cte_bool -> .)
    MINUS           reduce using rule 115 (np_add_cte_bool -> .)
    LT              reduce using rule 115 (np_add_cte_bool -> .)
    LE              reduce using rule 115 (np_add_cte_bool -> .)
    GT              reduce using rule 115 (np_add_cte_bool -> .)
    GE              reduce using rule 115 (np_add_cte_bool -> .)
    EQ              reduce using rule 115 (np_add_cte_bool -> .)
    NE              reduce using rule 115 (np_add_cte_bool -> .)
    RBRACKET        reduce using rule 115 (np_add_cte_bool -> .)
    AND             reduce using rule 115 (np_add_cte_bool -> .)
    OR              reduce using rule 115 (np_add_cte_bool -> .)
    ID              reduce using rule 115 (np_add_cte_bool -> .)
    IF              reduce using rule 115 (np_add_cte_bool -> .)
    PRINT           reduce using rule 115 (np_add_cte_bool -> .)
    READ            reduce using rule 115 (np_add_cte_bool -> .)
    RETURN          reduce using rule 115 (np_add_cte_bool -> .)
    FOR             reduce using rule 115 (np_add_cte_bool -> .)
    WHILE           reduce using rule 115 (np_add_cte_bool -> .)
    MEAN            reduce using rule 115 (np_add_cte_bool -> .)
    MEDIAN          reduce using rule 115 (np_add_cte_bool -> .)
    MODE            reduce using rule 115 (np_add_cte_bool -> .)
    VARIANCE        reduce using rule 115 (np_add_cte_bool -> .)
    STDEV           reduce using rule 115 (np_add_cte_bool -> .)
    LPAREN          reduce using rule 115 (np_add_cte_bool -> .)
    LBRACKET        reduce using rule 115 (np_add_cte_bool -> .)
    CTEI            reduce using rule 115 (np_add_cte_bool -> .)
    CTEF            reduce using rule 115 (np_add_cte_bool -> .)
    CTEC            reduce using rule 115 (np_add_cte_bool -> .)
    TRUE            reduce using rule 115 (np_add_cte_bool -> .)
    FALSE           reduce using rule 115 (np_add_cte_bool -> .)
    RBRACE          reduce using rule 115 (np_add_cte_bool -> .)
    SEMI            reduce using rule 115 (np_add_cte_bool -> .)
    RPAREN          reduce using rule 115 (np_add_cte_bool -> .)
    COMMA           reduce using rule 115 (np_add_cte_bool -> .)
    TO              reduce using rule 115 (np_add_cte_bool -> .)
    BY              reduce using rule 115 (np_add_cte_bool -> .)

    np_add_cte_bool                shift and go to state 124

state 69

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . params RPAREN vars np_set_func_start_point block np_end_function
    (25) params -> . ID COLON type np_add_vars np_add_params_type COMMA params
    (26) params -> . ID COLON type np_add_vars np_add_params_type

    RPAREN          shift and go to state 126
    ID              shift and go to state 125

    params                         shift and go to state 127

state 70

    (21) main_block -> MAIN np_create_main_scope LPAREN RPAREN vars block .

    $end            reduce using rule 21 (main_block -> MAIN np_create_main_scope LPAREN RPAREN vars block .)


state 71

    (22) block -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 128


state 72

    (27) statements -> function_call . statements1
    (68) factor -> function_call .
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

  ! reduce/reduce conflict for RBRACE resolved using rule 68 (factor -> function_call .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for MEAN resolved as shift
  ! shift/reduce conflict for MEDIAN resolved as shift
  ! shift/reduce conflict for MODE resolved as shift
  ! shift/reduce conflict for VARIANCE resolved as shift
  ! shift/reduce conflict for STDEV resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    TIMES           reduce using rule 68 (factor -> function_call .)
    DIVIDE          reduce using rule 68 (factor -> function_call .)
    LT              reduce using rule 68 (factor -> function_call .)
    LE              reduce using rule 68 (factor -> function_call .)
    GT              reduce using rule 68 (factor -> function_call .)
    GE              reduce using rule 68 (factor -> function_call .)
    EQ              reduce using rule 68 (factor -> function_call .)
    NE              reduce using rule 68 (factor -> function_call .)
    AND             reduce using rule 68 (factor -> function_call .)
    OR              reduce using rule 68 (factor -> function_call .)
    RBRACE          reduce using rule 68 (factor -> function_call .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

  ! PLUS            [ reduce using rule 68 (factor -> function_call .) ]
  ! MINUS           [ reduce using rule 68 (factor -> function_call .) ]
  ! ID              [ reduce using rule 68 (factor -> function_call .) ]
  ! IF              [ reduce using rule 68 (factor -> function_call .) ]
  ! PRINT           [ reduce using rule 68 (factor -> function_call .) ]
  ! READ            [ reduce using rule 68 (factor -> function_call .) ]
  ! RETURN          [ reduce using rule 68 (factor -> function_call .) ]
  ! FOR             [ reduce using rule 68 (factor -> function_call .) ]
  ! WHILE           [ reduce using rule 68 (factor -> function_call .) ]
  ! MEAN            [ reduce using rule 68 (factor -> function_call .) ]
  ! MEDIAN          [ reduce using rule 68 (factor -> function_call .) ]
  ! MODE            [ reduce using rule 68 (factor -> function_call .) ]
  ! VARIANCE        [ reduce using rule 68 (factor -> function_call .) ]
  ! STDEV           [ reduce using rule 68 (factor -> function_call .) ]
  ! LPAREN          [ reduce using rule 68 (factor -> function_call .) ]
  ! LBRACKET        [ reduce using rule 68 (factor -> function_call .) ]
  ! CTEI            [ reduce using rule 68 (factor -> function_call .) ]
  ! CTEF            [ reduce using rule 68 (factor -> function_call .) ]
  ! CTEC            [ reduce using rule 68 (factor -> function_call .) ]
  ! TRUE            [ reduce using rule 68 (factor -> function_call .) ]
  ! FALSE           [ reduce using rule 68 (factor -> function_call .) ]
  ! RBRACE          [ reduce using rule 105 (epsilon -> .) ]

    function_call                  shift and go to state 72
    statements1                    shift and go to state 129
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 73

    (28) statements -> assignment . statements1
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    assignment                     shift and go to state 73
    statements1                    shift and go to state 132
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 74

    (29) statements -> condition . statements1
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    condition                      shift and go to state 74
    statements1                    shift and go to state 133
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 75

    (30) statements -> writing . statements1
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    writing                        shift and go to state 75
    statements1                    shift and go to state 134
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 76

    (31) statements -> reading . statements1
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    reading                        shift and go to state 76
    statements1                    shift and go to state 135
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 77

    (32) statements -> repetition . statements1
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    repetition                     shift and go to state 77
    statements1                    shift and go to state 136
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    return                         shift and go to state 78
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 78

    (33) statements -> return . statements1
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    return                         shift and go to state 78
    statements1                    shift and go to state 137
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    expression                     shift and go to state 79
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 79

    (34) statements -> expression . statements1
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    AND             shift and go to state 102
    OR              shift and go to state 103
    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 79
    statements1                    shift and go to state 138
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    special_functions              shift and go to state 80
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 80

    (35) statements -> special_functions . statements1
    (41) statements1 -> . statements
    (42) statements1 -> . epsilon
    (27) statements -> . function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . expression statements1
    (35) statements -> . special_functions statements1
    (105) epsilon -> .
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> . ID LBRACKET expression RBRACKET EQUALS expression SEMI
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (79) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (84) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (89) repetition -> . non_conditional_loop
    (90) repetition -> . conditional_loop
    (93) return -> . RETURN expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (36) special_functions -> . mean
    (37) special_functions -> . median
    (38) special_functions -> . mode
    (39) special_functions -> . variance
    (40) special_functions -> . standard_deviation
    (92) non_conditional_loop -> . FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (91) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (100) mean -> . MEAN LPAREN expression RPAREN SEMI
    (101) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (102) mode -> . MODE LPAREN expression RPAREN SEMI
    (103) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (104) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RBRACE          reduce using rule 105 (epsilon -> .)
    ID              shift and go to state 81
    IF              shift and go to state 82
    PRINT           shift and go to state 83
    READ            shift and go to state 84
    RETURN          shift and go to state 87
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    MEAN            shift and go to state 95
    MEDIAN          shift and go to state 96
    MODE            shift and go to state 97
    VARIANCE        shift and go to state 98
    STDEV           shift and go to state 99
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    special_functions              shift and go to state 80
    statements1                    shift and go to state 139
    statements                     shift and go to state 130
    epsilon                        shift and go to state 131
    function_call                  shift and go to state 72
    assignment                     shift and go to state 73
    condition                      shift and go to state 74
    writing                        shift and go to state 75
    reading                        shift and go to state 76
    repetition                     shift and go to state 77
    return                         shift and go to state 78
    expression                     shift and go to state 79
    non_conditional_loop           shift and go to state 85
    conditional_loop               shift and go to state 86
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    mean                           shift and go to state 88
    median                         shift and go to state 89
    mode                           shift and go to state 90
    variance                       shift and go to state 91
    standard_deviation             shift and go to state 92
    term                           shift and go to state 55
    factor                         shift and go to state 56
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 81

    (94) function_call -> ID . LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> ID . LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> ID . LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> ID . LPAREN np_check_function_call np_function_end_params RPAREN
    (43) assignment -> ID . np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI
    (44) assignment -> ID . LBRACKET expression RBRACKET EQUALS expression SEMI
    (73) varcte -> ID . np_add_id_quad
    (111) np_add_id_quad -> .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 115
    LBRACKET        shift and go to state 141
    EQUALS          reduce using rule 111 (np_add_id_quad -> .)
    TIMES           reduce using rule 111 (np_add_id_quad -> .)
    DIVIDE          reduce using rule 111 (np_add_id_quad -> .)
    PLUS            reduce using rule 111 (np_add_id_quad -> .)
    MINUS           reduce using rule 111 (np_add_id_quad -> .)
    LT              reduce using rule 111 (np_add_id_quad -> .)
    LE              reduce using rule 111 (np_add_id_quad -> .)
    GT              reduce using rule 111 (np_add_id_quad -> .)
    GE              reduce using rule 111 (np_add_id_quad -> .)
    EQ              reduce using rule 111 (np_add_id_quad -> .)
    NE              reduce using rule 111 (np_add_id_quad -> .)
    AND             reduce using rule 111 (np_add_id_quad -> .)
    OR              reduce using rule 111 (np_add_id_quad -> .)
    ID              reduce using rule 111 (np_add_id_quad -> .)
    IF              reduce using rule 111 (np_add_id_quad -> .)
    PRINT           reduce using rule 111 (np_add_id_quad -> .)
    READ            reduce using rule 111 (np_add_id_quad -> .)
    RETURN          reduce using rule 111 (np_add_id_quad -> .)
    FOR             reduce using rule 111 (np_add_id_quad -> .)
    WHILE           reduce using rule 111 (np_add_id_quad -> .)
    MEAN            reduce using rule 111 (np_add_id_quad -> .)
    MEDIAN          reduce using rule 111 (np_add_id_quad -> .)
    MODE            reduce using rule 111 (np_add_id_quad -> .)
    VARIANCE        reduce using rule 111 (np_add_id_quad -> .)
    STDEV           reduce using rule 111 (np_add_id_quad -> .)
    CTEI            reduce using rule 111 (np_add_id_quad -> .)
    CTEF            reduce using rule 111 (np_add_id_quad -> .)
    CTEC            reduce using rule 111 (np_add_id_quad -> .)
    TRUE            reduce using rule 111 (np_add_id_quad -> .)
    FALSE           reduce using rule 111 (np_add_id_quad -> .)
    RBRACE          reduce using rule 111 (np_add_id_quad -> .)

  ! LPAREN          [ reduce using rule 111 (np_add_id_quad -> .) ]
  ! LBRACKET        [ reduce using rule 111 (np_add_id_quad -> .) ]

    np_add_id_quad                 shift and go to state 140

state 82

    (45) condition -> IF . LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> IF . LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof

    LPAREN          shift and go to state 142


state 83

    (79) writing -> PRINT . LPAREN writing_1 RPAREN SEMI

    LPAREN          shift and go to state 143


state 84

    (84) reading -> READ . LPAREN reading_1 RPAREN SEMI

    LPAREN          shift and go to state 144


state 85

    (89) repetition -> non_conditional_loop .

    ID              reduce using rule 89 (repetition -> non_conditional_loop .)
    IF              reduce using rule 89 (repetition -> non_conditional_loop .)
    PRINT           reduce using rule 89 (repetition -> non_conditional_loop .)
    READ            reduce using rule 89 (repetition -> non_conditional_loop .)
    RETURN          reduce using rule 89 (repetition -> non_conditional_loop .)
    FOR             reduce using rule 89 (repetition -> non_conditional_loop .)
    WHILE           reduce using rule 89 (repetition -> non_conditional_loop .)
    MEAN            reduce using rule 89 (repetition -> non_conditional_loop .)
    MEDIAN          reduce using rule 89 (repetition -> non_conditional_loop .)
    MODE            reduce using rule 89 (repetition -> non_conditional_loop .)
    VARIANCE        reduce using rule 89 (repetition -> non_conditional_loop .)
    STDEV           reduce using rule 89 (repetition -> non_conditional_loop .)
    LPAREN          reduce using rule 89 (repetition -> non_conditional_loop .)
    LBRACKET        reduce using rule 89 (repetition -> non_conditional_loop .)
    PLUS            reduce using rule 89 (repetition -> non_conditional_loop .)
    MINUS           reduce using rule 89 (repetition -> non_conditional_loop .)
    CTEI            reduce using rule 89 (repetition -> non_conditional_loop .)
    CTEF            reduce using rule 89 (repetition -> non_conditional_loop .)
    CTEC            reduce using rule 89 (repetition -> non_conditional_loop .)
    TRUE            reduce using rule 89 (repetition -> non_conditional_loop .)
    FALSE           reduce using rule 89 (repetition -> non_conditional_loop .)
    RBRACE          reduce using rule 89 (repetition -> non_conditional_loop .)


state 86

    (90) repetition -> conditional_loop .

    ID              reduce using rule 90 (repetition -> conditional_loop .)
    IF              reduce using rule 90 (repetition -> conditional_loop .)
    PRINT           reduce using rule 90 (repetition -> conditional_loop .)
    READ            reduce using rule 90 (repetition -> conditional_loop .)
    RETURN          reduce using rule 90 (repetition -> conditional_loop .)
    FOR             reduce using rule 90 (repetition -> conditional_loop .)
    WHILE           reduce using rule 90 (repetition -> conditional_loop .)
    MEAN            reduce using rule 90 (repetition -> conditional_loop .)
    MEDIAN          reduce using rule 90 (repetition -> conditional_loop .)
    MODE            reduce using rule 90 (repetition -> conditional_loop .)
    VARIANCE        reduce using rule 90 (repetition -> conditional_loop .)
    STDEV           reduce using rule 90 (repetition -> conditional_loop .)
    LPAREN          reduce using rule 90 (repetition -> conditional_loop .)
    LBRACKET        reduce using rule 90 (repetition -> conditional_loop .)
    PLUS            reduce using rule 90 (repetition -> conditional_loop .)
    MINUS           reduce using rule 90 (repetition -> conditional_loop .)
    CTEI            reduce using rule 90 (repetition -> conditional_loop .)
    CTEF            reduce using rule 90 (repetition -> conditional_loop .)
    CTEC            reduce using rule 90 (repetition -> conditional_loop .)
    TRUE            reduce using rule 90 (repetition -> conditional_loop .)
    FALSE           reduce using rule 90 (repetition -> conditional_loop .)
    RBRACE          reduce using rule 90 (repetition -> conditional_loop .)


state 87

    (93) return -> RETURN . expression np_add_return_quadruple SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 145
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 88

    (36) special_functions -> mean .

    ID              reduce using rule 36 (special_functions -> mean .)
    IF              reduce using rule 36 (special_functions -> mean .)
    PRINT           reduce using rule 36 (special_functions -> mean .)
    READ            reduce using rule 36 (special_functions -> mean .)
    RETURN          reduce using rule 36 (special_functions -> mean .)
    FOR             reduce using rule 36 (special_functions -> mean .)
    WHILE           reduce using rule 36 (special_functions -> mean .)
    MEAN            reduce using rule 36 (special_functions -> mean .)
    MEDIAN          reduce using rule 36 (special_functions -> mean .)
    MODE            reduce using rule 36 (special_functions -> mean .)
    VARIANCE        reduce using rule 36 (special_functions -> mean .)
    STDEV           reduce using rule 36 (special_functions -> mean .)
    LPAREN          reduce using rule 36 (special_functions -> mean .)
    LBRACKET        reduce using rule 36 (special_functions -> mean .)
    PLUS            reduce using rule 36 (special_functions -> mean .)
    MINUS           reduce using rule 36 (special_functions -> mean .)
    CTEI            reduce using rule 36 (special_functions -> mean .)
    CTEF            reduce using rule 36 (special_functions -> mean .)
    CTEC            reduce using rule 36 (special_functions -> mean .)
    TRUE            reduce using rule 36 (special_functions -> mean .)
    FALSE           reduce using rule 36 (special_functions -> mean .)
    RBRACE          reduce using rule 36 (special_functions -> mean .)


state 89

    (37) special_functions -> median .

    ID              reduce using rule 37 (special_functions -> median .)
    IF              reduce using rule 37 (special_functions -> median .)
    PRINT           reduce using rule 37 (special_functions -> median .)
    READ            reduce using rule 37 (special_functions -> median .)
    RETURN          reduce using rule 37 (special_functions -> median .)
    FOR             reduce using rule 37 (special_functions -> median .)
    WHILE           reduce using rule 37 (special_functions -> median .)
    MEAN            reduce using rule 37 (special_functions -> median .)
    MEDIAN          reduce using rule 37 (special_functions -> median .)
    MODE            reduce using rule 37 (special_functions -> median .)
    VARIANCE        reduce using rule 37 (special_functions -> median .)
    STDEV           reduce using rule 37 (special_functions -> median .)
    LPAREN          reduce using rule 37 (special_functions -> median .)
    LBRACKET        reduce using rule 37 (special_functions -> median .)
    PLUS            reduce using rule 37 (special_functions -> median .)
    MINUS           reduce using rule 37 (special_functions -> median .)
    CTEI            reduce using rule 37 (special_functions -> median .)
    CTEF            reduce using rule 37 (special_functions -> median .)
    CTEC            reduce using rule 37 (special_functions -> median .)
    TRUE            reduce using rule 37 (special_functions -> median .)
    FALSE           reduce using rule 37 (special_functions -> median .)
    RBRACE          reduce using rule 37 (special_functions -> median .)


state 90

    (38) special_functions -> mode .

    ID              reduce using rule 38 (special_functions -> mode .)
    IF              reduce using rule 38 (special_functions -> mode .)
    PRINT           reduce using rule 38 (special_functions -> mode .)
    READ            reduce using rule 38 (special_functions -> mode .)
    RETURN          reduce using rule 38 (special_functions -> mode .)
    FOR             reduce using rule 38 (special_functions -> mode .)
    WHILE           reduce using rule 38 (special_functions -> mode .)
    MEAN            reduce using rule 38 (special_functions -> mode .)
    MEDIAN          reduce using rule 38 (special_functions -> mode .)
    MODE            reduce using rule 38 (special_functions -> mode .)
    VARIANCE        reduce using rule 38 (special_functions -> mode .)
    STDEV           reduce using rule 38 (special_functions -> mode .)
    LPAREN          reduce using rule 38 (special_functions -> mode .)
    LBRACKET        reduce using rule 38 (special_functions -> mode .)
    PLUS            reduce using rule 38 (special_functions -> mode .)
    MINUS           reduce using rule 38 (special_functions -> mode .)
    CTEI            reduce using rule 38 (special_functions -> mode .)
    CTEF            reduce using rule 38 (special_functions -> mode .)
    CTEC            reduce using rule 38 (special_functions -> mode .)
    TRUE            reduce using rule 38 (special_functions -> mode .)
    FALSE           reduce using rule 38 (special_functions -> mode .)
    RBRACE          reduce using rule 38 (special_functions -> mode .)


state 91

    (39) special_functions -> variance .

    ID              reduce using rule 39 (special_functions -> variance .)
    IF              reduce using rule 39 (special_functions -> variance .)
    PRINT           reduce using rule 39 (special_functions -> variance .)
    READ            reduce using rule 39 (special_functions -> variance .)
    RETURN          reduce using rule 39 (special_functions -> variance .)
    FOR             reduce using rule 39 (special_functions -> variance .)
    WHILE           reduce using rule 39 (special_functions -> variance .)
    MEAN            reduce using rule 39 (special_functions -> variance .)
    MEDIAN          reduce using rule 39 (special_functions -> variance .)
    MODE            reduce using rule 39 (special_functions -> variance .)
    VARIANCE        reduce using rule 39 (special_functions -> variance .)
    STDEV           reduce using rule 39 (special_functions -> variance .)
    LPAREN          reduce using rule 39 (special_functions -> variance .)
    LBRACKET        reduce using rule 39 (special_functions -> variance .)
    PLUS            reduce using rule 39 (special_functions -> variance .)
    MINUS           reduce using rule 39 (special_functions -> variance .)
    CTEI            reduce using rule 39 (special_functions -> variance .)
    CTEF            reduce using rule 39 (special_functions -> variance .)
    CTEC            reduce using rule 39 (special_functions -> variance .)
    TRUE            reduce using rule 39 (special_functions -> variance .)
    FALSE           reduce using rule 39 (special_functions -> variance .)
    RBRACE          reduce using rule 39 (special_functions -> variance .)


state 92

    (40) special_functions -> standard_deviation .

    ID              reduce using rule 40 (special_functions -> standard_deviation .)
    IF              reduce using rule 40 (special_functions -> standard_deviation .)
    PRINT           reduce using rule 40 (special_functions -> standard_deviation .)
    READ            reduce using rule 40 (special_functions -> standard_deviation .)
    RETURN          reduce using rule 40 (special_functions -> standard_deviation .)
    FOR             reduce using rule 40 (special_functions -> standard_deviation .)
    WHILE           reduce using rule 40 (special_functions -> standard_deviation .)
    MEAN            reduce using rule 40 (special_functions -> standard_deviation .)
    MEDIAN          reduce using rule 40 (special_functions -> standard_deviation .)
    MODE            reduce using rule 40 (special_functions -> standard_deviation .)
    VARIANCE        reduce using rule 40 (special_functions -> standard_deviation .)
    STDEV           reduce using rule 40 (special_functions -> standard_deviation .)
    LPAREN          reduce using rule 40 (special_functions -> standard_deviation .)
    LBRACKET        reduce using rule 40 (special_functions -> standard_deviation .)
    PLUS            reduce using rule 40 (special_functions -> standard_deviation .)
    MINUS           reduce using rule 40 (special_functions -> standard_deviation .)
    CTEI            reduce using rule 40 (special_functions -> standard_deviation .)
    CTEF            reduce using rule 40 (special_functions -> standard_deviation .)
    CTEC            reduce using rule 40 (special_functions -> standard_deviation .)
    TRUE            reduce using rule 40 (special_functions -> standard_deviation .)
    FALSE           reduce using rule 40 (special_functions -> standard_deviation .)
    RBRACE          reduce using rule 40 (special_functions -> standard_deviation .)


state 93

    (92) non_conditional_loop -> FOR . LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    LPAREN          shift and go to state 146


state 94

    (91) conditional_loop -> WHILE . np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (127) np_while_init -> .

    LPAREN          reduce using rule 127 (np_while_init -> .)

    np_while_init                  shift and go to state 147

state 95

    (100) mean -> MEAN . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 148


state 96

    (101) median -> MEDIAN . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 149


state 97

    (102) mode -> MODE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 150


state 98

    (103) variance -> VARIANCE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 151


state 99

    (104) standard_deviation -> STDEV . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 152


state 100

    (67) factor -> LBRACKET expression . RBRACKET
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RBRACKET        shift and go to state 153
    AND             shift and go to state 102
    OR              shift and go to state 103


state 101

    (14) type_1 -> LBRACKET expression RBRACKET .

    SEMI            reduce using rule 14 (type_1 -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 14 (type_1 -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 14 (type_1 -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 14 (type_1 -> LBRACKET expression RBRACKET .)


state 102

    (50) expression0 -> expression AND . np_add_operator expression
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 154

state 103

    (51) expression0 -> expression OR . np_add_operator expression
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 155

state 104

    (52) expression1 -> exp LT . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 156

state 105

    (53) expression1 -> exp LE . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 157

state 106

    (54) expression1 -> exp GT . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 158

state 107

    (55) expression1 -> exp GE . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 159

state 108

    (56) expression1 -> exp EQ . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 160

state 109

    (57) expression1 -> exp NE . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 161

state 110

    (48) expression -> expression1 np_add_quadruple_logical .

    RBRACKET        reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    AND             reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    OR              reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    ID              reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    IF              reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    PRINT           reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    READ            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    RETURN          reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    FOR             reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    WHILE           reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    MEAN            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    MEDIAN          reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    MODE            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    VARIANCE        reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    STDEV           reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    LPAREN          reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    LBRACKET        reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    PLUS            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    MINUS           reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    CTEI            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    CTEF            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    CTEC            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    TRUE            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    FALSE           reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    RBRACE          reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    SEMI            reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    RPAREN          reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    COMMA           reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    TO              reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)
    BY              reduce using rule 48 (expression -> expression1 np_add_quadruple_logical .)


state 111

    (49) expression -> expression0 np_add_quadruple_or_and .

    RBRACKET        reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    AND             reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    OR              reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    ID              reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    IF              reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    PRINT           reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    READ            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    RETURN          reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    FOR             reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    WHILE           reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    MEAN            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    MEDIAN          reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    MODE            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    VARIANCE        reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    STDEV           reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    LPAREN          reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    LBRACKET        reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    PLUS            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    MINUS           reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    CTEI            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    CTEF            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    CTEC            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    TRUE            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    FALSE           reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    RBRACE          reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    SEMI            reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    RPAREN          reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    COMMA           reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    TO              reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)
    BY              reduce using rule 49 (expression -> expression0 np_add_quadruple_or_and .)


state 112

    (58) exp -> term np_add_quadruple_sum_min .
    (59) exp -> term np_add_quadruple_sum_min . exp_1
    (60) exp_1 -> . PLUS np_add_operator exp
    (61) exp_1 -> . MINUS np_add_operator exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LT              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    LE              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    GT              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    GE              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    EQ              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    NE              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    RBRACKET        reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    AND             reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    OR              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    ID              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    IF              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    PRINT           reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    READ            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    RETURN          reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    FOR             reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    WHILE           reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    MEAN            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    MEDIAN          reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    MODE            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    VARIANCE        reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    STDEV           reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    LPAREN          reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    LBRACKET        reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    CTEI            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    CTEF            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    CTEC            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    TRUE            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    FALSE           reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    RBRACE          reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    SEMI            reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    RPAREN          reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    COMMA           reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    TO              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    BY              reduce using rule 58 (exp -> term np_add_quadruple_sum_min .)
    PLUS            shift and go to state 163
    MINUS           shift and go to state 164

  ! PLUS            [ reduce using rule 58 (exp -> term np_add_quadruple_sum_min .) ]
  ! MINUS           [ reduce using rule 58 (exp -> term np_add_quadruple_sum_min .) ]

    exp_1                          shift and go to state 162

state 113

    (62) term -> factor np_add_quadruple_times_div .
    (63) term -> factor np_add_quadruple_times_div . term_2
    (64) term_2 -> . TIMES np_add_operator term
    (65) term_2 -> . DIVIDE np_add_operator term

    PLUS            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    MINUS           reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    LT              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    LE              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    GT              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    GE              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    EQ              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    NE              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    RBRACKET        reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    AND             reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    OR              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    ID              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    IF              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    PRINT           reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    READ            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    RETURN          reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    FOR             reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    WHILE           reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    MEAN            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    MEDIAN          reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    MODE            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    VARIANCE        reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    STDEV           reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    LPAREN          reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    LBRACKET        reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    CTEI            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    CTEF            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    CTEC            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    TRUE            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    FALSE           reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    RBRACE          reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    SEMI            reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    RPAREN          reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    COMMA           reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    TO              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    BY              reduce using rule 62 (term -> factor np_add_quadruple_times_div .)
    TIMES           shift and go to state 166
    DIVIDE          shift and go to state 167

    term_2                         shift and go to state 165

state 114

    (66) factor -> LPAREN np_add_paren . expression RPAREN np_pop_paren
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 168
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 115

    (94) function_call -> ID LPAREN . np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> ID LPAREN . np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> ID LPAREN . np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> ID LPAREN . np_check_function_call np_function_end_params RPAREN
    (140) np_check_function_call -> .

    LPAREN          reduce using rule 140 (np_check_function_call -> .)
    LBRACKET        reduce using rule 140 (np_check_function_call -> .)
    ID              reduce using rule 140 (np_check_function_call -> .)
    PLUS            reduce using rule 140 (np_check_function_call -> .)
    MINUS           reduce using rule 140 (np_check_function_call -> .)
    CTEI            reduce using rule 140 (np_check_function_call -> .)
    CTEF            reduce using rule 140 (np_check_function_call -> .)
    CTEC            reduce using rule 140 (np_check_function_call -> .)
    TRUE            reduce using rule 140 (np_check_function_call -> .)
    FALSE           reduce using rule 140 (np_check_function_call -> .)
    RPAREN          reduce using rule 140 (np_check_function_call -> .)

    np_check_function_call         shift and go to state 169

state 116

    (73) varcte -> ID np_add_id_quad .

    TIMES           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    DIVIDE          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    PLUS            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MINUS           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LT              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LE              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    GT              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    GE              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    EQ              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    NE              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    RBRACKET        reduce using rule 73 (varcte -> ID np_add_id_quad .)
    AND             reduce using rule 73 (varcte -> ID np_add_id_quad .)
    OR              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    ID              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    IF              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    PRINT           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    READ            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    RETURN          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    FOR             reduce using rule 73 (varcte -> ID np_add_id_quad .)
    WHILE           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MEAN            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MEDIAN          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MODE            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    VARIANCE        reduce using rule 73 (varcte -> ID np_add_id_quad .)
    STDEV           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LPAREN          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LBRACKET        reduce using rule 73 (varcte -> ID np_add_id_quad .)
    CTEI            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    CTEF            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    CTEC            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    TRUE            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    FALSE           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    RBRACE          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    SEMI            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    RPAREN          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    COMMA           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    TO              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    BY              reduce using rule 73 (varcte -> ID np_add_id_quad .)


state 117

    (70) factor_prima_1 -> PLUS varcte .

    TIMES           reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    DIVIDE          reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    PLUS            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    MINUS           reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    LT              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    LE              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    GT              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    GE              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    EQ              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    NE              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    RBRACKET        reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    AND             reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    OR              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    ID              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    IF              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    PRINT           reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    READ            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    RETURN          reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    FOR             reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    WHILE           reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    MEAN            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    MEDIAN          reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    MODE            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    VARIANCE        reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    STDEV           reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    LPAREN          reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    LBRACKET        reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    CTEI            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    CTEF            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    CTEC            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    TRUE            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    FALSE           reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    RBRACE          reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    SEMI            reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    RPAREN          reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    COMMA           reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    TO              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)
    BY              reduce using rule 70 (factor_prima_1 -> PLUS varcte .)


state 118

    (73) varcte -> ID . np_add_id_quad
    (111) np_add_id_quad -> .

    TIMES           reduce using rule 111 (np_add_id_quad -> .)
    DIVIDE          reduce using rule 111 (np_add_id_quad -> .)
    PLUS            reduce using rule 111 (np_add_id_quad -> .)
    MINUS           reduce using rule 111 (np_add_id_quad -> .)
    LT              reduce using rule 111 (np_add_id_quad -> .)
    LE              reduce using rule 111 (np_add_id_quad -> .)
    GT              reduce using rule 111 (np_add_id_quad -> .)
    GE              reduce using rule 111 (np_add_id_quad -> .)
    EQ              reduce using rule 111 (np_add_id_quad -> .)
    NE              reduce using rule 111 (np_add_id_quad -> .)
    RBRACKET        reduce using rule 111 (np_add_id_quad -> .)
    AND             reduce using rule 111 (np_add_id_quad -> .)
    OR              reduce using rule 111 (np_add_id_quad -> .)
    ID              reduce using rule 111 (np_add_id_quad -> .)
    IF              reduce using rule 111 (np_add_id_quad -> .)
    PRINT           reduce using rule 111 (np_add_id_quad -> .)
    READ            reduce using rule 111 (np_add_id_quad -> .)
    RETURN          reduce using rule 111 (np_add_id_quad -> .)
    FOR             reduce using rule 111 (np_add_id_quad -> .)
    WHILE           reduce using rule 111 (np_add_id_quad -> .)
    MEAN            reduce using rule 111 (np_add_id_quad -> .)
    MEDIAN          reduce using rule 111 (np_add_id_quad -> .)
    MODE            reduce using rule 111 (np_add_id_quad -> .)
    VARIANCE        reduce using rule 111 (np_add_id_quad -> .)
    STDEV           reduce using rule 111 (np_add_id_quad -> .)
    LPAREN          reduce using rule 111 (np_add_id_quad -> .)
    LBRACKET        reduce using rule 111 (np_add_id_quad -> .)
    CTEI            reduce using rule 111 (np_add_id_quad -> .)
    CTEF            reduce using rule 111 (np_add_id_quad -> .)
    CTEC            reduce using rule 111 (np_add_id_quad -> .)
    TRUE            reduce using rule 111 (np_add_id_quad -> .)
    FALSE           reduce using rule 111 (np_add_id_quad -> .)
    RBRACE          reduce using rule 111 (np_add_id_quad -> .)
    SEMI            reduce using rule 111 (np_add_id_quad -> .)
    RPAREN          reduce using rule 111 (np_add_id_quad -> .)
    COMMA           reduce using rule 111 (np_add_id_quad -> .)
    TO              reduce using rule 111 (np_add_id_quad -> .)
    BY              reduce using rule 111 (np_add_id_quad -> .)

    np_add_id_quad                 shift and go to state 116

state 119

    (71) factor_prima_1 -> MINUS varcte .

    TIMES           reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    DIVIDE          reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    PLUS            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    MINUS           reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    LT              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    LE              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    GT              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    GE              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    EQ              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    NE              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    RBRACKET        reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    AND             reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    OR              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    ID              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    IF              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    PRINT           reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    READ            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    RETURN          reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    FOR             reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    WHILE           reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    MEAN            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    MEDIAN          reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    MODE            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    VARIANCE        reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    STDEV           reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    LPAREN          reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    LBRACKET        reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    CTEI            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    CTEF            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    CTEC            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    TRUE            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    FALSE           reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    RBRACE          reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    SEMI            reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    RPAREN          reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    COMMA           reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    TO              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)
    BY              reduce using rule 71 (factor_prima_1 -> MINUS varcte .)


state 120

    (74) varcte -> CTEI np_add_cte_int .

    TIMES           reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    DIVIDE          reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    PLUS            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    MINUS           reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    LT              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    LE              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    GT              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    GE              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    EQ              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    NE              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    RBRACKET        reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    AND             reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    OR              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    ID              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    IF              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    PRINT           reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    READ            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    RETURN          reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    FOR             reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    WHILE           reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    MEAN            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    MEDIAN          reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    MODE            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    VARIANCE        reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    STDEV           reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    LPAREN          reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    LBRACKET        reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    CTEI            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    CTEF            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    CTEC            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    TRUE            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    FALSE           reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    RBRACE          reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    SEMI            reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    RPAREN          reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    COMMA           reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    TO              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)
    BY              reduce using rule 74 (varcte -> CTEI np_add_cte_int .)


state 121

    (75) varcte -> CTEF np_add_cte_float .

    TIMES           reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    DIVIDE          reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    PLUS            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    MINUS           reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    LT              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    LE              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    GT              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    GE              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    EQ              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    NE              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    RBRACKET        reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    AND             reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    OR              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    ID              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    IF              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    PRINT           reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    READ            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    RETURN          reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    FOR             reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    WHILE           reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    MEAN            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    MEDIAN          reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    MODE            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    VARIANCE        reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    STDEV           reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    LPAREN          reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    LBRACKET        reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    CTEI            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    CTEF            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    CTEC            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    TRUE            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    FALSE           reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    RBRACE          reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    SEMI            reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    RPAREN          reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    COMMA           reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    TO              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)
    BY              reduce using rule 75 (varcte -> CTEF np_add_cte_float .)


state 122

    (76) varcte -> CTEC np_add_cte_char .

    TIMES           reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    DIVIDE          reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    PLUS            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    MINUS           reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    LT              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    LE              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    GT              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    GE              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    EQ              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    NE              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    RBRACKET        reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    AND             reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    OR              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    ID              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    IF              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    PRINT           reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    READ            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    RETURN          reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    FOR             reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    WHILE           reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    MEAN            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    MEDIAN          reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    MODE            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    VARIANCE        reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    STDEV           reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    LPAREN          reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    LBRACKET        reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    CTEI            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    CTEF            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    CTEC            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    TRUE            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    FALSE           reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    RBRACE          reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    SEMI            reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    RPAREN          reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    COMMA           reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    TO              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)
    BY              reduce using rule 76 (varcte -> CTEC np_add_cte_char .)


state 123

    (77) varcte -> TRUE np_add_cte_bool .

    TIMES           reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    DIVIDE          reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    PLUS            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    MINUS           reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    LT              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    LE              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    GT              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    GE              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    EQ              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    NE              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    RBRACKET        reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    AND             reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    OR              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    ID              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    IF              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    PRINT           reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    READ            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    RETURN          reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    FOR             reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    WHILE           reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    MEAN            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    MEDIAN          reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    MODE            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    VARIANCE        reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    STDEV           reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    LPAREN          reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    LBRACKET        reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    CTEI            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    CTEF            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    CTEC            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    TRUE            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    FALSE           reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    RBRACE          reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    SEMI            reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    RPAREN          reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    COMMA           reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    TO              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)
    BY              reduce using rule 77 (varcte -> TRUE np_add_cte_bool .)


state 124

    (78) varcte -> FALSE np_add_cte_bool .

    TIMES           reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    DIVIDE          reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    PLUS            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    MINUS           reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    LT              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    LE              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    GT              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    GE              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    EQ              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    NE              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    RBRACKET        reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    AND             reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    OR              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    ID              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    IF              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    PRINT           reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    READ            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    RETURN          reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    FOR             reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    WHILE           reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    MEAN            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    MEDIAN          reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    MODE            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    VARIANCE        reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    STDEV           reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    LPAREN          reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    LBRACKET        reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    CTEI            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    CTEF            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    CTEC            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    TRUE            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    FALSE           reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    RBRACE          reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    SEMI            reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    RPAREN          reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    COMMA           reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    TO              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)
    BY              reduce using rule 78 (varcte -> FALSE np_add_cte_bool .)


state 125

    (25) params -> ID . COLON type np_add_vars np_add_params_type COMMA params
    (26) params -> ID . COLON type np_add_vars np_add_params_type

    COLON           shift and go to state 170


state 126

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN . np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN . vars np_set_func_start_point block np_end_function
    (137) np_set_func_start_point -> .
    (5) vars -> . vars_1
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    LBRACE          reduce using rule 137 (np_set_func_start_point -> .)
    LET             shift and go to state 11

    np_set_func_start_point        shift and go to state 171
    vars                           shift and go to state 172
    vars_1                         shift and go to state 8

state 127

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params . RPAREN np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params . RPAREN vars np_set_func_start_point block np_end_function

    RPAREN          shift and go to state 173


state 128

    (22) block -> LBRACE statements RBRACE .

    $end            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MAIN            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    ID              reduce using rule 22 (block -> LBRACE statements RBRACE .)
    IF              reduce using rule 22 (block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    READ            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 22 (block -> LBRACE statements RBRACE .)
    FOR             reduce using rule 22 (block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MEAN            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MEDIAN          reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MODE            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    VARIANCE        reduce using rule 22 (block -> LBRACE statements RBRACE .)
    STDEV           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    LPAREN          reduce using rule 22 (block -> LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 22 (block -> LBRACE statements RBRACE .)
    PLUS            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    CTEI            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    CTEF            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    CTEC            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    TRUE            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    FALSE           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 22 (block -> LBRACE statements RBRACE .)


state 129

    (27) statements -> function_call statements1 .

    RBRACE          reduce using rule 27 (statements -> function_call statements1 .)


state 130

    (41) statements1 -> statements .

    RBRACE          reduce using rule 41 (statements1 -> statements .)


state 131

    (42) statements1 -> epsilon .

    RBRACE          reduce using rule 42 (statements1 -> epsilon .)


state 132

    (28) statements -> assignment statements1 .

    RBRACE          reduce using rule 28 (statements -> assignment statements1 .)


state 133

    (29) statements -> condition statements1 .

    RBRACE          reduce using rule 29 (statements -> condition statements1 .)


state 134

    (30) statements -> writing statements1 .

    RBRACE          reduce using rule 30 (statements -> writing statements1 .)


state 135

    (31) statements -> reading statements1 .

    RBRACE          reduce using rule 31 (statements -> reading statements1 .)


state 136

    (32) statements -> repetition statements1 .

    RBRACE          reduce using rule 32 (statements -> repetition statements1 .)


state 137

    (33) statements -> return statements1 .

    RBRACE          reduce using rule 33 (statements -> return statements1 .)


state 138

    (34) statements -> expression statements1 .

    RBRACE          reduce using rule 34 (statements -> expression statements1 .)


state 139

    (35) statements -> special_functions statements1 .

    RBRACE          reduce using rule 35 (statements -> special_functions statements1 .)


state 140

    (43) assignment -> ID np_add_id_quad . EQUALS np_add_operator expression np_assign_expression SEMI
    (73) varcte -> ID np_add_id_quad .

    EQUALS          shift and go to state 174
    TIMES           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    DIVIDE          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    PLUS            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MINUS           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LT              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LE              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    GT              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    GE              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    EQ              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    NE              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    AND             reduce using rule 73 (varcte -> ID np_add_id_quad .)
    OR              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    ID              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    IF              reduce using rule 73 (varcte -> ID np_add_id_quad .)
    PRINT           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    READ            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    RETURN          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    FOR             reduce using rule 73 (varcte -> ID np_add_id_quad .)
    WHILE           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MEAN            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MEDIAN          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    MODE            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    VARIANCE        reduce using rule 73 (varcte -> ID np_add_id_quad .)
    STDEV           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LPAREN          reduce using rule 73 (varcte -> ID np_add_id_quad .)
    LBRACKET        reduce using rule 73 (varcte -> ID np_add_id_quad .)
    CTEI            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    CTEF            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    CTEC            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    TRUE            reduce using rule 73 (varcte -> ID np_add_id_quad .)
    FALSE           reduce using rule 73 (varcte -> ID np_add_id_quad .)
    RBRACE          reduce using rule 73 (varcte -> ID np_add_id_quad .)


state 141

    (44) assignment -> ID LBRACKET . expression RBRACKET EQUALS expression SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 175
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 142

    (45) condition -> IF LPAREN . expression RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> IF LPAREN . expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 176
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 143

    (79) writing -> PRINT LPAREN . writing_1 RPAREN SEMI
    (80) writing_1 -> . expression np_add_print_quadruple_exp COMMA writing_1
    (81) writing_1 -> . CTESTRING np_add_print_quadruple_str COMMA writing_1
    (82) writing_1 -> . expression np_add_print_quadruple_exp
    (83) writing_1 -> . CTESTRING np_add_print_quadruple_str
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    CTESTRING       shift and go to state 179
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    writing_1                      shift and go to state 177
    expression                     shift and go to state 178
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 144

    (84) reading -> READ LPAREN . reading_1 RPAREN SEMI
    (85) reading_1 -> . ID COMMA reading_1
    (86) reading_1 -> . ID LBRACKET expression RBRACKET COMMA reading_1
    (87) reading_1 -> . ID
    (88) reading_1 -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 181

    reading_1                      shift and go to state 180

state 145

    (93) return -> RETURN expression . np_add_return_quadruple SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression
    (135) np_add_return_quadruple -> .

    AND             shift and go to state 102
    OR              shift and go to state 103
    SEMI            reduce using rule 135 (np_add_return_quadruple -> .)

    np_add_return_quadruple        shift and go to state 182

state 146

    (92) non_conditional_loop -> FOR LPAREN . ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    ID              shift and go to state 183


state 147

    (91) conditional_loop -> WHILE np_while_init . LPAREN expression RPAREN np_while_expression DO block np_while_end_block

    LPAREN          shift and go to state 184


state 148

    (100) mean -> MEAN LPAREN . expression RPAREN SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 185
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 149

    (101) median -> MEDIAN LPAREN . expression RPAREN SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 186
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 150

    (102) mode -> MODE LPAREN . expression RPAREN SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 187
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 151

    (103) variance -> VARIANCE LPAREN . expression RPAREN SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 188
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 152

    (104) standard_deviation -> STDEV LPAREN . expression RPAREN SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 189
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 153

    (67) factor -> LBRACKET expression RBRACKET .

    TIMES           reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    LT              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    LE              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    GT              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    GE              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    EQ              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    NE              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    AND             reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    OR              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    PRINT           reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    READ            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    FOR             reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    MEAN            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    MEDIAN          reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    MODE            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    VARIANCE        reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    STDEV           reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    CTEI            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    CTEF            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    CTEC            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    TO              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)
    BY              reduce using rule 67 (factor -> LBRACKET expression RBRACKET .)


state 154

    (50) expression0 -> expression AND np_add_operator . expression
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 190
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 155

    (51) expression0 -> expression OR np_add_operator . expression
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 191
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 156

    (52) expression1 -> exp LT np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 192
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 157

    (53) expression1 -> exp LE np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 193
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 158

    (54) expression1 -> exp GT np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 194
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 159

    (55) expression1 -> exp GE np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 195
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 160

    (56) expression1 -> exp EQ np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 196
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 161

    (57) expression1 -> exp NE np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 197
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 162

    (59) exp -> term np_add_quadruple_sum_min exp_1 .

    LT              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    LE              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    GT              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    GE              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    EQ              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    NE              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    RBRACKET        reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    AND             reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    OR              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    ID              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    IF              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    PRINT           reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    READ            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    RETURN          reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    FOR             reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    WHILE           reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    MEAN            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    MEDIAN          reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    MODE            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    VARIANCE        reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    STDEV           reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    LPAREN          reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    LBRACKET        reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    PLUS            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    MINUS           reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    CTEI            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    CTEF            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    CTEC            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    TRUE            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    FALSE           reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    RBRACE          reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    SEMI            reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    RPAREN          reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    COMMA           reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    TO              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)
    BY              reduce using rule 59 (exp -> term np_add_quadruple_sum_min exp_1 .)


state 163

    (60) exp_1 -> PLUS . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 198

state 164

    (61) exp_1 -> MINUS . np_add_operator exp
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 199

state 165

    (63) term -> factor np_add_quadruple_times_div term_2 .

    PLUS            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    MINUS           reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    LT              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    LE              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    GT              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    GE              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    EQ              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    NE              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    RBRACKET        reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    AND             reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    OR              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    ID              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    IF              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    PRINT           reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    READ            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    RETURN          reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    FOR             reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    WHILE           reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    MEAN            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    MEDIAN          reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    MODE            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    VARIANCE        reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    STDEV           reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    LPAREN          reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    LBRACKET        reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    CTEI            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    CTEF            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    CTEC            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    TRUE            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    FALSE           reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    RBRACE          reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    SEMI            reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    RPAREN          reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    COMMA           reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    TO              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)
    BY              reduce using rule 63 (term -> factor np_add_quadruple_times_div term_2 .)


state 166

    (64) term_2 -> TIMES . np_add_operator term
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 200

state 167

    (65) term_2 -> DIVIDE . np_add_operator term
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 201

state 168

    (66) factor -> LPAREN np_add_paren expression . RPAREN np_pop_paren
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 202
    AND             shift and go to state 102
    OR              shift and go to state 103


state 169

    (94) function_call -> ID LPAREN np_check_function_call . np_function_end_params RPAREN SEMI
    (95) function_call -> ID LPAREN np_check_function_call . function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> ID LPAREN np_check_function_call . function_call_1 np_function_end_params RPAREN
    (97) function_call -> ID LPAREN np_check_function_call . np_function_end_params RPAREN
    (142) np_function_end_params -> .
    (98) function_call_1 -> . expression np_function_call_add_param
    (99) function_call_1 -> . expression np_function_call_add_param COMMA function_call_1
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    RPAREN          reduce using rule 142 (np_function_end_params -> .)
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    np_function_end_params         shift and go to state 203
    function_call_1                shift and go to state 204
    expression                     shift and go to state 205
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 170

    (25) params -> ID COLON . type np_add_vars np_add_params_type COMMA params
    (26) params -> ID COLON . type np_add_vars np_add_params_type
    (10) type -> . INT type_1
    (11) type -> . FLOAT type_1
    (12) type -> . CHAR type_1
    (13) type -> . BOOL type_1

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    BOOL            shift and go to state 31

    type                           shift and go to state 206

state 171

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 207

state 172

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars . np_set_func_start_point block np_end_function
    (137) np_set_func_start_point -> .

    LBRACE          reduce using rule 137 (np_set_func_start_point -> .)

    np_set_func_start_point        shift and go to state 208

state 173

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN . np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN . vars np_set_func_start_point block np_end_function
    (137) np_set_func_start_point -> .
    (5) vars -> . vars_1
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    LBRACE          reduce using rule 137 (np_set_func_start_point -> .)
    LET             shift and go to state 11

    np_set_func_start_point        shift and go to state 209
    vars                           shift and go to state 210
    vars_1                         shift and go to state 8

state 174

    (43) assignment -> ID np_add_id_quad EQUALS . np_add_operator expression np_assign_expression SEMI
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 211

state 175

    (44) assignment -> ID LBRACKET expression . RBRACKET EQUALS expression SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RBRACKET        shift and go to state 212
    AND             shift and go to state 102
    OR              shift and go to state 103


state 176

    (45) condition -> IF LPAREN expression . RPAREN np_condition_gotof block np_condition_end_gotof
    (46) condition -> IF LPAREN expression . RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 213
    AND             shift and go to state 102
    OR              shift and go to state 103


state 177

    (79) writing -> PRINT LPAREN writing_1 . RPAREN SEMI

    RPAREN          shift and go to state 214


state 178

    (80) writing_1 -> expression . np_add_print_quadruple_exp COMMA writing_1
    (82) writing_1 -> expression . np_add_print_quadruple_exp
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression
    (134) np_add_print_quadruple_exp -> .

    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           reduce using rule 134 (np_add_print_quadruple_exp -> .)
    RPAREN          reduce using rule 134 (np_add_print_quadruple_exp -> .)

    np_add_print_quadruple_exp     shift and go to state 215

state 179

    (81) writing_1 -> CTESTRING . np_add_print_quadruple_str COMMA writing_1
    (83) writing_1 -> CTESTRING . np_add_print_quadruple_str
    (133) np_add_print_quadruple_str -> .

    COMMA           reduce using rule 133 (np_add_print_quadruple_str -> .)
    RPAREN          reduce using rule 133 (np_add_print_quadruple_str -> .)

    np_add_print_quadruple_str     shift and go to state 216

state 180

    (84) reading -> READ LPAREN reading_1 . RPAREN SEMI

    RPAREN          shift and go to state 217


state 181

    (85) reading_1 -> ID . COMMA reading_1
    (86) reading_1 -> ID . LBRACKET expression RBRACKET COMMA reading_1
    (87) reading_1 -> ID .
    (88) reading_1 -> ID . LBRACKET expression RBRACKET

    COMMA           shift and go to state 218
    LBRACKET        shift and go to state 219
    RPAREN          reduce using rule 87 (reading_1 -> ID .)


state 182

    (93) return -> RETURN expression np_add_return_quadruple . SEMI

    SEMI            shift and go to state 220


state 183

    (92) non_conditional_loop -> FOR LPAREN ID . np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (111) np_add_id_quad -> .

    EQUALS          reduce using rule 111 (np_add_id_quad -> .)

    np_add_id_quad                 shift and go to state 221

state 184

    (91) conditional_loop -> WHILE np_while_init LPAREN . expression RPAREN np_while_expression DO block np_while_end_block
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 222
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 185

    (100) mean -> MEAN LPAREN expression . RPAREN SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 223
    AND             shift and go to state 102
    OR              shift and go to state 103


state 186

    (101) median -> MEDIAN LPAREN expression . RPAREN SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 224
    AND             shift and go to state 102
    OR              shift and go to state 103


state 187

    (102) mode -> MODE LPAREN expression . RPAREN SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 225
    AND             shift and go to state 102
    OR              shift and go to state 103


state 188

    (103) variance -> VARIANCE LPAREN expression . RPAREN SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 226
    AND             shift and go to state 102
    OR              shift and go to state 103


state 189

    (104) standard_deviation -> STDEV LPAREN expression . RPAREN SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 227
    AND             shift and go to state 102
    OR              shift and go to state 103


state 190

    (50) expression0 -> expression AND np_add_operator expression .
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    ID              reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    IF              reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    PRINT           reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    READ            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    RETURN          reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    FOR             reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    WHILE           reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    MEAN            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    MEDIAN          reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    MODE            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    VARIANCE        reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    STDEV           reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    LPAREN          reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    LBRACKET        reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    PLUS            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    MINUS           reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    CTEI            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    CTEF            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    CTEC            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    TRUE            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    FALSE           reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    RBRACE          reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    SEMI            reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    RPAREN          reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    COMMA           reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    TO              reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    BY              reduce using rule 50 (expression0 -> expression AND np_add_operator expression .)
    AND             shift and go to state 102
    OR              shift and go to state 103

  ! AND             [ reduce using rule 50 (expression0 -> expression AND np_add_operator expression .) ]
  ! OR              [ reduce using rule 50 (expression0 -> expression AND np_add_operator expression .) ]


state 191

    (51) expression0 -> expression OR np_add_operator expression .
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    ID              reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    IF              reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    PRINT           reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    READ            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    RETURN          reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    FOR             reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    WHILE           reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    MEAN            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    MEDIAN          reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    MODE            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    VARIANCE        reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    STDEV           reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    LPAREN          reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    LBRACKET        reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    PLUS            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    MINUS           reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    CTEI            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    CTEF            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    CTEC            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    TRUE            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    FALSE           reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    RBRACE          reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    SEMI            reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    RPAREN          reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    COMMA           reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    TO              reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    BY              reduce using rule 51 (expression0 -> expression OR np_add_operator expression .)
    AND             shift and go to state 102
    OR              shift and go to state 103

  ! AND             [ reduce using rule 51 (expression0 -> expression OR np_add_operator expression .) ]
  ! OR              [ reduce using rule 51 (expression0 -> expression OR np_add_operator expression .) ]


state 192

    (52) expression1 -> exp LT np_add_operator exp .

    RBRACKET        reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    AND             reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    OR              reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    ID              reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    IF              reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    PRINT           reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    READ            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    RETURN          reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    FOR             reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    WHILE           reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    MEAN            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    MEDIAN          reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    MODE            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    VARIANCE        reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    STDEV           reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    LPAREN          reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    LBRACKET        reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    PLUS            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    MINUS           reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    CTEI            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    CTEF            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    CTEC            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    TRUE            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    FALSE           reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    RBRACE          reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    SEMI            reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    RPAREN          reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    COMMA           reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    TO              reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)
    BY              reduce using rule 52 (expression1 -> exp LT np_add_operator exp .)


state 193

    (53) expression1 -> exp LE np_add_operator exp .

    RBRACKET        reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    AND             reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    OR              reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    ID              reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    IF              reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    PRINT           reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    READ            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    RETURN          reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    FOR             reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    WHILE           reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    MEAN            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    MEDIAN          reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    MODE            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    VARIANCE        reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    STDEV           reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    LPAREN          reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    LBRACKET        reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    PLUS            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    MINUS           reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    CTEI            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    CTEF            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    CTEC            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    TRUE            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    FALSE           reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    RBRACE          reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    SEMI            reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    RPAREN          reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    COMMA           reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    TO              reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)
    BY              reduce using rule 53 (expression1 -> exp LE np_add_operator exp .)


state 194

    (54) expression1 -> exp GT np_add_operator exp .

    RBRACKET        reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    AND             reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    OR              reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    ID              reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    IF              reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    PRINT           reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    READ            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    RETURN          reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    FOR             reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    WHILE           reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    MEAN            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    MEDIAN          reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    MODE            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    VARIANCE        reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    STDEV           reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    LPAREN          reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    LBRACKET        reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    PLUS            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    MINUS           reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    CTEI            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    CTEF            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    CTEC            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    TRUE            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    FALSE           reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    RBRACE          reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    SEMI            reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    RPAREN          reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    COMMA           reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    TO              reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)
    BY              reduce using rule 54 (expression1 -> exp GT np_add_operator exp .)


state 195

    (55) expression1 -> exp GE np_add_operator exp .

    RBRACKET        reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    AND             reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    OR              reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    ID              reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    IF              reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    PRINT           reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    READ            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    RETURN          reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    FOR             reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    WHILE           reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    MEAN            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    MEDIAN          reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    MODE            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    VARIANCE        reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    STDEV           reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    LPAREN          reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    LBRACKET        reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    PLUS            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    MINUS           reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    CTEI            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    CTEF            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    CTEC            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    TRUE            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    FALSE           reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    RBRACE          reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    SEMI            reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    RPAREN          reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    COMMA           reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    TO              reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)
    BY              reduce using rule 55 (expression1 -> exp GE np_add_operator exp .)


state 196

    (56) expression1 -> exp EQ np_add_operator exp .

    RBRACKET        reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    AND             reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    OR              reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    ID              reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    IF              reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    PRINT           reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    READ            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    RETURN          reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    FOR             reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    WHILE           reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    MEAN            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    MEDIAN          reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    MODE            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    VARIANCE        reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    STDEV           reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    LPAREN          reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    LBRACKET        reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    PLUS            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    MINUS           reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    CTEI            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    CTEF            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    CTEC            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    TRUE            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    FALSE           reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    RBRACE          reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    SEMI            reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    RPAREN          reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    COMMA           reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    TO              reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)
    BY              reduce using rule 56 (expression1 -> exp EQ np_add_operator exp .)


state 197

    (57) expression1 -> exp NE np_add_operator exp .

    RBRACKET        reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    AND             reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    OR              reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    ID              reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    IF              reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    PRINT           reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    READ            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    RETURN          reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    FOR             reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    WHILE           reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    MEAN            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    MEDIAN          reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    MODE            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    VARIANCE        reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    STDEV           reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    LPAREN          reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    LBRACKET        reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    PLUS            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    MINUS           reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    CTEI            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    CTEF            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    CTEC            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    TRUE            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    FALSE           reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    RBRACE          reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    SEMI            reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    RPAREN          reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    COMMA           reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    TO              reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)
    BY              reduce using rule 57 (expression1 -> exp NE np_add_operator exp .)


state 198

    (60) exp_1 -> PLUS np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 228
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 199

    (61) exp_1 -> MINUS np_add_operator . exp
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    exp                            shift and go to state 229
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 200

    (64) term_2 -> TIMES np_add_operator . term
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    term                           shift and go to state 230
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 201

    (65) term_2 -> DIVIDE np_add_operator . term
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    term                           shift and go to state 231
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 202

    (66) factor -> LPAREN np_add_paren expression RPAREN . np_pop_paren
    (118) np_pop_paren -> .

    TIMES           reduce using rule 118 (np_pop_paren -> .)
    DIVIDE          reduce using rule 118 (np_pop_paren -> .)
    PLUS            reduce using rule 118 (np_pop_paren -> .)
    MINUS           reduce using rule 118 (np_pop_paren -> .)
    LT              reduce using rule 118 (np_pop_paren -> .)
    LE              reduce using rule 118 (np_pop_paren -> .)
    GT              reduce using rule 118 (np_pop_paren -> .)
    GE              reduce using rule 118 (np_pop_paren -> .)
    EQ              reduce using rule 118 (np_pop_paren -> .)
    NE              reduce using rule 118 (np_pop_paren -> .)
    RBRACKET        reduce using rule 118 (np_pop_paren -> .)
    AND             reduce using rule 118 (np_pop_paren -> .)
    OR              reduce using rule 118 (np_pop_paren -> .)
    ID              reduce using rule 118 (np_pop_paren -> .)
    IF              reduce using rule 118 (np_pop_paren -> .)
    PRINT           reduce using rule 118 (np_pop_paren -> .)
    READ            reduce using rule 118 (np_pop_paren -> .)
    RETURN          reduce using rule 118 (np_pop_paren -> .)
    FOR             reduce using rule 118 (np_pop_paren -> .)
    WHILE           reduce using rule 118 (np_pop_paren -> .)
    MEAN            reduce using rule 118 (np_pop_paren -> .)
    MEDIAN          reduce using rule 118 (np_pop_paren -> .)
    MODE            reduce using rule 118 (np_pop_paren -> .)
    VARIANCE        reduce using rule 118 (np_pop_paren -> .)
    STDEV           reduce using rule 118 (np_pop_paren -> .)
    LPAREN          reduce using rule 118 (np_pop_paren -> .)
    LBRACKET        reduce using rule 118 (np_pop_paren -> .)
    CTEI            reduce using rule 118 (np_pop_paren -> .)
    CTEF            reduce using rule 118 (np_pop_paren -> .)
    CTEC            reduce using rule 118 (np_pop_paren -> .)
    TRUE            reduce using rule 118 (np_pop_paren -> .)
    FALSE           reduce using rule 118 (np_pop_paren -> .)
    RBRACE          reduce using rule 118 (np_pop_paren -> .)
    SEMI            reduce using rule 118 (np_pop_paren -> .)
    RPAREN          reduce using rule 118 (np_pop_paren -> .)
    COMMA           reduce using rule 118 (np_pop_paren -> .)
    TO              reduce using rule 118 (np_pop_paren -> .)
    BY              reduce using rule 118 (np_pop_paren -> .)

    np_pop_paren                   shift and go to state 232

state 203

    (94) function_call -> ID LPAREN np_check_function_call np_function_end_params . RPAREN SEMI
    (97) function_call -> ID LPAREN np_check_function_call np_function_end_params . RPAREN

    RPAREN          shift and go to state 233


state 204

    (95) function_call -> ID LPAREN np_check_function_call function_call_1 . np_function_end_params RPAREN SEMI
    (96) function_call -> ID LPAREN np_check_function_call function_call_1 . np_function_end_params RPAREN
    (142) np_function_end_params -> .

    RPAREN          reduce using rule 142 (np_function_end_params -> .)

    np_function_end_params         shift and go to state 234

state 205

    (98) function_call_1 -> expression . np_function_call_add_param
    (99) function_call_1 -> expression . np_function_call_add_param COMMA function_call_1
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression
    (141) np_function_call_add_param -> .

    AND             shift and go to state 102
    OR              shift and go to state 103
    COMMA           reduce using rule 141 (np_function_call_add_param -> .)
    RPAREN          reduce using rule 141 (np_function_call_add_param -> .)

    np_function_call_add_param     shift and go to state 235

state 206

    (25) params -> ID COLON type . np_add_vars np_add_params_type COMMA params
    (26) params -> ID COLON type . np_add_vars np_add_params_type
    (110) np_add_vars -> .

    COMMA           reduce using rule 110 (np_add_vars -> .)
    RPAREN          reduce using rule 110 (np_add_vars -> .)

    np_add_vars                    shift and go to state 236

state 207

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block . np_end_function
    (138) np_end_function -> .

    FUNCTION        reduce using rule 138 (np_end_function -> .)
    MAIN            reduce using rule 138 (np_end_function -> .)

    np_end_function                shift and go to state 237

state 208

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 238

state 209

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 239

state 210

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars . np_set_func_start_point block np_end_function
    (137) np_set_func_start_point -> .

    LBRACE          reduce using rule 137 (np_set_func_start_point -> .)

    np_set_func_start_point        shift and go to state 240

state 211

    (43) assignment -> ID np_add_id_quad EQUALS np_add_operator . expression np_assign_expression SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 241
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 212

    (44) assignment -> ID LBRACKET expression RBRACKET . EQUALS expression SEMI

    EQUALS          shift and go to state 242


state 213

    (45) condition -> IF LPAREN expression RPAREN . np_condition_gotof block np_condition_end_gotof
    (46) condition -> IF LPAREN expression RPAREN . np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (124) np_condition_gotof -> .

    LBRACE          reduce using rule 124 (np_condition_gotof -> .)

    np_condition_gotof             shift and go to state 243

state 214

    (79) writing -> PRINT LPAREN writing_1 RPAREN . SEMI

    SEMI            shift and go to state 244


state 215

    (80) writing_1 -> expression np_add_print_quadruple_exp . COMMA writing_1
    (82) writing_1 -> expression np_add_print_quadruple_exp .

    COMMA           shift and go to state 245
    RPAREN          reduce using rule 82 (writing_1 -> expression np_add_print_quadruple_exp .)


state 216

    (81) writing_1 -> CTESTRING np_add_print_quadruple_str . COMMA writing_1
    (83) writing_1 -> CTESTRING np_add_print_quadruple_str .

    COMMA           shift and go to state 246
    RPAREN          reduce using rule 83 (writing_1 -> CTESTRING np_add_print_quadruple_str .)


state 217

    (84) reading -> READ LPAREN reading_1 RPAREN . SEMI

    SEMI            shift and go to state 247


state 218

    (85) reading_1 -> ID COMMA . reading_1
    (85) reading_1 -> . ID COMMA reading_1
    (86) reading_1 -> . ID LBRACKET expression RBRACKET COMMA reading_1
    (87) reading_1 -> . ID
    (88) reading_1 -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 181

    reading_1                      shift and go to state 248

state 219

    (86) reading_1 -> ID LBRACKET . expression RBRACKET COMMA reading_1
    (88) reading_1 -> ID LBRACKET . expression RBRACKET
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 249
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 220

    (93) return -> RETURN expression np_add_return_quadruple SEMI .

    ID              reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    IF              reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    PRINT           reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    READ            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    RETURN          reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    FOR             reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    WHILE           reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    MEAN            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    MEDIAN          reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    MODE            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    VARIANCE        reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    STDEV           reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    LPAREN          reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    LBRACKET        reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    PLUS            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    MINUS           reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    CTEI            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    CTEF            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    CTEC            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    TRUE            reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    FALSE           reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)
    RBRACE          reduce using rule 93 (return -> RETURN expression np_add_return_quadruple SEMI .)


state 221

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad . EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    EQUALS          shift and go to state 250


state 222

    (91) conditional_loop -> WHILE np_while_init LPAREN expression . RPAREN np_while_expression DO block np_while_end_block
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 251
    AND             shift and go to state 102
    OR              shift and go to state 103


state 223

    (100) mean -> MEAN LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 252


state 224

    (101) median -> MEDIAN LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 253


state 225

    (102) mode -> MODE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 254


state 226

    (103) variance -> VARIANCE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 255


state 227

    (104) standard_deviation -> STDEV LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 256


state 228

    (60) exp_1 -> PLUS np_add_operator exp .

    LT              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    LE              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    GT              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    GE              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    EQ              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    NE              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    RBRACKET        reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    AND             reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    OR              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    ID              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    IF              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    PRINT           reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    READ            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    RETURN          reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    FOR             reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    WHILE           reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    MEAN            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    MEDIAN          reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    MODE            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    VARIANCE        reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    STDEV           reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    LPAREN          reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    LBRACKET        reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    PLUS            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    MINUS           reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    CTEI            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    CTEF            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    CTEC            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    TRUE            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    FALSE           reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    RBRACE          reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    SEMI            reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    RPAREN          reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    COMMA           reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    TO              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)
    BY              reduce using rule 60 (exp_1 -> PLUS np_add_operator exp .)


state 229

    (61) exp_1 -> MINUS np_add_operator exp .

    LT              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    LE              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    GT              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    GE              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    EQ              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    NE              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    RBRACKET        reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    AND             reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    OR              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    ID              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    IF              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    PRINT           reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    READ            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    RETURN          reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    FOR             reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    WHILE           reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    MEAN            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    MEDIAN          reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    MODE            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    VARIANCE        reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    STDEV           reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    LPAREN          reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    LBRACKET        reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    PLUS            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    MINUS           reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    CTEI            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    CTEF            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    CTEC            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    TRUE            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    FALSE           reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    RBRACE          reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    SEMI            reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    RPAREN          reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    COMMA           reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    TO              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)
    BY              reduce using rule 61 (exp_1 -> MINUS np_add_operator exp .)


state 230

    (64) term_2 -> TIMES np_add_operator term .

    PLUS            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    MINUS           reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    LT              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    LE              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    GT              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    GE              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    EQ              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    NE              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    RBRACKET        reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    AND             reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    OR              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    ID              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    IF              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    PRINT           reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    READ            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    RETURN          reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    FOR             reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    WHILE           reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    MEAN            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    MEDIAN          reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    MODE            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    VARIANCE        reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    STDEV           reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    LPAREN          reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    LBRACKET        reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    CTEI            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    CTEF            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    CTEC            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    TRUE            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    FALSE           reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    RBRACE          reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    SEMI            reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    RPAREN          reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    COMMA           reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    TO              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)
    BY              reduce using rule 64 (term_2 -> TIMES np_add_operator term .)


state 231

    (65) term_2 -> DIVIDE np_add_operator term .

    PLUS            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    MINUS           reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    LT              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    LE              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    GT              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    GE              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    EQ              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    NE              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    RBRACKET        reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    AND             reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    OR              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    ID              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    IF              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    PRINT           reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    READ            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    RETURN          reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    FOR             reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    WHILE           reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    MEAN            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    MEDIAN          reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    MODE            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    VARIANCE        reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    STDEV           reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    LPAREN          reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    LBRACKET        reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    CTEI            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    CTEF            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    CTEC            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    TRUE            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    FALSE           reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    RBRACE          reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    SEMI            reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    RPAREN          reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    COMMA           reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    TO              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)
    BY              reduce using rule 65 (term_2 -> DIVIDE np_add_operator term .)


state 232

    (66) factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .

    TIMES           reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    DIVIDE          reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    PLUS            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    MINUS           reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    LT              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    LE              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    GT              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    GE              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    EQ              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    NE              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    RBRACKET        reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    AND             reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    OR              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    ID              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    IF              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    PRINT           reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    READ            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    RETURN          reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    FOR             reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    WHILE           reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    MEAN            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    MEDIAN          reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    MODE            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    VARIANCE        reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    STDEV           reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    LPAREN          reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    LBRACKET        reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    CTEI            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    CTEF            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    CTEC            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    TRUE            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    FALSE           reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    RBRACE          reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    SEMI            reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    RPAREN          reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    COMMA           reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    TO              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    BY              reduce using rule 66 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)


state 233

    (94) function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN . SEMI
    (97) function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 257
    TIMES           reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    DIVIDE          reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    PLUS            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    MINUS           reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    LT              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    LE              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    GT              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    GE              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    EQ              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    NE              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    RBRACKET        reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    AND             reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    OR              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    ID              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    IF              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    PRINT           reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    READ            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    RETURN          reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    FOR             reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    WHILE           reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    MEAN            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    MEDIAN          reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    MODE            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    VARIANCE        reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    STDEV           reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    LPAREN          reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    LBRACKET        reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    CTEI            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    CTEF            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    CTEC            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    TRUE            reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    FALSE           reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    RBRACE          reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    RPAREN          reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    COMMA           reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    TO              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    BY              reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)

  ! SEMI            [ reduce using rule 97 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .) ]


state 234

    (95) function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params . RPAREN SEMI
    (96) function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params . RPAREN

    RPAREN          shift and go to state 258


state 235

    (98) function_call_1 -> expression np_function_call_add_param .
    (99) function_call_1 -> expression np_function_call_add_param . COMMA function_call_1

    RPAREN          reduce using rule 98 (function_call_1 -> expression np_function_call_add_param .)
    COMMA           shift and go to state 259


state 236

    (25) params -> ID COLON type np_add_vars . np_add_params_type COMMA params
    (26) params -> ID COLON type np_add_vars . np_add_params_type
    (136) np_add_params_type -> .

    COMMA           reduce using rule 136 (np_add_params_type -> .)
    RPAREN          reduce using rule 136 (np_add_params_type -> .)

    np_add_params_type             shift and go to state 260

state 237

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 16 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 16 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function .)


state 238

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block . np_end_function
    (138) np_end_function -> .

    FUNCTION        reduce using rule 138 (np_end_function -> .)
    MAIN            reduce using rule 138 (np_end_function -> .)

    np_end_function                shift and go to state 261

state 239

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block . np_end_function
    (138) np_end_function -> .

    FUNCTION        reduce using rule 138 (np_end_function -> .)
    MAIN            reduce using rule 138 (np_end_function -> .)

    np_end_function                shift and go to state 262

state 240

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 263

state 241

    (43) assignment -> ID np_add_id_quad EQUALS np_add_operator expression . np_assign_expression SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression
    (123) np_assign_expression -> .

    AND             shift and go to state 102
    OR              shift and go to state 103
    SEMI            reduce using rule 123 (np_assign_expression -> .)

    np_assign_expression           shift and go to state 264

state 242

    (44) assignment -> ID LBRACKET expression RBRACKET EQUALS . expression SEMI
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 265
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 243

    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof . block np_condition_end_gotof
    (46) condition -> IF LPAREN expression RPAREN np_condition_gotof . block ELSE np_condition_goto_else block np_condition_end_gotof
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 266

state 244

    (79) writing -> PRINT LPAREN writing_1 RPAREN SEMI .

    ID              reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    IF              reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    PRINT           reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    READ            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    RETURN          reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    FOR             reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    WHILE           reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    MEAN            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    MEDIAN          reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    MODE            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    VARIANCE        reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    STDEV           reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    LPAREN          reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    LBRACKET        reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    PLUS            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    MINUS           reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    CTEI            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    CTEF            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    CTEC            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    TRUE            reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    FALSE           reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    RBRACE          reduce using rule 79 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)


state 245

    (80) writing_1 -> expression np_add_print_quadruple_exp COMMA . writing_1
    (80) writing_1 -> . expression np_add_print_quadruple_exp COMMA writing_1
    (81) writing_1 -> . CTESTRING np_add_print_quadruple_str COMMA writing_1
    (82) writing_1 -> . expression np_add_print_quadruple_exp
    (83) writing_1 -> . CTESTRING np_add_print_quadruple_str
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    CTESTRING       shift and go to state 179
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 178
    writing_1                      shift and go to state 267
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 246

    (81) writing_1 -> CTESTRING np_add_print_quadruple_str COMMA . writing_1
    (80) writing_1 -> . expression np_add_print_quadruple_exp COMMA writing_1
    (81) writing_1 -> . CTESTRING np_add_print_quadruple_str COMMA writing_1
    (82) writing_1 -> . expression np_add_print_quadruple_exp
    (83) writing_1 -> . CTESTRING np_add_print_quadruple_str
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    CTESTRING       shift and go to state 179
    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    writing_1                      shift and go to state 268
    expression                     shift and go to state 178
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 247

    (84) reading -> READ LPAREN reading_1 RPAREN SEMI .

    ID              reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    IF              reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    PRINT           reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    READ            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    RETURN          reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    FOR             reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    WHILE           reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    MEAN            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    MEDIAN          reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    MODE            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    VARIANCE        reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    STDEV           reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    LPAREN          reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    LBRACKET        reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    PLUS            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    MINUS           reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    CTEI            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    CTEF            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    CTEC            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    TRUE            reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    FALSE           reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    RBRACE          reduce using rule 84 (reading -> READ LPAREN reading_1 RPAREN SEMI .)


state 248

    (85) reading_1 -> ID COMMA reading_1 .

    RPAREN          reduce using rule 85 (reading_1 -> ID COMMA reading_1 .)


state 249

    (86) reading_1 -> ID LBRACKET expression . RBRACKET COMMA reading_1
    (88) reading_1 -> ID LBRACKET expression . RBRACKET
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RBRACKET        shift and go to state 269
    AND             shift and go to state 102
    OR              shift and go to state 103


state 250

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS . np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (116) np_add_operator -> .

    LPAREN          reduce using rule 116 (np_add_operator -> .)
    LBRACKET        reduce using rule 116 (np_add_operator -> .)
    ID              reduce using rule 116 (np_add_operator -> .)
    PLUS            reduce using rule 116 (np_add_operator -> .)
    MINUS           reduce using rule 116 (np_add_operator -> .)
    CTEI            reduce using rule 116 (np_add_operator -> .)
    CTEF            reduce using rule 116 (np_add_operator -> .)
    CTEC            reduce using rule 116 (np_add_operator -> .)
    TRUE            reduce using rule 116 (np_add_operator -> .)
    FALSE           reduce using rule 116 (np_add_operator -> .)

    np_add_operator                shift and go to state 270

state 251

    (91) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN . np_while_expression DO block np_while_end_block
    (128) np_while_expression -> .

    DO              reduce using rule 128 (np_while_expression -> .)

    np_while_expression            shift and go to state 271

state 252

    (100) mean -> MEAN LPAREN expression RPAREN SEMI .

    ID              reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    LBRACKET        reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    CTEI            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    CTEF            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    CTEC            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    TRUE            reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    FALSE           reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 100 (mean -> MEAN LPAREN expression RPAREN SEMI .)


state 253

    (101) median -> MEDIAN LPAREN expression RPAREN SEMI .

    ID              reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    LBRACKET        reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    CTEI            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    CTEF            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    CTEC            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    TRUE            reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    FALSE           reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 101 (median -> MEDIAN LPAREN expression RPAREN SEMI .)


state 254

    (102) mode -> MODE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    LBRACKET        reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    CTEI            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    CTEF            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    CTEC            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    TRUE            reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    FALSE           reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 102 (mode -> MODE LPAREN expression RPAREN SEMI .)


state 255

    (103) variance -> VARIANCE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    LBRACKET        reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    CTEI            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    CTEF            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    CTEC            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    TRUE            reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    FALSE           reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 103 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)


state 256

    (104) standard_deviation -> STDEV LPAREN expression RPAREN SEMI .

    ID              reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    LBRACKET        reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    CTEI            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    CTEF            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    CTEC            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    TRUE            reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    FALSE           reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 104 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)


state 257

    (94) function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .

    TIMES           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    DIVIDE          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    PLUS            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    MINUS           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    LT              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    LE              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    GT              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    GE              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    EQ              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    NE              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    RBRACKET        reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    AND             reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    OR              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    ID              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    IF              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    PRINT           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    READ            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    RETURN          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    FOR             reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    WHILE           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    MEAN            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    MEDIAN          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    MODE            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    VARIANCE        reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    STDEV           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    LPAREN          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    LBRACKET        reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    CTEI            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    CTEF            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    CTEC            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    TRUE            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    FALSE           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    RBRACE          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    SEMI            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    RPAREN          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    COMMA           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    TO              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    BY              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)


state 258

    (95) function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN . SEMI
    (96) function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 272
    TIMES           reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    DIVIDE          reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    PLUS            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    MINUS           reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    LT              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    LE              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    GT              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    GE              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    EQ              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    NE              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    RBRACKET        reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    AND             reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    OR              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    ID              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    IF              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    PRINT           reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    READ            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    RETURN          reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    FOR             reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    WHILE           reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    MEAN            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    MEDIAN          reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    MODE            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    VARIANCE        reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    STDEV           reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    LPAREN          reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    LBRACKET        reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    CTEI            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    CTEF            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    CTEC            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    TRUE            reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    FALSE           reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    RBRACE          reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    RPAREN          reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    COMMA           reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    TO              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    BY              reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)

  ! SEMI            [ reduce using rule 96 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .) ]


state 259

    (99) function_call_1 -> expression np_function_call_add_param COMMA . function_call_1
    (98) function_call_1 -> . expression np_function_call_add_param
    (99) function_call_1 -> . expression np_function_call_add_param COMMA function_call_1
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 205
    function_call_1                shift and go to state 273
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 260

    (25) params -> ID COLON type np_add_vars np_add_params_type . COMMA params
    (26) params -> ID COLON type np_add_vars np_add_params_type .

    COMMA           shift and go to state 274
    RPAREN          reduce using rule 26 (params -> ID COLON type np_add_vars np_add_params_type .)


state 261

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 18 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 18 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function .)


state 262

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 17 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 17 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function .)


state 263

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block . np_end_function
    (138) np_end_function -> .

    FUNCTION        reduce using rule 138 (np_end_function -> .)
    MAIN            reduce using rule 138 (np_end_function -> .)

    np_end_function                shift and go to state 275

state 264

    (43) assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression . SEMI

    SEMI            shift and go to state 276


state 265

    (44) assignment -> ID LBRACKET expression RBRACKET EQUALS expression . SEMI
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    SEMI            shift and go to state 277
    AND             shift and go to state 102
    OR              shift and go to state 103


state 266

    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof block . np_condition_end_gotof
    (46) condition -> IF LPAREN expression RPAREN np_condition_gotof block . ELSE np_condition_goto_else block np_condition_end_gotof
    (125) np_condition_end_gotof -> .

    ELSE            shift and go to state 279
    ID              reduce using rule 125 (np_condition_end_gotof -> .)
    IF              reduce using rule 125 (np_condition_end_gotof -> .)
    PRINT           reduce using rule 125 (np_condition_end_gotof -> .)
    READ            reduce using rule 125 (np_condition_end_gotof -> .)
    RETURN          reduce using rule 125 (np_condition_end_gotof -> .)
    FOR             reduce using rule 125 (np_condition_end_gotof -> .)
    WHILE           reduce using rule 125 (np_condition_end_gotof -> .)
    MEAN            reduce using rule 125 (np_condition_end_gotof -> .)
    MEDIAN          reduce using rule 125 (np_condition_end_gotof -> .)
    MODE            reduce using rule 125 (np_condition_end_gotof -> .)
    VARIANCE        reduce using rule 125 (np_condition_end_gotof -> .)
    STDEV           reduce using rule 125 (np_condition_end_gotof -> .)
    LPAREN          reduce using rule 125 (np_condition_end_gotof -> .)
    LBRACKET        reduce using rule 125 (np_condition_end_gotof -> .)
    PLUS            reduce using rule 125 (np_condition_end_gotof -> .)
    MINUS           reduce using rule 125 (np_condition_end_gotof -> .)
    CTEI            reduce using rule 125 (np_condition_end_gotof -> .)
    CTEF            reduce using rule 125 (np_condition_end_gotof -> .)
    CTEC            reduce using rule 125 (np_condition_end_gotof -> .)
    TRUE            reduce using rule 125 (np_condition_end_gotof -> .)
    FALSE           reduce using rule 125 (np_condition_end_gotof -> .)
    RBRACE          reduce using rule 125 (np_condition_end_gotof -> .)

    np_condition_end_gotof         shift and go to state 278

state 267

    (80) writing_1 -> expression np_add_print_quadruple_exp COMMA writing_1 .

    RPAREN          reduce using rule 80 (writing_1 -> expression np_add_print_quadruple_exp COMMA writing_1 .)


state 268

    (81) writing_1 -> CTESTRING np_add_print_quadruple_str COMMA writing_1 .

    RPAREN          reduce using rule 81 (writing_1 -> CTESTRING np_add_print_quadruple_str COMMA writing_1 .)


state 269

    (86) reading_1 -> ID LBRACKET expression RBRACKET . COMMA reading_1
    (88) reading_1 -> ID LBRACKET expression RBRACKET .

    COMMA           shift and go to state 280
    RPAREN          reduce using rule 88 (reading_1 -> ID LBRACKET expression RBRACKET .)


state 270

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator . expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 281
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 271

    (91) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression . DO block np_while_end_block

    DO              shift and go to state 282


state 272

    (95) function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .

    TIMES           reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    DIVIDE          reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    PLUS            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    MINUS           reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    LT              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    LE              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    GT              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    GE              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    EQ              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    NE              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    RBRACKET        reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    AND             reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    OR              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    ID              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    IF              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    PRINT           reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    READ            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    RETURN          reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    FOR             reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    WHILE           reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    MEAN            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    MEDIAN          reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    MODE            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    VARIANCE        reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    STDEV           reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    LPAREN          reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    LBRACKET        reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    CTEI            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    CTEF            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    CTEC            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    TRUE            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    FALSE           reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    RBRACE          reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    SEMI            reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    RPAREN          reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    COMMA           reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    TO              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    BY              reduce using rule 95 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)


state 273

    (99) function_call_1 -> expression np_function_call_add_param COMMA function_call_1 .

    RPAREN          reduce using rule 99 (function_call_1 -> expression np_function_call_add_param COMMA function_call_1 .)


state 274

    (25) params -> ID COLON type np_add_vars np_add_params_type COMMA . params
    (25) params -> . ID COLON type np_add_vars np_add_params_type COMMA params
    (26) params -> . ID COLON type np_add_vars np_add_params_type

    ID              shift and go to state 125

    params                         shift and go to state 283

state 275

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 19 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 19 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function .)


state 276

    (43) assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .

    ID              reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    IF              reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    PRINT           reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    READ            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    RETURN          reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    FOR             reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    WHILE           reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    MEAN            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    MEDIAN          reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    MODE            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    VARIANCE        reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    STDEV           reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    LPAREN          reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    LBRACKET        reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    PLUS            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    MINUS           reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    CTEI            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    CTEF            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    CTEC            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    TRUE            reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    FALSE           reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)
    RBRACE          reduce using rule 43 (assignment -> ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression SEMI .)


state 277

    (44) assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .

    ID              reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    IF              reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    PRINT           reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    READ            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    RETURN          reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    FOR             reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    WHILE           reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    MEAN            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    MEDIAN          reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    MODE            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    VARIANCE        reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    STDEV           reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    LPAREN          reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    LBRACKET        reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    PLUS            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    MINUS           reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    CTEI            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    CTEF            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    CTEC            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    TRUE            reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    FALSE           reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)
    RBRACE          reduce using rule 44 (assignment -> ID LBRACKET expression RBRACKET EQUALS expression SEMI .)


state 278

    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .

    ID              reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    IF              reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    PRINT           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    READ            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    RETURN          reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    FOR             reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    WHILE           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    MEAN            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    MEDIAN          reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    MODE            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    VARIANCE        reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    STDEV           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    LPAREN          reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    LBRACKET        reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    PLUS            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    MINUS           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    CTEI            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    CTEF            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    CTEC            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    TRUE            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    FALSE           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    RBRACE          reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)


state 279

    (46) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE . np_condition_goto_else block np_condition_end_gotof
    (126) np_condition_goto_else -> .

    LBRACE          reduce using rule 126 (np_condition_goto_else -> .)

    np_condition_goto_else         shift and go to state 284

state 280

    (86) reading_1 -> ID LBRACKET expression RBRACKET COMMA . reading_1
    (85) reading_1 -> . ID COMMA reading_1
    (86) reading_1 -> . ID LBRACKET expression RBRACKET COMMA reading_1
    (87) reading_1 -> . ID
    (88) reading_1 -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 181

    reading_1                      shift and go to state 285

state 281

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression . np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression
    (130) np_assign_expression_for -> .

    AND             shift and go to state 102
    OR              shift and go to state 103
    TO              reduce using rule 130 (np_assign_expression_for -> .)

    np_assign_expression_for       shift and go to state 286

state 282

    (91) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO . block np_while_end_block
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 287

state 283

    (25) params -> ID COLON type np_add_vars np_add_params_type COMMA params .

    RPAREN          reduce using rule 25 (params -> ID COLON type np_add_vars np_add_params_type COMMA params .)


state 284

    (46) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else . block np_condition_end_gotof
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 288

state 285

    (86) reading_1 -> ID LBRACKET expression RBRACKET COMMA reading_1 .

    RPAREN          reduce using rule 86 (reading_1 -> ID LBRACKET expression RBRACKET COMMA reading_1 .)


state 286

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for . TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    TO              shift and go to state 289


state 287

    (91) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block . np_while_end_block
    (129) np_while_end_block -> .

    ID              reduce using rule 129 (np_while_end_block -> .)
    IF              reduce using rule 129 (np_while_end_block -> .)
    PRINT           reduce using rule 129 (np_while_end_block -> .)
    READ            reduce using rule 129 (np_while_end_block -> .)
    RETURN          reduce using rule 129 (np_while_end_block -> .)
    FOR             reduce using rule 129 (np_while_end_block -> .)
    WHILE           reduce using rule 129 (np_while_end_block -> .)
    MEAN            reduce using rule 129 (np_while_end_block -> .)
    MEDIAN          reduce using rule 129 (np_while_end_block -> .)
    MODE            reduce using rule 129 (np_while_end_block -> .)
    VARIANCE        reduce using rule 129 (np_while_end_block -> .)
    STDEV           reduce using rule 129 (np_while_end_block -> .)
    LPAREN          reduce using rule 129 (np_while_end_block -> .)
    LBRACKET        reduce using rule 129 (np_while_end_block -> .)
    PLUS            reduce using rule 129 (np_while_end_block -> .)
    MINUS           reduce using rule 129 (np_while_end_block -> .)
    CTEI            reduce using rule 129 (np_while_end_block -> .)
    CTEF            reduce using rule 129 (np_while_end_block -> .)
    CTEC            reduce using rule 129 (np_while_end_block -> .)
    TRUE            reduce using rule 129 (np_while_end_block -> .)
    FALSE           reduce using rule 129 (np_while_end_block -> .)
    RBRACE          reduce using rule 129 (np_while_end_block -> .)

    np_while_end_block             shift and go to state 290

state 288

    (46) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block . np_condition_end_gotof
    (125) np_condition_end_gotof -> .

    ID              reduce using rule 125 (np_condition_end_gotof -> .)
    IF              reduce using rule 125 (np_condition_end_gotof -> .)
    PRINT           reduce using rule 125 (np_condition_end_gotof -> .)
    READ            reduce using rule 125 (np_condition_end_gotof -> .)
    RETURN          reduce using rule 125 (np_condition_end_gotof -> .)
    FOR             reduce using rule 125 (np_condition_end_gotof -> .)
    WHILE           reduce using rule 125 (np_condition_end_gotof -> .)
    MEAN            reduce using rule 125 (np_condition_end_gotof -> .)
    MEDIAN          reduce using rule 125 (np_condition_end_gotof -> .)
    MODE            reduce using rule 125 (np_condition_end_gotof -> .)
    VARIANCE        reduce using rule 125 (np_condition_end_gotof -> .)
    STDEV           reduce using rule 125 (np_condition_end_gotof -> .)
    LPAREN          reduce using rule 125 (np_condition_end_gotof -> .)
    LBRACKET        reduce using rule 125 (np_condition_end_gotof -> .)
    PLUS            reduce using rule 125 (np_condition_end_gotof -> .)
    MINUS           reduce using rule 125 (np_condition_end_gotof -> .)
    CTEI            reduce using rule 125 (np_condition_end_gotof -> .)
    CTEF            reduce using rule 125 (np_condition_end_gotof -> .)
    CTEC            reduce using rule 125 (np_condition_end_gotof -> .)
    TRUE            reduce using rule 125 (np_condition_end_gotof -> .)
    FALSE           reduce using rule 125 (np_condition_end_gotof -> .)
    RBRACE          reduce using rule 125 (np_condition_end_gotof -> .)

    np_condition_end_gotof         shift and go to state 291

state 289

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO . expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 292
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 290

    (91) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .

    ID              reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    IF              reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    PRINT           reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    READ            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    RETURN          reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    FOR             reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    WHILE           reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    MEAN            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    MEDIAN          reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    MODE            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    VARIANCE        reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    STDEV           reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    LPAREN          reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    LBRACKET        reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    PLUS            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    MINUS           reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    CTEI            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    CTEF            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    CTEC            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    TRUE            reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    FALSE           reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    RBRACE          reduce using rule 91 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)


state 291

    (46) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .

    ID              reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    IF              reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    PRINT           reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    READ            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    RETURN          reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    FOR             reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    WHILE           reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    MEAN            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    MEDIAN          reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    MODE            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    VARIANCE        reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    STDEV           reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    LPAREN          reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    LBRACKET        reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    PLUS            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    MINUS           reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    CTEI            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    CTEF            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    CTEC            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    TRUE            reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    FALSE           reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    RBRACE          reduce using rule 46 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)


state 292

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression . np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression
    (131) np_non_conditional_limit -> .

    AND             shift and go to state 102
    OR              shift and go to state 103
    BY              reduce using rule 131 (np_non_conditional_limit -> .)

    np_non_conditional_limit       shift and go to state 293

state 293

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit . BY expression RPAREN block np_non_conditional_end

    BY              shift and go to state 294


state 294

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY . expression RPAREN block np_non_conditional_end
    (47) expression -> . exp
    (48) expression -> . expression1 np_add_quadruple_logical
    (49) expression -> . expression0 np_add_quadruple_or_and
    (58) exp -> . term np_add_quadruple_sum_min
    (59) exp -> . term np_add_quadruple_sum_min exp_1
    (52) expression1 -> . exp LT np_add_operator exp
    (53) expression1 -> . exp LE np_add_operator exp
    (54) expression1 -> . exp GT np_add_operator exp
    (55) expression1 -> . exp GE np_add_operator exp
    (56) expression1 -> . exp EQ np_add_operator exp
    (57) expression1 -> . exp NE np_add_operator exp
    (50) expression0 -> . expression AND np_add_operator expression
    (51) expression0 -> . expression OR np_add_operator expression
    (62) term -> . factor np_add_quadruple_times_div
    (63) term -> . factor np_add_quadruple_times_div term_2
    (66) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (67) factor -> . LBRACKET expression RBRACKET
    (68) factor -> . function_call
    (69) factor -> . factor_prima_1
    (94) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (95) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (96) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (97) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (70) factor_prima_1 -> . PLUS varcte
    (71) factor_prima_1 -> . MINUS varcte
    (72) factor_prima_1 -> . varcte
    (73) varcte -> . ID np_add_id_quad
    (74) varcte -> . CTEI np_add_cte_int
    (75) varcte -> . CTEF np_add_cte_float
    (76) varcte -> . CTEC np_add_cte_char
    (77) varcte -> . TRUE np_add_cte_bool
    (78) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 57
    LBRACKET        shift and go to state 50
    ID              shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 63
    CTEI            shift and go to state 64
    CTEF            shift and go to state 65
    CTEC            shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    expression                     shift and go to state 295
    exp                            shift and go to state 52
    expression1                    shift and go to state 53
    expression0                    shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    function_call                  shift and go to state 58
    factor_prima_1                 shift and go to state 59
    varcte                         shift and go to state 62

state 295

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression . RPAREN block np_non_conditional_end
    (50) expression0 -> expression . AND np_add_operator expression
    (51) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 296
    AND             shift and go to state 102
    OR              shift and go to state 103


state 296

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN . block np_non_conditional_end
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 297

state 297

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block . np_non_conditional_end
    (132) np_non_conditional_end -> .

    ID              reduce using rule 132 (np_non_conditional_end -> .)
    IF              reduce using rule 132 (np_non_conditional_end -> .)
    PRINT           reduce using rule 132 (np_non_conditional_end -> .)
    READ            reduce using rule 132 (np_non_conditional_end -> .)
    RETURN          reduce using rule 132 (np_non_conditional_end -> .)
    FOR             reduce using rule 132 (np_non_conditional_end -> .)
    WHILE           reduce using rule 132 (np_non_conditional_end -> .)
    MEAN            reduce using rule 132 (np_non_conditional_end -> .)
    MEDIAN          reduce using rule 132 (np_non_conditional_end -> .)
    MODE            reduce using rule 132 (np_non_conditional_end -> .)
    VARIANCE        reduce using rule 132 (np_non_conditional_end -> .)
    STDEV           reduce using rule 132 (np_non_conditional_end -> .)
    LPAREN          reduce using rule 132 (np_non_conditional_end -> .)
    LBRACKET        reduce using rule 132 (np_non_conditional_end -> .)
    PLUS            reduce using rule 132 (np_non_conditional_end -> .)
    MINUS           reduce using rule 132 (np_non_conditional_end -> .)
    CTEI            reduce using rule 132 (np_non_conditional_end -> .)
    CTEF            reduce using rule 132 (np_non_conditional_end -> .)
    CTEC            reduce using rule 132 (np_non_conditional_end -> .)
    TRUE            reduce using rule 132 (np_non_conditional_end -> .)
    FALSE           reduce using rule 132 (np_non_conditional_end -> .)
    RBRACE          reduce using rule 132 (np_non_conditional_end -> .)

    np_non_conditional_end         shift and go to state 298

state 298

    (92) non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .

    ID              reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    IF              reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    PRINT           reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    READ            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    RETURN          reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    FOR             reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    WHILE           reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    MEAN            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    MEDIAN          reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    MODE            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    VARIANCE        reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    STDEV           reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    LPAREN          reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    LBRACKET        reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    PLUS            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    MINUS           reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    CTEI            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    CTEF            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    CTEC            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    TRUE            reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    FALSE           reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    RBRACE          reduce using rule 92 (non_conditional_loop -> FOR LPAREN ID np_add_id_quad EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 72 resolved as shift
WARNING: shift/reduce conflict for READ in state 72 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 72 resolved as shift
WARNING: shift/reduce conflict for FOR in state 72 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 72 resolved as shift
WARNING: shift/reduce conflict for MEAN in state 72 resolved as shift
WARNING: shift/reduce conflict for MEDIAN in state 72 resolved as shift
WARNING: shift/reduce conflict for MODE in state 72 resolved as shift
WARNING: shift/reduce conflict for VARIANCE in state 72 resolved as shift
WARNING: shift/reduce conflict for STDEV in state 72 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 72 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 72 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 72 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 72 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 72 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 190 resolved as shift
WARNING: shift/reduce conflict for OR in state 190 resolved as shift
WARNING: shift/reduce conflict for AND in state 191 resolved as shift
WARNING: shift/reduce conflict for OR in state 191 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 233 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 258 resolved as shift
WARNING: reduce/reduce conflict in state 72 resolved using rule (factor -> function_call)
WARNING: rejected rule (epsilon -> <empty>) in state 72
