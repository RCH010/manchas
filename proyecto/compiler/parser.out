Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID np_create_global SEMI vars program_1 np_end_program
Rule 2     program -> PROGRAM ID np_create_global SEMI program_1 np_end_program
Rule 3     program_1 -> function program_1
Rule 4     program_1 -> main_block
Rule 5     vars -> vars_1
Rule 6     vars_1 -> LET vars_prima_1 vars_1
Rule 7     vars_1 -> LET vars_prima_1
Rule 8     vars_prima_1 -> ID COLON type np_add_vars SEMI
Rule 9     vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1
Rule 10    type -> INT type_1
Rule 11    type -> FLOAT type_1
Rule 12    type -> CHAR type_1
Rule 13    type -> BOOL type_1
Rule 14    type_1 -> LBRACKET CTEI RBRACKET
Rule 15    type_1 -> epsilon
Rule 16    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
Rule 17    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
Rule 18    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
Rule 19    function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
Rule 20    main_block -> MAIN np_create_main_scope LPAREN RPAREN block np_end_main
Rule 21    main_block -> MAIN np_create_main_scope LPAREN RPAREN vars block np_end_main
Rule 22    block -> LBRACE statements RBRACE
Rule 23    return_type -> VOID
Rule 24    return_type -> type
Rule 25    params -> ID COLON type np_add_vars np_add_params_type COMMA params
Rule 26    params -> ID COLON type np_add_vars np_add_params_type
Rule 27    statements -> void_function_call statements1
Rule 28    statements -> assignment statements1
Rule 29    statements -> condition statements1
Rule 30    statements -> writing statements1
Rule 31    statements -> reading statements1
Rule 32    statements -> repetition statements1
Rule 33    statements -> return statements1
Rule 34    statements -> special_functions statements1
Rule 35    special_functions -> mean
Rule 36    special_functions -> median
Rule 37    special_functions -> mode
Rule 38    special_functions -> variance
Rule 39    special_functions -> standard_deviation
Rule 40    statements1 -> statements
Rule 41    statements1 -> epsilon
Rule 42    assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
Rule 43    assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
Rule 44    condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
Rule 45    condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
Rule 46    expression -> exp
Rule 47    expression -> expression1 np_add_quadruple_logical
Rule 48    expression -> expression0 np_add_quadruple_or_and
Rule 49    expression0 -> expression AND np_add_operator expression
Rule 50    expression0 -> expression OR np_add_operator expression
Rule 51    expression1 -> exp LT np_add_operator exp
Rule 52    expression1 -> exp LE np_add_operator exp
Rule 53    expression1 -> exp GT np_add_operator exp
Rule 54    expression1 -> exp GE np_add_operator exp
Rule 55    expression1 -> exp EQ np_add_operator exp
Rule 56    expression1 -> exp NE np_add_operator exp
Rule 57    exp -> term np_add_quadruple_sum_min
Rule 58    exp -> term np_add_quadruple_sum_min exp_1
Rule 59    exp_1 -> PLUS np_add_operator exp
Rule 60    exp_1 -> MINUS np_add_operator exp
Rule 61    term -> factor np_add_quadruple_times_div
Rule 62    term -> factor np_add_quadruple_times_div term_2
Rule 63    term_2 -> TIMES np_add_operator term
Rule 64    term_2 -> DIVIDE np_add_operator term
Rule 65    factor -> LPAREN np_add_paren expression RPAREN np_pop_paren
Rule 66    factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
Rule 67    factor -> function_call
Rule 68    factor -> factor_prima_1
Rule 69    factor_prima_1 -> PLUS varcte
Rule 70    factor_prima_1 -> MINUS varcte
Rule 71    factor_prima_1 -> varcte
Rule 72    varcte -> ID np_add_id
Rule 73    varcte -> CTEI np_add_cte_int
Rule 74    varcte -> CTEF np_add_cte_float
Rule 75    varcte -> CTEC np_add_cte_char
Rule 76    varcte -> TRUE np_add_cte_bool
Rule 77    varcte -> FALSE np_add_cte_bool
Rule 78    writing -> PRINT LPAREN writing_1 RPAREN SEMI
Rule 79    writing_1 -> expression np_add_print_quadruple_exp COMMA writing_1
Rule 80    writing_1 -> CTESTRING np_add_print_quadruple_str COMMA writing_1
Rule 81    writing_1 -> expression np_add_print_quadruple_exp
Rule 82    writing_1 -> CTESTRING np_add_print_quadruple_str
Rule 83    reading -> READ LPAREN reading_1 RPAREN SEMI
Rule 84    reading_1 -> ID COMMA reading_1
Rule 85    reading_1 -> ID LBRACKET expression RBRACKET COMMA reading_1
Rule 86    reading_1 -> ID
Rule 87    reading_1 -> ID LBRACKET expression RBRACKET
Rule 88    repetition -> non_conditional_loop
Rule 89    repetition -> conditional_loop
Rule 90    conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
Rule 91    non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
Rule 92    return -> RETURN expression np_add_return_quadruple SEMI
Rule 93    function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN
Rule 94    function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
Rule 95    void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
Rule 96    void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
Rule 97    function_call_1 -> expression np_function_call_add_param
Rule 98    function_call_1 -> expression np_function_call_add_param COMMA function_call_1
Rule 99    mean -> MEAN LPAREN expression RPAREN SEMI
Rule 100   median -> MEDIAN LPAREN expression RPAREN SEMI
Rule 101   mode -> MODE LPAREN expression RPAREN SEMI
Rule 102   variance -> VARIANCE LPAREN expression RPAREN SEMI
Rule 103   standard_deviation -> STDEV LPAREN expression RPAREN SEMI
Rule 104   epsilon -> <empty>
Rule 105   np_create_global -> <empty>
Rule 106   np_create_main_scope -> <empty>
Rule 107   np_create_new_scope -> <empty>
Rule 108   np_add_satck_vars -> <empty>
Rule 109   np_add_vars -> <empty>
Rule 110   np_add_id -> <empty>
Rule 111   np_add_cte_int -> <empty>
Rule 112   np_add_cte_float -> <empty>
Rule 113   np_add_cte_char -> <empty>
Rule 114   np_add_cte_bool -> <empty>
Rule 115   np_add_operator -> <empty>
Rule 116   np_add_paren -> <empty>
Rule 117   np_pop_paren -> <empty>
Rule 118   np_add_quadruple_sum_min -> <empty>
Rule 119   np_add_quadruple_times_div -> <empty>
Rule 120   np_add_quadruple_logical -> <empty>
Rule 121   np_add_quadruple_or_and -> <empty>
Rule 122   np_assign_expression -> <empty>
Rule 123   np_condition_gotof -> <empty>
Rule 124   np_condition_end_gotof -> <empty>
Rule 125   np_condition_goto_else -> <empty>
Rule 126   np_while_init -> <empty>
Rule 127   np_while_expression -> <empty>
Rule 128   np_while_end_block -> <empty>
Rule 129   np_assign_expression_for -> <empty>
Rule 130   np_non_conditional_limit -> <empty>
Rule 131   np_non_conditional_end -> <empty>
Rule 132   np_add_print_quadruple_str -> <empty>
Rule 133   np_add_print_quadruple_exp -> <empty>
Rule 134   np_add_return_quadruple -> <empty>
Rule 135   np_add_params_type -> <empty>
Rule 136   np_set_func_start_point -> <empty>
Rule 137   np_end_function -> <empty>
Rule 138   np_end_main -> <empty>
Rule 139   np_end_program -> <empty>
Rule 140   np_check_function_call -> <empty>
Rule 141   np_function_call_add_param -> <empty>
Rule 142   np_function_end_params -> <empty>
Rule 143   np_check_is_array -> <empty>
Rule 144   np_verify_array_dim -> <empty>
Rule 145   np_get_array_address -> <empty>

Terminals, with rules where they appear

AND                  : 49
BOOL                 : 13
BY                   : 91
CHAR                 : 12
COLON                : 8 16 17 18 19 25 26
COMMA                : 9 25 79 80 84 85 98
CTEC                 : 75
CTEF                 : 74
CTEI                 : 14 73
CTESTRING            : 80 82
DIVIDE               : 64
DO                   : 90
ELSE                 : 45
EQ                   : 55
EQUALS               : 42 43 91
FALSE                : 77
FLOAT                : 11
FOR                  : 91
FUNCTION             : 16 17 18 19
GE                   : 54
GT                   : 53
ID                   : 1 2 8 9 16 17 18 19 25 26 42 43 66 72 84 85 86 87 91 93 94 95 96
IF                   : 44 45
INT                  : 10
LBRACE               : 22
LBRACKET             : 14 42 66 85 87
LE                   : 52
LET                  : 6 7
LPAREN               : 16 17 18 19 20 21 44 45 65 78 83 90 91 93 94 95 96 99 100 101 102 103
LT                   : 51
MAIN                 : 20 21
MEAN                 : 99
MEDIAN               : 100
MINUS                : 60 70
MODE                 : 101
NE                   : 56
OR                   : 50
PLUS                 : 59 69
PRINT                : 78
PROGRAM              : 1 2
RBRACE               : 22
RBRACKET             : 14 42 66 85 87
READ                 : 83
RETURN               : 92
RPAREN               : 16 17 18 19 20 21 44 45 65 78 83 90 91 93 94 95 96 99 100 101 102 103
SEMI                 : 1 2 8 42 43 78 83 92 95 96 99 100 101 102 103
STDEV                : 103
TIMES                : 63
TO                   : 91
TRUE                 : 76
VARIANCE             : 102
VOID                 : 23
WHILE                : 90
error                : 

Nonterminals, with rules where they appear

assignment           : 28
block                : 16 17 18 19 20 21 44 45 45 90 91
condition            : 29
conditional_loop     : 89
epsilon              : 15 41
exp                  : 46 51 51 52 52 53 53 54 54 55 55 56 56 59 60
exp_1                : 58
expression           : 42 42 43 44 45 49 49 50 50 65 66 79 81 85 87 90 91 91 91 92 97 98 99 100 101 102 103
expression0          : 48
expression1          : 47
factor               : 61 62
factor_prima_1       : 68
function             : 3
function_call        : 67
function_call_1      : 94 96 98
main_block           : 4
mean                 : 35
median               : 36
mode                 : 37
non_conditional_loop : 88
np_add_cte_bool      : 76 77
np_add_cte_char      : 75
np_add_cte_float     : 74
np_add_cte_int       : 73
np_add_id            : 42 43 72 91
np_add_operator      : 42 43 49 50 51 52 53 54 55 56 59 60 63 64 91
np_add_params_type   : 25 26
np_add_paren         : 65
np_add_print_quadruple_exp : 79 81
np_add_print_quadruple_str : 80 82
np_add_quadruple_logical : 47
np_add_quadruple_or_and : 48
np_add_quadruple_sum_min : 57 58
np_add_quadruple_times_div : 61 62
np_add_return_quadruple : 92
np_add_satck_vars    : 9
np_add_vars          : 8 25 26
np_assign_expression : 42 43
np_assign_expression_for : 91
np_check_function_call : 93 94 95 96
np_check_is_array    : 42 66
np_condition_end_gotof : 44 45
np_condition_goto_else : 45
np_condition_gotof   : 44 45
np_create_global     : 1 2
np_create_main_scope : 20 21
np_create_new_scope  : 16 17 18 19
np_end_function      : 16 17 18 19
np_end_main          : 20 21
np_end_program       : 1 2
np_function_call_add_param : 97 98
np_function_end_params : 93 94 95 96
np_get_array_address : 42 66
np_non_conditional_end : 91
np_non_conditional_limit : 91
np_pop_paren         : 65
np_set_func_start_point : 16 17 18 19
np_verify_array_dim  : 42 66
np_while_end_block   : 90
np_while_expression  : 90
np_while_init        : 90
params               : 17 19 25
program              : 0
program_1            : 1 2 3
reading              : 31
reading_1            : 83 84 85
repetition           : 32
return               : 33
return_type          : 16 17 18 19
special_functions    : 34
standard_deviation   : 39
statements           : 22 40
statements1          : 27 28 29 30 31 32 33 34
term                 : 57 58 63 64
term_2               : 62
type                 : 8 24 25 26
type_1               : 10 11 12 13
varcte               : 69 70 71
variance             : 38
vars                 : 1 18 19 21
vars_1               : 5 6
vars_prima_1         : 6 7 9
void_function_call   : 27
writing              : 30
writing_1            : 78 79 80

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID np_create_global SEMI vars program_1 np_end_program
    (2) program -> . PROGRAM ID np_create_global SEMI program_1 np_end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID np_create_global SEMI vars program_1 np_end_program
    (2) program -> PROGRAM . ID np_create_global SEMI program_1 np_end_program

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . np_create_global SEMI vars program_1 np_end_program
    (2) program -> PROGRAM ID . np_create_global SEMI program_1 np_end_program
    (105) np_create_global -> .

    SEMI            reduce using rule 105 (np_create_global -> .)

    np_create_global               shift and go to state 4

state 4

    (1) program -> PROGRAM ID np_create_global . SEMI vars program_1 np_end_program
    (2) program -> PROGRAM ID np_create_global . SEMI program_1 np_end_program

    SEMI            shift and go to state 5


state 5

    (1) program -> PROGRAM ID np_create_global SEMI . vars program_1 np_end_program
    (2) program -> PROGRAM ID np_create_global SEMI . program_1 np_end_program
    (5) vars -> . vars_1
    (3) program_1 -> . function program_1
    (4) program_1 -> . main_block
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1
    (16) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (20) main_block -> . MAIN np_create_main_scope LPAREN RPAREN block np_end_main
    (21) main_block -> . MAIN np_create_main_scope LPAREN RPAREN vars block np_end_main

    LET             shift and go to state 11
    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

    vars                           shift and go to state 6
    program_1                      shift and go to state 7
    vars_1                         shift and go to state 8
    function                       shift and go to state 9
    main_block                     shift and go to state 10

state 6

    (1) program -> PROGRAM ID np_create_global SEMI vars . program_1 np_end_program
    (3) program_1 -> . function program_1
    (4) program_1 -> . main_block
    (16) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (20) main_block -> . MAIN np_create_main_scope LPAREN RPAREN block np_end_main
    (21) main_block -> . MAIN np_create_main_scope LPAREN RPAREN vars block np_end_main

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

    program_1                      shift and go to state 14
    function                       shift and go to state 9
    main_block                     shift and go to state 10

state 7

    (2) program -> PROGRAM ID np_create_global SEMI program_1 . np_end_program
    (139) np_end_program -> .

    $end            reduce using rule 139 (np_end_program -> .)

    np_end_program                 shift and go to state 15

state 8

    (5) vars -> vars_1 .

    FUNCTION        reduce using rule 5 (vars -> vars_1 .)
    MAIN            reduce using rule 5 (vars -> vars_1 .)
    LBRACE          reduce using rule 5 (vars -> vars_1 .)


state 9

    (3) program_1 -> function . program_1
    (3) program_1 -> . function program_1
    (4) program_1 -> . main_block
    (16) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> . FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (20) main_block -> . MAIN np_create_main_scope LPAREN RPAREN block np_end_main
    (21) main_block -> . MAIN np_create_main_scope LPAREN RPAREN vars block np_end_main

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13

    function                       shift and go to state 9
    program_1                      shift and go to state 16
    main_block                     shift and go to state 10

state 10

    (4) program_1 -> main_block .

    $end            reduce using rule 4 (program_1 -> main_block .)


state 11

    (6) vars_1 -> LET . vars_prima_1 vars_1
    (7) vars_1 -> LET . vars_prima_1
    (8) vars_prima_1 -> . ID COLON type np_add_vars SEMI
    (9) vars_prima_1 -> . ID np_add_satck_vars COMMA vars_prima_1

    ID              shift and go to state 18

    vars_prima_1                   shift and go to state 17

state 12

    (16) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION . ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function

    ID              shift and go to state 19


state 13

    (20) main_block -> MAIN . np_create_main_scope LPAREN RPAREN block np_end_main
    (21) main_block -> MAIN . np_create_main_scope LPAREN RPAREN vars block np_end_main
    (106) np_create_main_scope -> .

    LPAREN          reduce using rule 106 (np_create_main_scope -> .)

    np_create_main_scope           shift and go to state 20

state 14

    (1) program -> PROGRAM ID np_create_global SEMI vars program_1 . np_end_program
    (139) np_end_program -> .

    $end            reduce using rule 139 (np_end_program -> .)

    np_end_program                 shift and go to state 21

state 15

    (2) program -> PROGRAM ID np_create_global SEMI program_1 np_end_program .

    $end            reduce using rule 2 (program -> PROGRAM ID np_create_global SEMI program_1 np_end_program .)


state 16

    (3) program_1 -> function program_1 .

    $end            reduce using rule 3 (program_1 -> function program_1 .)


state 17

    (6) vars_1 -> LET vars_prima_1 . vars_1
    (7) vars_1 -> LET vars_prima_1 .
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    FUNCTION        reduce using rule 7 (vars_1 -> LET vars_prima_1 .)
    MAIN            reduce using rule 7 (vars_1 -> LET vars_prima_1 .)
    LBRACE          reduce using rule 7 (vars_1 -> LET vars_prima_1 .)
    LET             shift and go to state 11

    vars_1                         shift and go to state 22

state 18

    (8) vars_prima_1 -> ID . COLON type np_add_vars SEMI
    (9) vars_prima_1 -> ID . np_add_satck_vars COMMA vars_prima_1
    (108) np_add_satck_vars -> .

    COLON           shift and go to state 23
    COMMA           reduce using rule 108 (np_add_satck_vars -> .)

    np_add_satck_vars              shift and go to state 24

state 19

    (16) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID . COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function

    COLON           shift and go to state 25


state 20

    (20) main_block -> MAIN np_create_main_scope . LPAREN RPAREN block np_end_main
    (21) main_block -> MAIN np_create_main_scope . LPAREN RPAREN vars block np_end_main

    LPAREN          shift and go to state 26


state 21

    (1) program -> PROGRAM ID np_create_global SEMI vars program_1 np_end_program .

    $end            reduce using rule 1 (program -> PROGRAM ID np_create_global SEMI vars program_1 np_end_program .)


state 22

    (6) vars_1 -> LET vars_prima_1 vars_1 .

    FUNCTION        reduce using rule 6 (vars_1 -> LET vars_prima_1 vars_1 .)
    MAIN            reduce using rule 6 (vars_1 -> LET vars_prima_1 vars_1 .)
    LBRACE          reduce using rule 6 (vars_1 -> LET vars_prima_1 vars_1 .)


state 23

    (8) vars_prima_1 -> ID COLON . type np_add_vars SEMI
    (10) type -> . INT type_1
    (11) type -> . FLOAT type_1
    (12) type -> . CHAR type_1
    (13) type -> . BOOL type_1

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    BOOL            shift and go to state 31

    type                           shift and go to state 27

state 24

    (9) vars_prima_1 -> ID np_add_satck_vars . COMMA vars_prima_1

    COMMA           shift and go to state 32


state 25

    (16) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON . return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (23) return_type -> . VOID
    (24) return_type -> . type
    (10) type -> . INT type_1
    (11) type -> . FLOAT type_1
    (12) type -> . CHAR type_1
    (13) type -> . BOOL type_1

    VOID            shift and go to state 34
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    BOOL            shift and go to state 31

    return_type                    shift and go to state 33
    type                           shift and go to state 35

state 26

    (20) main_block -> MAIN np_create_main_scope LPAREN . RPAREN block np_end_main
    (21) main_block -> MAIN np_create_main_scope LPAREN . RPAREN vars block np_end_main

    RPAREN          shift and go to state 36


state 27

    (8) vars_prima_1 -> ID COLON type . np_add_vars SEMI
    (109) np_add_vars -> .

    SEMI            reduce using rule 109 (np_add_vars -> .)

    np_add_vars                    shift and go to state 37

state 28

    (10) type -> INT . type_1
    (14) type_1 -> . LBRACKET CTEI RBRACKET
    (15) type_1 -> . epsilon
    (104) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 104 (epsilon -> .)
    LPAREN          reduce using rule 104 (epsilon -> .)
    COMMA           reduce using rule 104 (epsilon -> .)
    RPAREN          reduce using rule 104 (epsilon -> .)

    type_1                         shift and go to state 38
    epsilon                        shift and go to state 40

state 29

    (11) type -> FLOAT . type_1
    (14) type_1 -> . LBRACKET CTEI RBRACKET
    (15) type_1 -> . epsilon
    (104) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 104 (epsilon -> .)
    LPAREN          reduce using rule 104 (epsilon -> .)
    COMMA           reduce using rule 104 (epsilon -> .)
    RPAREN          reduce using rule 104 (epsilon -> .)

    type_1                         shift and go to state 41
    epsilon                        shift and go to state 40

state 30

    (12) type -> CHAR . type_1
    (14) type_1 -> . LBRACKET CTEI RBRACKET
    (15) type_1 -> . epsilon
    (104) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 104 (epsilon -> .)
    LPAREN          reduce using rule 104 (epsilon -> .)
    COMMA           reduce using rule 104 (epsilon -> .)
    RPAREN          reduce using rule 104 (epsilon -> .)

    type_1                         shift and go to state 42
    epsilon                        shift and go to state 40

state 31

    (13) type -> BOOL . type_1
    (14) type_1 -> . LBRACKET CTEI RBRACKET
    (15) type_1 -> . epsilon
    (104) epsilon -> .

    LBRACKET        shift and go to state 39
    SEMI            reduce using rule 104 (epsilon -> .)
    LPAREN          reduce using rule 104 (epsilon -> .)
    COMMA           reduce using rule 104 (epsilon -> .)
    RPAREN          reduce using rule 104 (epsilon -> .)

    type_1                         shift and go to state 43
    epsilon                        shift and go to state 40

state 32

    (9) vars_prima_1 -> ID np_add_satck_vars COMMA . vars_prima_1
    (8) vars_prima_1 -> . ID COLON type np_add_vars SEMI
    (9) vars_prima_1 -> . ID np_add_satck_vars COMMA vars_prima_1

    ID              shift and go to state 18

    vars_prima_1                   shift and go to state 44

state 33

    (16) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type . np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function
    (107) np_create_new_scope -> .

    LPAREN          reduce using rule 107 (np_create_new_scope -> .)

    np_create_new_scope            shift and go to state 45

state 34

    (23) return_type -> VOID .

    LPAREN          reduce using rule 23 (return_type -> VOID .)


state 35

    (24) return_type -> type .

    LPAREN          reduce using rule 24 (return_type -> type .)


state 36

    (20) main_block -> MAIN np_create_main_scope LPAREN RPAREN . block np_end_main
    (21) main_block -> MAIN np_create_main_scope LPAREN RPAREN . vars block np_end_main
    (22) block -> . LBRACE statements RBRACE
    (5) vars -> . vars_1
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    LBRACE          shift and go to state 48
    LET             shift and go to state 11

    block                          shift and go to state 46
    vars                           shift and go to state 47
    vars_1                         shift and go to state 8

state 37

    (8) vars_prima_1 -> ID COLON type np_add_vars . SEMI

    SEMI            shift and go to state 49


state 38

    (10) type -> INT type_1 .

    SEMI            reduce using rule 10 (type -> INT type_1 .)
    LPAREN          reduce using rule 10 (type -> INT type_1 .)
    COMMA           reduce using rule 10 (type -> INT type_1 .)
    RPAREN          reduce using rule 10 (type -> INT type_1 .)


state 39

    (14) type_1 -> LBRACKET . CTEI RBRACKET

    CTEI            shift and go to state 50


state 40

    (15) type_1 -> epsilon .

    SEMI            reduce using rule 15 (type_1 -> epsilon .)
    LPAREN          reduce using rule 15 (type_1 -> epsilon .)
    COMMA           reduce using rule 15 (type_1 -> epsilon .)
    RPAREN          reduce using rule 15 (type_1 -> epsilon .)


state 41

    (11) type -> FLOAT type_1 .

    SEMI            reduce using rule 11 (type -> FLOAT type_1 .)
    LPAREN          reduce using rule 11 (type -> FLOAT type_1 .)
    COMMA           reduce using rule 11 (type -> FLOAT type_1 .)
    RPAREN          reduce using rule 11 (type -> FLOAT type_1 .)


state 42

    (12) type -> CHAR type_1 .

    SEMI            reduce using rule 12 (type -> CHAR type_1 .)
    LPAREN          reduce using rule 12 (type -> CHAR type_1 .)
    COMMA           reduce using rule 12 (type -> CHAR type_1 .)
    RPAREN          reduce using rule 12 (type -> CHAR type_1 .)


state 43

    (13) type -> BOOL type_1 .

    SEMI            reduce using rule 13 (type -> BOOL type_1 .)
    LPAREN          reduce using rule 13 (type -> BOOL type_1 .)
    COMMA           reduce using rule 13 (type -> BOOL type_1 .)
    RPAREN          reduce using rule 13 (type -> BOOL type_1 .)


state 44

    (9) vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .

    LET             reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)
    FUNCTION        reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)
    MAIN            reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)
    LBRACE          reduce using rule 9 (vars_prima_1 -> ID np_add_satck_vars COMMA vars_prima_1 .)


state 45

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope . LPAREN params RPAREN vars np_set_func_start_point block np_end_function

    LPAREN          shift and go to state 51


state 46

    (20) main_block -> MAIN np_create_main_scope LPAREN RPAREN block . np_end_main
    (138) np_end_main -> .

    $end            reduce using rule 138 (np_end_main -> .)

    np_end_main                    shift and go to state 52

state 47

    (21) main_block -> MAIN np_create_main_scope LPAREN RPAREN vars . block np_end_main
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 53

state 48

    (22) block -> LBRACE . statements RBRACE
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    statements                     shift and go to state 54
    void_function_call             shift and go to state 55
    assignment                     shift and go to state 56
    condition                      shift and go to state 57
    writing                        shift and go to state 58
    reading                        shift and go to state 59
    repetition                     shift and go to state 60
    return                         shift and go to state 61
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 49

    (8) vars_prima_1 -> ID COLON type np_add_vars SEMI .

    LET             reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)
    FUNCTION        reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)
    MAIN            reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)
    LBRACE          reduce using rule 8 (vars_prima_1 -> ID COLON type np_add_vars SEMI .)


state 50

    (14) type_1 -> LBRACKET CTEI . RBRACKET

    RBRACKET        shift and go to state 82


state 51

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . RPAREN np_set_func_start_point block np_end_function
    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . params RPAREN np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . RPAREN vars np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN . params RPAREN vars np_set_func_start_point block np_end_function
    (25) params -> . ID COLON type np_add_vars np_add_params_type COMMA params
    (26) params -> . ID COLON type np_add_vars np_add_params_type

    RPAREN          shift and go to state 84
    ID              shift and go to state 83

    params                         shift and go to state 85

state 52

    (20) main_block -> MAIN np_create_main_scope LPAREN RPAREN block np_end_main .

    $end            reduce using rule 20 (main_block -> MAIN np_create_main_scope LPAREN RPAREN block np_end_main .)


state 53

    (21) main_block -> MAIN np_create_main_scope LPAREN RPAREN vars block . np_end_main
    (138) np_end_main -> .

    $end            reduce using rule 138 (np_end_main -> .)

    np_end_main                    shift and go to state 86

state 54

    (22) block -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 87


state 55

    (27) statements -> void_function_call . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    void_function_call             shift and go to state 55
    statements1                    shift and go to state 88
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    assignment                     shift and go to state 56
    condition                      shift and go to state 57
    writing                        shift and go to state 58
    reading                        shift and go to state 59
    repetition                     shift and go to state 60
    return                         shift and go to state 61
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 56

    (28) statements -> assignment . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    assignment                     shift and go to state 56
    statements1                    shift and go to state 91
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    void_function_call             shift and go to state 55
    condition                      shift and go to state 57
    writing                        shift and go to state 58
    reading                        shift and go to state 59
    repetition                     shift and go to state 60
    return                         shift and go to state 61
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 57

    (29) statements -> condition . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    condition                      shift and go to state 57
    statements1                    shift and go to state 92
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    void_function_call             shift and go to state 55
    assignment                     shift and go to state 56
    writing                        shift and go to state 58
    reading                        shift and go to state 59
    repetition                     shift and go to state 60
    return                         shift and go to state 61
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 58

    (30) statements -> writing . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    writing                        shift and go to state 58
    statements1                    shift and go to state 93
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    void_function_call             shift and go to state 55
    assignment                     shift and go to state 56
    condition                      shift and go to state 57
    reading                        shift and go to state 59
    repetition                     shift and go to state 60
    return                         shift and go to state 61
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 59

    (31) statements -> reading . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    reading                        shift and go to state 59
    statements1                    shift and go to state 94
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    void_function_call             shift and go to state 55
    assignment                     shift and go to state 56
    condition                      shift and go to state 57
    writing                        shift and go to state 58
    repetition                     shift and go to state 60
    return                         shift and go to state 61
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 60

    (32) statements -> repetition . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    repetition                     shift and go to state 60
    statements1                    shift and go to state 95
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    void_function_call             shift and go to state 55
    assignment                     shift and go to state 56
    condition                      shift and go to state 57
    writing                        shift and go to state 58
    reading                        shift and go to state 59
    return                         shift and go to state 61
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 61

    (33) statements -> return . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    return                         shift and go to state 61
    statements1                    shift and go to state 96
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    void_function_call             shift and go to state 55
    assignment                     shift and go to state 56
    condition                      shift and go to state 57
    writing                        shift and go to state 58
    reading                        shift and go to state 59
    repetition                     shift and go to state 60
    special_functions              shift and go to state 62
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 62

    (34) statements -> special_functions . statements1
    (40) statements1 -> . statements
    (41) statements1 -> . epsilon
    (27) statements -> . void_function_call statements1
    (28) statements -> . assignment statements1
    (29) statements -> . condition statements1
    (30) statements -> . writing statements1
    (31) statements -> . reading statements1
    (32) statements -> . repetition statements1
    (33) statements -> . return statements1
    (34) statements -> . special_functions statements1
    (104) epsilon -> .
    (95) void_function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> . ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> . ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (44) condition -> . IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> . IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (78) writing -> . PRINT LPAREN writing_1 RPAREN SEMI
    (83) reading -> . READ LPAREN reading_1 RPAREN SEMI
    (88) repetition -> . non_conditional_loop
    (89) repetition -> . conditional_loop
    (92) return -> . RETURN expression np_add_return_quadruple SEMI
    (35) special_functions -> . mean
    (36) special_functions -> . median
    (37) special_functions -> . mode
    (38) special_functions -> . variance
    (39) special_functions -> . standard_deviation
    (91) non_conditional_loop -> . FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (90) conditional_loop -> . WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (99) mean -> . MEAN LPAREN expression RPAREN SEMI
    (100) median -> . MEDIAN LPAREN expression RPAREN SEMI
    (101) mode -> . MODE LPAREN expression RPAREN SEMI
    (102) variance -> . VARIANCE LPAREN expression RPAREN SEMI
    (103) standard_deviation -> . STDEV LPAREN expression RPAREN SEMI

    RBRACE          reduce using rule 104 (epsilon -> .)
    ID              shift and go to state 63
    IF              shift and go to state 64
    PRINT           shift and go to state 65
    READ            shift and go to state 66
    RETURN          shift and go to state 69
    FOR             shift and go to state 75
    WHILE           shift and go to state 76
    MEAN            shift and go to state 77
    MEDIAN          shift and go to state 78
    MODE            shift and go to state 79
    VARIANCE        shift and go to state 80
    STDEV           shift and go to state 81

    special_functions              shift and go to state 62
    statements1                    shift and go to state 97
    statements                     shift and go to state 89
    epsilon                        shift and go to state 90
    void_function_call             shift and go to state 55
    assignment                     shift and go to state 56
    condition                      shift and go to state 57
    writing                        shift and go to state 58
    reading                        shift and go to state 59
    repetition                     shift and go to state 60
    return                         shift and go to state 61
    non_conditional_loop           shift and go to state 67
    conditional_loop               shift and go to state 68
    mean                           shift and go to state 70
    median                         shift and go to state 71
    mode                           shift and go to state 72
    variance                       shift and go to state 73
    standard_deviation             shift and go to state 74

state 63

    (95) void_function_call -> ID . LPAREN np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> ID . LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (42) assignment -> ID . np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> ID . np_add_id EQUALS np_add_operator expression np_assign_expression SEMI
    (110) np_add_id -> .

    LPAREN          shift and go to state 98
    LBRACKET        reduce using rule 110 (np_add_id -> .)
    EQUALS          reduce using rule 110 (np_add_id -> .)

    np_add_id                      shift and go to state 99

state 64

    (44) condition -> IF . LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> IF . LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof

    LPAREN          shift and go to state 100


state 65

    (78) writing -> PRINT . LPAREN writing_1 RPAREN SEMI

    LPAREN          shift and go to state 101


state 66

    (83) reading -> READ . LPAREN reading_1 RPAREN SEMI

    LPAREN          shift and go to state 102


state 67

    (88) repetition -> non_conditional_loop .

    ID              reduce using rule 88 (repetition -> non_conditional_loop .)
    IF              reduce using rule 88 (repetition -> non_conditional_loop .)
    PRINT           reduce using rule 88 (repetition -> non_conditional_loop .)
    READ            reduce using rule 88 (repetition -> non_conditional_loop .)
    RETURN          reduce using rule 88 (repetition -> non_conditional_loop .)
    FOR             reduce using rule 88 (repetition -> non_conditional_loop .)
    WHILE           reduce using rule 88 (repetition -> non_conditional_loop .)
    MEAN            reduce using rule 88 (repetition -> non_conditional_loop .)
    MEDIAN          reduce using rule 88 (repetition -> non_conditional_loop .)
    MODE            reduce using rule 88 (repetition -> non_conditional_loop .)
    VARIANCE        reduce using rule 88 (repetition -> non_conditional_loop .)
    STDEV           reduce using rule 88 (repetition -> non_conditional_loop .)
    RBRACE          reduce using rule 88 (repetition -> non_conditional_loop .)


state 68

    (89) repetition -> conditional_loop .

    ID              reduce using rule 89 (repetition -> conditional_loop .)
    IF              reduce using rule 89 (repetition -> conditional_loop .)
    PRINT           reduce using rule 89 (repetition -> conditional_loop .)
    READ            reduce using rule 89 (repetition -> conditional_loop .)
    RETURN          reduce using rule 89 (repetition -> conditional_loop .)
    FOR             reduce using rule 89 (repetition -> conditional_loop .)
    WHILE           reduce using rule 89 (repetition -> conditional_loop .)
    MEAN            reduce using rule 89 (repetition -> conditional_loop .)
    MEDIAN          reduce using rule 89 (repetition -> conditional_loop .)
    MODE            reduce using rule 89 (repetition -> conditional_loop .)
    VARIANCE        reduce using rule 89 (repetition -> conditional_loop .)
    STDEV           reduce using rule 89 (repetition -> conditional_loop .)
    RBRACE          reduce using rule 89 (repetition -> conditional_loop .)


state 69

    (92) return -> RETURN . expression np_add_return_quadruple SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 103
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 70

    (35) special_functions -> mean .

    ID              reduce using rule 35 (special_functions -> mean .)
    IF              reduce using rule 35 (special_functions -> mean .)
    PRINT           reduce using rule 35 (special_functions -> mean .)
    READ            reduce using rule 35 (special_functions -> mean .)
    RETURN          reduce using rule 35 (special_functions -> mean .)
    FOR             reduce using rule 35 (special_functions -> mean .)
    WHILE           reduce using rule 35 (special_functions -> mean .)
    MEAN            reduce using rule 35 (special_functions -> mean .)
    MEDIAN          reduce using rule 35 (special_functions -> mean .)
    MODE            reduce using rule 35 (special_functions -> mean .)
    VARIANCE        reduce using rule 35 (special_functions -> mean .)
    STDEV           reduce using rule 35 (special_functions -> mean .)
    RBRACE          reduce using rule 35 (special_functions -> mean .)


state 71

    (36) special_functions -> median .

    ID              reduce using rule 36 (special_functions -> median .)
    IF              reduce using rule 36 (special_functions -> median .)
    PRINT           reduce using rule 36 (special_functions -> median .)
    READ            reduce using rule 36 (special_functions -> median .)
    RETURN          reduce using rule 36 (special_functions -> median .)
    FOR             reduce using rule 36 (special_functions -> median .)
    WHILE           reduce using rule 36 (special_functions -> median .)
    MEAN            reduce using rule 36 (special_functions -> median .)
    MEDIAN          reduce using rule 36 (special_functions -> median .)
    MODE            reduce using rule 36 (special_functions -> median .)
    VARIANCE        reduce using rule 36 (special_functions -> median .)
    STDEV           reduce using rule 36 (special_functions -> median .)
    RBRACE          reduce using rule 36 (special_functions -> median .)


state 72

    (37) special_functions -> mode .

    ID              reduce using rule 37 (special_functions -> mode .)
    IF              reduce using rule 37 (special_functions -> mode .)
    PRINT           reduce using rule 37 (special_functions -> mode .)
    READ            reduce using rule 37 (special_functions -> mode .)
    RETURN          reduce using rule 37 (special_functions -> mode .)
    FOR             reduce using rule 37 (special_functions -> mode .)
    WHILE           reduce using rule 37 (special_functions -> mode .)
    MEAN            reduce using rule 37 (special_functions -> mode .)
    MEDIAN          reduce using rule 37 (special_functions -> mode .)
    MODE            reduce using rule 37 (special_functions -> mode .)
    VARIANCE        reduce using rule 37 (special_functions -> mode .)
    STDEV           reduce using rule 37 (special_functions -> mode .)
    RBRACE          reduce using rule 37 (special_functions -> mode .)


state 73

    (38) special_functions -> variance .

    ID              reduce using rule 38 (special_functions -> variance .)
    IF              reduce using rule 38 (special_functions -> variance .)
    PRINT           reduce using rule 38 (special_functions -> variance .)
    READ            reduce using rule 38 (special_functions -> variance .)
    RETURN          reduce using rule 38 (special_functions -> variance .)
    FOR             reduce using rule 38 (special_functions -> variance .)
    WHILE           reduce using rule 38 (special_functions -> variance .)
    MEAN            reduce using rule 38 (special_functions -> variance .)
    MEDIAN          reduce using rule 38 (special_functions -> variance .)
    MODE            reduce using rule 38 (special_functions -> variance .)
    VARIANCE        reduce using rule 38 (special_functions -> variance .)
    STDEV           reduce using rule 38 (special_functions -> variance .)
    RBRACE          reduce using rule 38 (special_functions -> variance .)


state 74

    (39) special_functions -> standard_deviation .

    ID              reduce using rule 39 (special_functions -> standard_deviation .)
    IF              reduce using rule 39 (special_functions -> standard_deviation .)
    PRINT           reduce using rule 39 (special_functions -> standard_deviation .)
    READ            reduce using rule 39 (special_functions -> standard_deviation .)
    RETURN          reduce using rule 39 (special_functions -> standard_deviation .)
    FOR             reduce using rule 39 (special_functions -> standard_deviation .)
    WHILE           reduce using rule 39 (special_functions -> standard_deviation .)
    MEAN            reduce using rule 39 (special_functions -> standard_deviation .)
    MEDIAN          reduce using rule 39 (special_functions -> standard_deviation .)
    MODE            reduce using rule 39 (special_functions -> standard_deviation .)
    VARIANCE        reduce using rule 39 (special_functions -> standard_deviation .)
    STDEV           reduce using rule 39 (special_functions -> standard_deviation .)
    RBRACE          reduce using rule 39 (special_functions -> standard_deviation .)


state 75

    (91) non_conditional_loop -> FOR . LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    LPAREN          shift and go to state 121


state 76

    (90) conditional_loop -> WHILE . np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block
    (126) np_while_init -> .

    LPAREN          reduce using rule 126 (np_while_init -> .)

    np_while_init                  shift and go to state 122

state 77

    (99) mean -> MEAN . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 123


state 78

    (100) median -> MEDIAN . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 124


state 79

    (101) mode -> MODE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 125


state 80

    (102) variance -> VARIANCE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 126


state 81

    (103) standard_deviation -> STDEV . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 127


state 82

    (14) type_1 -> LBRACKET CTEI RBRACKET .

    SEMI            reduce using rule 14 (type_1 -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 14 (type_1 -> LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 14 (type_1 -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 14 (type_1 -> LBRACKET CTEI RBRACKET .)


state 83

    (25) params -> ID . COLON type np_add_vars np_add_params_type COMMA params
    (26) params -> ID . COLON type np_add_vars np_add_params_type

    COLON           shift and go to state 128


state 84

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN . np_set_func_start_point block np_end_function
    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN . vars np_set_func_start_point block np_end_function
    (136) np_set_func_start_point -> .
    (5) vars -> . vars_1
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    LBRACE          reduce using rule 136 (np_set_func_start_point -> .)
    LET             shift and go to state 11

    np_set_func_start_point        shift and go to state 129
    vars                           shift and go to state 130
    vars_1                         shift and go to state 8

state 85

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params . RPAREN np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params . RPAREN vars np_set_func_start_point block np_end_function

    RPAREN          shift and go to state 131


state 86

    (21) main_block -> MAIN np_create_main_scope LPAREN RPAREN vars block np_end_main .

    $end            reduce using rule 21 (main_block -> MAIN np_create_main_scope LPAREN RPAREN vars block np_end_main .)


state 87

    (22) block -> LBRACE statements RBRACE .

    $end            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MAIN            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    ID              reduce using rule 22 (block -> LBRACE statements RBRACE .)
    IF              reduce using rule 22 (block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    READ            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 22 (block -> LBRACE statements RBRACE .)
    FOR             reduce using rule 22 (block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MEAN            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MEDIAN          reduce using rule 22 (block -> LBRACE statements RBRACE .)
    MODE            reduce using rule 22 (block -> LBRACE statements RBRACE .)
    VARIANCE        reduce using rule 22 (block -> LBRACE statements RBRACE .)
    STDEV           reduce using rule 22 (block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 22 (block -> LBRACE statements RBRACE .)


state 88

    (27) statements -> void_function_call statements1 .

    RBRACE          reduce using rule 27 (statements -> void_function_call statements1 .)


state 89

    (40) statements1 -> statements .

    RBRACE          reduce using rule 40 (statements1 -> statements .)


state 90

    (41) statements1 -> epsilon .

    RBRACE          reduce using rule 41 (statements1 -> epsilon .)


state 91

    (28) statements -> assignment statements1 .

    RBRACE          reduce using rule 28 (statements -> assignment statements1 .)


state 92

    (29) statements -> condition statements1 .

    RBRACE          reduce using rule 29 (statements -> condition statements1 .)


state 93

    (30) statements -> writing statements1 .

    RBRACE          reduce using rule 30 (statements -> writing statements1 .)


state 94

    (31) statements -> reading statements1 .

    RBRACE          reduce using rule 31 (statements -> reading statements1 .)


state 95

    (32) statements -> repetition statements1 .

    RBRACE          reduce using rule 32 (statements -> repetition statements1 .)


state 96

    (33) statements -> return statements1 .

    RBRACE          reduce using rule 33 (statements -> return statements1 .)


state 97

    (34) statements -> special_functions statements1 .

    RBRACE          reduce using rule 34 (statements -> special_functions statements1 .)


state 98

    (95) void_function_call -> ID LPAREN . np_check_function_call np_function_end_params RPAREN SEMI
    (96) void_function_call -> ID LPAREN . np_check_function_call function_call_1 np_function_end_params RPAREN SEMI
    (140) np_check_function_call -> .

    LPAREN          reduce using rule 140 (np_check_function_call -> .)
    ID              reduce using rule 140 (np_check_function_call -> .)
    PLUS            reduce using rule 140 (np_check_function_call -> .)
    MINUS           reduce using rule 140 (np_check_function_call -> .)
    CTEI            reduce using rule 140 (np_check_function_call -> .)
    CTEF            reduce using rule 140 (np_check_function_call -> .)
    CTEC            reduce using rule 140 (np_check_function_call -> .)
    TRUE            reduce using rule 140 (np_check_function_call -> .)
    FALSE           reduce using rule 140 (np_check_function_call -> .)
    RPAREN          reduce using rule 140 (np_check_function_call -> .)

    np_check_function_call         shift and go to state 132

state 99

    (42) assignment -> ID np_add_id . LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (43) assignment -> ID np_add_id . EQUALS np_add_operator expression np_assign_expression SEMI

    LBRACKET        shift and go to state 133
    EQUALS          shift and go to state 134


state 100

    (44) condition -> IF LPAREN . expression RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> IF LPAREN . expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 135
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 101

    (78) writing -> PRINT LPAREN . writing_1 RPAREN SEMI
    (79) writing_1 -> . expression np_add_print_quadruple_exp COMMA writing_1
    (80) writing_1 -> . CTESTRING np_add_print_quadruple_str COMMA writing_1
    (81) writing_1 -> . expression np_add_print_quadruple_exp
    (82) writing_1 -> . CTESTRING np_add_print_quadruple_str
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    CTESTRING       shift and go to state 138
    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    writing_1                      shift and go to state 136
    expression                     shift and go to state 137
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 102

    (83) reading -> READ LPAREN . reading_1 RPAREN SEMI
    (84) reading_1 -> . ID COMMA reading_1
    (85) reading_1 -> . ID LBRACKET expression RBRACKET COMMA reading_1
    (86) reading_1 -> . ID
    (87) reading_1 -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 140

    reading_1                      shift and go to state 139

state 103

    (92) return -> RETURN expression . np_add_return_quadruple SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (134) np_add_return_quadruple -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    SEMI            reduce using rule 134 (np_add_return_quadruple -> .)

    np_add_return_quadruple        shift and go to state 141

state 104

    (46) expression -> exp .
    (51) expression1 -> exp . LT np_add_operator exp
    (52) expression1 -> exp . LE np_add_operator exp
    (53) expression1 -> exp . GT np_add_operator exp
    (54) expression1 -> exp . GE np_add_operator exp
    (55) expression1 -> exp . EQ np_add_operator exp
    (56) expression1 -> exp . NE np_add_operator exp

    AND             reduce using rule 46 (expression -> exp .)
    OR              reduce using rule 46 (expression -> exp .)
    SEMI            reduce using rule 46 (expression -> exp .)
    RPAREN          reduce using rule 46 (expression -> exp .)
    COMMA           reduce using rule 46 (expression -> exp .)
    RBRACKET        reduce using rule 46 (expression -> exp .)
    TO              reduce using rule 46 (expression -> exp .)
    BY              reduce using rule 46 (expression -> exp .)
    LT              shift and go to state 144
    LE              shift and go to state 145
    GT              shift and go to state 146
    GE              shift and go to state 147
    EQ              shift and go to state 148
    NE              shift and go to state 149


state 105

    (47) expression -> expression1 . np_add_quadruple_logical
    (120) np_add_quadruple_logical -> .

    AND             reduce using rule 120 (np_add_quadruple_logical -> .)
    OR              reduce using rule 120 (np_add_quadruple_logical -> .)
    SEMI            reduce using rule 120 (np_add_quadruple_logical -> .)
    RPAREN          reduce using rule 120 (np_add_quadruple_logical -> .)
    COMMA           reduce using rule 120 (np_add_quadruple_logical -> .)
    RBRACKET        reduce using rule 120 (np_add_quadruple_logical -> .)
    TO              reduce using rule 120 (np_add_quadruple_logical -> .)
    BY              reduce using rule 120 (np_add_quadruple_logical -> .)

    np_add_quadruple_logical       shift and go to state 150

state 106

    (48) expression -> expression0 . np_add_quadruple_or_and
    (121) np_add_quadruple_or_and -> .

    AND             reduce using rule 121 (np_add_quadruple_or_and -> .)
    OR              reduce using rule 121 (np_add_quadruple_or_and -> .)
    SEMI            reduce using rule 121 (np_add_quadruple_or_and -> .)
    RPAREN          reduce using rule 121 (np_add_quadruple_or_and -> .)
    COMMA           reduce using rule 121 (np_add_quadruple_or_and -> .)
    RBRACKET        reduce using rule 121 (np_add_quadruple_or_and -> .)
    TO              reduce using rule 121 (np_add_quadruple_or_and -> .)
    BY              reduce using rule 121 (np_add_quadruple_or_and -> .)

    np_add_quadruple_or_and        shift and go to state 151

state 107

    (57) exp -> term . np_add_quadruple_sum_min
    (58) exp -> term . np_add_quadruple_sum_min exp_1
    (118) np_add_quadruple_sum_min -> .

    PLUS            reduce using rule 118 (np_add_quadruple_sum_min -> .)
    MINUS           reduce using rule 118 (np_add_quadruple_sum_min -> .)
    LT              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    LE              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    GT              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    GE              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    EQ              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    NE              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    AND             reduce using rule 118 (np_add_quadruple_sum_min -> .)
    OR              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    SEMI            reduce using rule 118 (np_add_quadruple_sum_min -> .)
    RPAREN          reduce using rule 118 (np_add_quadruple_sum_min -> .)
    COMMA           reduce using rule 118 (np_add_quadruple_sum_min -> .)
    RBRACKET        reduce using rule 118 (np_add_quadruple_sum_min -> .)
    TO              reduce using rule 118 (np_add_quadruple_sum_min -> .)
    BY              reduce using rule 118 (np_add_quadruple_sum_min -> .)

    np_add_quadruple_sum_min       shift and go to state 152

state 108

    (61) term -> factor . np_add_quadruple_times_div
    (62) term -> factor . np_add_quadruple_times_div term_2
    (119) np_add_quadruple_times_div -> .

    TIMES           reduce using rule 119 (np_add_quadruple_times_div -> .)
    DIVIDE          reduce using rule 119 (np_add_quadruple_times_div -> .)
    PLUS            reduce using rule 119 (np_add_quadruple_times_div -> .)
    MINUS           reduce using rule 119 (np_add_quadruple_times_div -> .)
    LT              reduce using rule 119 (np_add_quadruple_times_div -> .)
    LE              reduce using rule 119 (np_add_quadruple_times_div -> .)
    GT              reduce using rule 119 (np_add_quadruple_times_div -> .)
    GE              reduce using rule 119 (np_add_quadruple_times_div -> .)
    EQ              reduce using rule 119 (np_add_quadruple_times_div -> .)
    NE              reduce using rule 119 (np_add_quadruple_times_div -> .)
    AND             reduce using rule 119 (np_add_quadruple_times_div -> .)
    OR              reduce using rule 119 (np_add_quadruple_times_div -> .)
    SEMI            reduce using rule 119 (np_add_quadruple_times_div -> .)
    RPAREN          reduce using rule 119 (np_add_quadruple_times_div -> .)
    COMMA           reduce using rule 119 (np_add_quadruple_times_div -> .)
    RBRACKET        reduce using rule 119 (np_add_quadruple_times_div -> .)
    TO              reduce using rule 119 (np_add_quadruple_times_div -> .)
    BY              reduce using rule 119 (np_add_quadruple_times_div -> .)

    np_add_quadruple_times_div     shift and go to state 153

state 109

    (65) factor -> LPAREN . np_add_paren expression RPAREN np_pop_paren
    (116) np_add_paren -> .

    LPAREN          reduce using rule 116 (np_add_paren -> .)
    ID              reduce using rule 116 (np_add_paren -> .)
    PLUS            reduce using rule 116 (np_add_paren -> .)
    MINUS           reduce using rule 116 (np_add_paren -> .)
    CTEI            reduce using rule 116 (np_add_paren -> .)
    CTEF            reduce using rule 116 (np_add_paren -> .)
    CTEC            reduce using rule 116 (np_add_paren -> .)
    TRUE            reduce using rule 116 (np_add_paren -> .)
    FALSE           reduce using rule 116 (np_add_paren -> .)

    np_add_paren                   shift and go to state 154

state 110

    (66) factor -> ID . LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (93) function_call -> ID . LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> ID . LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (72) varcte -> ID . np_add_id
    (110) np_add_id -> .

    LBRACKET        shift and go to state 155
    LPAREN          shift and go to state 156
    TIMES           reduce using rule 110 (np_add_id -> .)
    DIVIDE          reduce using rule 110 (np_add_id -> .)
    PLUS            reduce using rule 110 (np_add_id -> .)
    MINUS           reduce using rule 110 (np_add_id -> .)
    LT              reduce using rule 110 (np_add_id -> .)
    LE              reduce using rule 110 (np_add_id -> .)
    GT              reduce using rule 110 (np_add_id -> .)
    GE              reduce using rule 110 (np_add_id -> .)
    EQ              reduce using rule 110 (np_add_id -> .)
    NE              reduce using rule 110 (np_add_id -> .)
    AND             reduce using rule 110 (np_add_id -> .)
    OR              reduce using rule 110 (np_add_id -> .)
    SEMI            reduce using rule 110 (np_add_id -> .)
    RPAREN          reduce using rule 110 (np_add_id -> .)
    COMMA           reduce using rule 110 (np_add_id -> .)
    RBRACKET        reduce using rule 110 (np_add_id -> .)
    TO              reduce using rule 110 (np_add_id -> .)
    BY              reduce using rule 110 (np_add_id -> .)

    np_add_id                      shift and go to state 157

state 111

    (67) factor -> function_call .

    TIMES           reduce using rule 67 (factor -> function_call .)
    DIVIDE          reduce using rule 67 (factor -> function_call .)
    PLUS            reduce using rule 67 (factor -> function_call .)
    MINUS           reduce using rule 67 (factor -> function_call .)
    LT              reduce using rule 67 (factor -> function_call .)
    LE              reduce using rule 67 (factor -> function_call .)
    GT              reduce using rule 67 (factor -> function_call .)
    GE              reduce using rule 67 (factor -> function_call .)
    EQ              reduce using rule 67 (factor -> function_call .)
    NE              reduce using rule 67 (factor -> function_call .)
    AND             reduce using rule 67 (factor -> function_call .)
    OR              reduce using rule 67 (factor -> function_call .)
    SEMI            reduce using rule 67 (factor -> function_call .)
    RPAREN          reduce using rule 67 (factor -> function_call .)
    COMMA           reduce using rule 67 (factor -> function_call .)
    RBRACKET        reduce using rule 67 (factor -> function_call .)
    TO              reduce using rule 67 (factor -> function_call .)
    BY              reduce using rule 67 (factor -> function_call .)


state 112

    (68) factor -> factor_prima_1 .

    TIMES           reduce using rule 68 (factor -> factor_prima_1 .)
    DIVIDE          reduce using rule 68 (factor -> factor_prima_1 .)
    PLUS            reduce using rule 68 (factor -> factor_prima_1 .)
    MINUS           reduce using rule 68 (factor -> factor_prima_1 .)
    LT              reduce using rule 68 (factor -> factor_prima_1 .)
    LE              reduce using rule 68 (factor -> factor_prima_1 .)
    GT              reduce using rule 68 (factor -> factor_prima_1 .)
    GE              reduce using rule 68 (factor -> factor_prima_1 .)
    EQ              reduce using rule 68 (factor -> factor_prima_1 .)
    NE              reduce using rule 68 (factor -> factor_prima_1 .)
    AND             reduce using rule 68 (factor -> factor_prima_1 .)
    OR              reduce using rule 68 (factor -> factor_prima_1 .)
    SEMI            reduce using rule 68 (factor -> factor_prima_1 .)
    RPAREN          reduce using rule 68 (factor -> factor_prima_1 .)
    COMMA           reduce using rule 68 (factor -> factor_prima_1 .)
    RBRACKET        reduce using rule 68 (factor -> factor_prima_1 .)
    TO              reduce using rule 68 (factor -> factor_prima_1 .)
    BY              reduce using rule 68 (factor -> factor_prima_1 .)


state 113

    (69) factor_prima_1 -> PLUS . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    ID              shift and go to state 159
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    varcte                         shift and go to state 158

state 114

    (71) factor_prima_1 -> varcte .

    TIMES           reduce using rule 71 (factor_prima_1 -> varcte .)
    DIVIDE          reduce using rule 71 (factor_prima_1 -> varcte .)
    PLUS            reduce using rule 71 (factor_prima_1 -> varcte .)
    MINUS           reduce using rule 71 (factor_prima_1 -> varcte .)
    LT              reduce using rule 71 (factor_prima_1 -> varcte .)
    LE              reduce using rule 71 (factor_prima_1 -> varcte .)
    GT              reduce using rule 71 (factor_prima_1 -> varcte .)
    GE              reduce using rule 71 (factor_prima_1 -> varcte .)
    EQ              reduce using rule 71 (factor_prima_1 -> varcte .)
    NE              reduce using rule 71 (factor_prima_1 -> varcte .)
    AND             reduce using rule 71 (factor_prima_1 -> varcte .)
    OR              reduce using rule 71 (factor_prima_1 -> varcte .)
    SEMI            reduce using rule 71 (factor_prima_1 -> varcte .)
    RPAREN          reduce using rule 71 (factor_prima_1 -> varcte .)
    COMMA           reduce using rule 71 (factor_prima_1 -> varcte .)
    RBRACKET        reduce using rule 71 (factor_prima_1 -> varcte .)
    TO              reduce using rule 71 (factor_prima_1 -> varcte .)
    BY              reduce using rule 71 (factor_prima_1 -> varcte .)


state 115

    (70) factor_prima_1 -> MINUS . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    ID              shift and go to state 159
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    varcte                         shift and go to state 160

state 116

    (73) varcte -> CTEI . np_add_cte_int
    (111) np_add_cte_int -> .

    TIMES           reduce using rule 111 (np_add_cte_int -> .)
    DIVIDE          reduce using rule 111 (np_add_cte_int -> .)
    PLUS            reduce using rule 111 (np_add_cte_int -> .)
    MINUS           reduce using rule 111 (np_add_cte_int -> .)
    LT              reduce using rule 111 (np_add_cte_int -> .)
    LE              reduce using rule 111 (np_add_cte_int -> .)
    GT              reduce using rule 111 (np_add_cte_int -> .)
    GE              reduce using rule 111 (np_add_cte_int -> .)
    EQ              reduce using rule 111 (np_add_cte_int -> .)
    NE              reduce using rule 111 (np_add_cte_int -> .)
    AND             reduce using rule 111 (np_add_cte_int -> .)
    OR              reduce using rule 111 (np_add_cte_int -> .)
    SEMI            reduce using rule 111 (np_add_cte_int -> .)
    RPAREN          reduce using rule 111 (np_add_cte_int -> .)
    COMMA           reduce using rule 111 (np_add_cte_int -> .)
    RBRACKET        reduce using rule 111 (np_add_cte_int -> .)
    TO              reduce using rule 111 (np_add_cte_int -> .)
    BY              reduce using rule 111 (np_add_cte_int -> .)

    np_add_cte_int                 shift and go to state 161

state 117

    (74) varcte -> CTEF . np_add_cte_float
    (112) np_add_cte_float -> .

    TIMES           reduce using rule 112 (np_add_cte_float -> .)
    DIVIDE          reduce using rule 112 (np_add_cte_float -> .)
    PLUS            reduce using rule 112 (np_add_cte_float -> .)
    MINUS           reduce using rule 112 (np_add_cte_float -> .)
    LT              reduce using rule 112 (np_add_cte_float -> .)
    LE              reduce using rule 112 (np_add_cte_float -> .)
    GT              reduce using rule 112 (np_add_cte_float -> .)
    GE              reduce using rule 112 (np_add_cte_float -> .)
    EQ              reduce using rule 112 (np_add_cte_float -> .)
    NE              reduce using rule 112 (np_add_cte_float -> .)
    AND             reduce using rule 112 (np_add_cte_float -> .)
    OR              reduce using rule 112 (np_add_cte_float -> .)
    SEMI            reduce using rule 112 (np_add_cte_float -> .)
    RPAREN          reduce using rule 112 (np_add_cte_float -> .)
    COMMA           reduce using rule 112 (np_add_cte_float -> .)
    RBRACKET        reduce using rule 112 (np_add_cte_float -> .)
    TO              reduce using rule 112 (np_add_cte_float -> .)
    BY              reduce using rule 112 (np_add_cte_float -> .)

    np_add_cte_float               shift and go to state 162

state 118

    (75) varcte -> CTEC . np_add_cte_char
    (113) np_add_cte_char -> .

    TIMES           reduce using rule 113 (np_add_cte_char -> .)
    DIVIDE          reduce using rule 113 (np_add_cte_char -> .)
    PLUS            reduce using rule 113 (np_add_cte_char -> .)
    MINUS           reduce using rule 113 (np_add_cte_char -> .)
    LT              reduce using rule 113 (np_add_cte_char -> .)
    LE              reduce using rule 113 (np_add_cte_char -> .)
    GT              reduce using rule 113 (np_add_cte_char -> .)
    GE              reduce using rule 113 (np_add_cte_char -> .)
    EQ              reduce using rule 113 (np_add_cte_char -> .)
    NE              reduce using rule 113 (np_add_cte_char -> .)
    AND             reduce using rule 113 (np_add_cte_char -> .)
    OR              reduce using rule 113 (np_add_cte_char -> .)
    SEMI            reduce using rule 113 (np_add_cte_char -> .)
    RPAREN          reduce using rule 113 (np_add_cte_char -> .)
    COMMA           reduce using rule 113 (np_add_cte_char -> .)
    RBRACKET        reduce using rule 113 (np_add_cte_char -> .)
    TO              reduce using rule 113 (np_add_cte_char -> .)
    BY              reduce using rule 113 (np_add_cte_char -> .)

    np_add_cte_char                shift and go to state 163

state 119

    (76) varcte -> TRUE . np_add_cte_bool
    (114) np_add_cte_bool -> .

    TIMES           reduce using rule 114 (np_add_cte_bool -> .)
    DIVIDE          reduce using rule 114 (np_add_cte_bool -> .)
    PLUS            reduce using rule 114 (np_add_cte_bool -> .)
    MINUS           reduce using rule 114 (np_add_cte_bool -> .)
    LT              reduce using rule 114 (np_add_cte_bool -> .)
    LE              reduce using rule 114 (np_add_cte_bool -> .)
    GT              reduce using rule 114 (np_add_cte_bool -> .)
    GE              reduce using rule 114 (np_add_cte_bool -> .)
    EQ              reduce using rule 114 (np_add_cte_bool -> .)
    NE              reduce using rule 114 (np_add_cte_bool -> .)
    AND             reduce using rule 114 (np_add_cte_bool -> .)
    OR              reduce using rule 114 (np_add_cte_bool -> .)
    SEMI            reduce using rule 114 (np_add_cte_bool -> .)
    RPAREN          reduce using rule 114 (np_add_cte_bool -> .)
    COMMA           reduce using rule 114 (np_add_cte_bool -> .)
    RBRACKET        reduce using rule 114 (np_add_cte_bool -> .)
    TO              reduce using rule 114 (np_add_cte_bool -> .)
    BY              reduce using rule 114 (np_add_cte_bool -> .)

    np_add_cte_bool                shift and go to state 164

state 120

    (77) varcte -> FALSE . np_add_cte_bool
    (114) np_add_cte_bool -> .

    TIMES           reduce using rule 114 (np_add_cte_bool -> .)
    DIVIDE          reduce using rule 114 (np_add_cte_bool -> .)
    PLUS            reduce using rule 114 (np_add_cte_bool -> .)
    MINUS           reduce using rule 114 (np_add_cte_bool -> .)
    LT              reduce using rule 114 (np_add_cte_bool -> .)
    LE              reduce using rule 114 (np_add_cte_bool -> .)
    GT              reduce using rule 114 (np_add_cte_bool -> .)
    GE              reduce using rule 114 (np_add_cte_bool -> .)
    EQ              reduce using rule 114 (np_add_cte_bool -> .)
    NE              reduce using rule 114 (np_add_cte_bool -> .)
    AND             reduce using rule 114 (np_add_cte_bool -> .)
    OR              reduce using rule 114 (np_add_cte_bool -> .)
    SEMI            reduce using rule 114 (np_add_cte_bool -> .)
    RPAREN          reduce using rule 114 (np_add_cte_bool -> .)
    COMMA           reduce using rule 114 (np_add_cte_bool -> .)
    RBRACKET        reduce using rule 114 (np_add_cte_bool -> .)
    TO              reduce using rule 114 (np_add_cte_bool -> .)
    BY              reduce using rule 114 (np_add_cte_bool -> .)

    np_add_cte_bool                shift and go to state 165

state 121

    (91) non_conditional_loop -> FOR LPAREN . ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    ID              shift and go to state 166


state 122

    (90) conditional_loop -> WHILE np_while_init . LPAREN expression RPAREN np_while_expression DO block np_while_end_block

    LPAREN          shift and go to state 167


state 123

    (99) mean -> MEAN LPAREN . expression RPAREN SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 168
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 124

    (100) median -> MEDIAN LPAREN . expression RPAREN SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 169
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 125

    (101) mode -> MODE LPAREN . expression RPAREN SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 170
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 126

    (102) variance -> VARIANCE LPAREN . expression RPAREN SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 171
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 127

    (103) standard_deviation -> STDEV LPAREN . expression RPAREN SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 172
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 128

    (25) params -> ID COLON . type np_add_vars np_add_params_type COMMA params
    (26) params -> ID COLON . type np_add_vars np_add_params_type
    (10) type -> . INT type_1
    (11) type -> . FLOAT type_1
    (12) type -> . CHAR type_1
    (13) type -> . BOOL type_1

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    BOOL            shift and go to state 31

    type                           shift and go to state 173

state 129

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 174

state 130

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars . np_set_func_start_point block np_end_function
    (136) np_set_func_start_point -> .

    LBRACE          reduce using rule 136 (np_set_func_start_point -> .)

    np_set_func_start_point        shift and go to state 175

state 131

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN . np_set_func_start_point block np_end_function
    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN . vars np_set_func_start_point block np_end_function
    (136) np_set_func_start_point -> .
    (5) vars -> . vars_1
    (6) vars_1 -> . LET vars_prima_1 vars_1
    (7) vars_1 -> . LET vars_prima_1

    LBRACE          reduce using rule 136 (np_set_func_start_point -> .)
    LET             shift and go to state 11

    np_set_func_start_point        shift and go to state 176
    vars                           shift and go to state 177
    vars_1                         shift and go to state 8

state 132

    (95) void_function_call -> ID LPAREN np_check_function_call . np_function_end_params RPAREN SEMI
    (96) void_function_call -> ID LPAREN np_check_function_call . function_call_1 np_function_end_params RPAREN SEMI
    (142) np_function_end_params -> .
    (97) function_call_1 -> . expression np_function_call_add_param
    (98) function_call_1 -> . expression np_function_call_add_param COMMA function_call_1
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    RPAREN          reduce using rule 142 (np_function_end_params -> .)
    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    np_function_end_params         shift and go to state 178
    function_call_1                shift and go to state 179
    expression                     shift and go to state 180
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 133

    (42) assignment -> ID np_add_id LBRACKET . np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (143) np_check_is_array -> .

    LPAREN          reduce using rule 143 (np_check_is_array -> .)
    ID              reduce using rule 143 (np_check_is_array -> .)
    PLUS            reduce using rule 143 (np_check_is_array -> .)
    MINUS           reduce using rule 143 (np_check_is_array -> .)
    CTEI            reduce using rule 143 (np_check_is_array -> .)
    CTEF            reduce using rule 143 (np_check_is_array -> .)
    CTEC            reduce using rule 143 (np_check_is_array -> .)
    TRUE            reduce using rule 143 (np_check_is_array -> .)
    FALSE           reduce using rule 143 (np_check_is_array -> .)

    np_check_is_array              shift and go to state 181

state 134

    (43) assignment -> ID np_add_id EQUALS . np_add_operator expression np_assign_expression SEMI
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 182

state 135

    (44) condition -> IF LPAREN expression . RPAREN np_condition_gotof block np_condition_end_gotof
    (45) condition -> IF LPAREN expression . RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 183
    AND             shift and go to state 142
    OR              shift and go to state 143


state 136

    (78) writing -> PRINT LPAREN writing_1 . RPAREN SEMI

    RPAREN          shift and go to state 184


state 137

    (79) writing_1 -> expression . np_add_print_quadruple_exp COMMA writing_1
    (81) writing_1 -> expression . np_add_print_quadruple_exp
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (133) np_add_print_quadruple_exp -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    COMMA           reduce using rule 133 (np_add_print_quadruple_exp -> .)
    RPAREN          reduce using rule 133 (np_add_print_quadruple_exp -> .)

    np_add_print_quadruple_exp     shift and go to state 185

state 138

    (80) writing_1 -> CTESTRING . np_add_print_quadruple_str COMMA writing_1
    (82) writing_1 -> CTESTRING . np_add_print_quadruple_str
    (132) np_add_print_quadruple_str -> .

    COMMA           reduce using rule 132 (np_add_print_quadruple_str -> .)
    RPAREN          reduce using rule 132 (np_add_print_quadruple_str -> .)

    np_add_print_quadruple_str     shift and go to state 186

state 139

    (83) reading -> READ LPAREN reading_1 . RPAREN SEMI

    RPAREN          shift and go to state 187


state 140

    (84) reading_1 -> ID . COMMA reading_1
    (85) reading_1 -> ID . LBRACKET expression RBRACKET COMMA reading_1
    (86) reading_1 -> ID .
    (87) reading_1 -> ID . LBRACKET expression RBRACKET

    COMMA           shift and go to state 188
    LBRACKET        shift and go to state 189
    RPAREN          reduce using rule 86 (reading_1 -> ID .)


state 141

    (92) return -> RETURN expression np_add_return_quadruple . SEMI

    SEMI            shift and go to state 190


state 142

    (49) expression0 -> expression AND . np_add_operator expression
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 191

state 143

    (50) expression0 -> expression OR . np_add_operator expression
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 192

state 144

    (51) expression1 -> exp LT . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 193

state 145

    (52) expression1 -> exp LE . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 194

state 146

    (53) expression1 -> exp GT . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 195

state 147

    (54) expression1 -> exp GE . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 196

state 148

    (55) expression1 -> exp EQ . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 197

state 149

    (56) expression1 -> exp NE . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 198

state 150

    (47) expression -> expression1 np_add_quadruple_logical .

    AND             reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)
    OR              reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)
    SEMI            reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)
    RPAREN          reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)
    COMMA           reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)
    RBRACKET        reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)
    TO              reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)
    BY              reduce using rule 47 (expression -> expression1 np_add_quadruple_logical .)


state 151

    (48) expression -> expression0 np_add_quadruple_or_and .

    AND             reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)
    OR              reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)
    SEMI            reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)
    RPAREN          reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)
    COMMA           reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)
    RBRACKET        reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)
    TO              reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)
    BY              reduce using rule 48 (expression -> expression0 np_add_quadruple_or_and .)


state 152

    (57) exp -> term np_add_quadruple_sum_min .
    (58) exp -> term np_add_quadruple_sum_min . exp_1
    (59) exp_1 -> . PLUS np_add_operator exp
    (60) exp_1 -> . MINUS np_add_operator exp

    LT              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    LE              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    GT              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    GE              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    EQ              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    NE              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    AND             reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    OR              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    SEMI            reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    RPAREN          reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    COMMA           reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    RBRACKET        reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    TO              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    BY              reduce using rule 57 (exp -> term np_add_quadruple_sum_min .)
    PLUS            shift and go to state 200
    MINUS           shift and go to state 201

    exp_1                          shift and go to state 199

state 153

    (61) term -> factor np_add_quadruple_times_div .
    (62) term -> factor np_add_quadruple_times_div . term_2
    (63) term_2 -> . TIMES np_add_operator term
    (64) term_2 -> . DIVIDE np_add_operator term

    PLUS            reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    MINUS           reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    LT              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    LE              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    GT              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    GE              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    EQ              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    NE              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    AND             reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    OR              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    SEMI            reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    RPAREN          reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    COMMA           reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    RBRACKET        reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    TO              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    BY              reduce using rule 61 (term -> factor np_add_quadruple_times_div .)
    TIMES           shift and go to state 203
    DIVIDE          shift and go to state 204

    term_2                         shift and go to state 202

state 154

    (65) factor -> LPAREN np_add_paren . expression RPAREN np_pop_paren
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 205
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 155

    (66) factor -> ID LBRACKET . np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (143) np_check_is_array -> .

    LPAREN          reduce using rule 143 (np_check_is_array -> .)
    ID              reduce using rule 143 (np_check_is_array -> .)
    PLUS            reduce using rule 143 (np_check_is_array -> .)
    MINUS           reduce using rule 143 (np_check_is_array -> .)
    CTEI            reduce using rule 143 (np_check_is_array -> .)
    CTEF            reduce using rule 143 (np_check_is_array -> .)
    CTEC            reduce using rule 143 (np_check_is_array -> .)
    TRUE            reduce using rule 143 (np_check_is_array -> .)
    FALSE           reduce using rule 143 (np_check_is_array -> .)

    np_check_is_array              shift and go to state 206

state 156

    (93) function_call -> ID LPAREN . np_check_function_call np_function_end_params RPAREN
    (94) function_call -> ID LPAREN . np_check_function_call function_call_1 np_function_end_params RPAREN
    (140) np_check_function_call -> .

    LPAREN          reduce using rule 140 (np_check_function_call -> .)
    ID              reduce using rule 140 (np_check_function_call -> .)
    PLUS            reduce using rule 140 (np_check_function_call -> .)
    MINUS           reduce using rule 140 (np_check_function_call -> .)
    CTEI            reduce using rule 140 (np_check_function_call -> .)
    CTEF            reduce using rule 140 (np_check_function_call -> .)
    CTEC            reduce using rule 140 (np_check_function_call -> .)
    TRUE            reduce using rule 140 (np_check_function_call -> .)
    FALSE           reduce using rule 140 (np_check_function_call -> .)
    RPAREN          reduce using rule 140 (np_check_function_call -> .)

    np_check_function_call         shift and go to state 207

state 157

    (72) varcte -> ID np_add_id .

    TIMES           reduce using rule 72 (varcte -> ID np_add_id .)
    DIVIDE          reduce using rule 72 (varcte -> ID np_add_id .)
    PLUS            reduce using rule 72 (varcte -> ID np_add_id .)
    MINUS           reduce using rule 72 (varcte -> ID np_add_id .)
    LT              reduce using rule 72 (varcte -> ID np_add_id .)
    LE              reduce using rule 72 (varcte -> ID np_add_id .)
    GT              reduce using rule 72 (varcte -> ID np_add_id .)
    GE              reduce using rule 72 (varcte -> ID np_add_id .)
    EQ              reduce using rule 72 (varcte -> ID np_add_id .)
    NE              reduce using rule 72 (varcte -> ID np_add_id .)
    AND             reduce using rule 72 (varcte -> ID np_add_id .)
    OR              reduce using rule 72 (varcte -> ID np_add_id .)
    SEMI            reduce using rule 72 (varcte -> ID np_add_id .)
    RPAREN          reduce using rule 72 (varcte -> ID np_add_id .)
    COMMA           reduce using rule 72 (varcte -> ID np_add_id .)
    RBRACKET        reduce using rule 72 (varcte -> ID np_add_id .)
    TO              reduce using rule 72 (varcte -> ID np_add_id .)
    BY              reduce using rule 72 (varcte -> ID np_add_id .)


state 158

    (69) factor_prima_1 -> PLUS varcte .

    TIMES           reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    DIVIDE          reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    PLUS            reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    MINUS           reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    LT              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    LE              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    GT              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    GE              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    EQ              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    NE              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    AND             reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    OR              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    SEMI            reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    RPAREN          reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    COMMA           reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    RBRACKET        reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    TO              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)
    BY              reduce using rule 69 (factor_prima_1 -> PLUS varcte .)


state 159

    (72) varcte -> ID . np_add_id
    (110) np_add_id -> .

    TIMES           reduce using rule 110 (np_add_id -> .)
    DIVIDE          reduce using rule 110 (np_add_id -> .)
    PLUS            reduce using rule 110 (np_add_id -> .)
    MINUS           reduce using rule 110 (np_add_id -> .)
    LT              reduce using rule 110 (np_add_id -> .)
    LE              reduce using rule 110 (np_add_id -> .)
    GT              reduce using rule 110 (np_add_id -> .)
    GE              reduce using rule 110 (np_add_id -> .)
    EQ              reduce using rule 110 (np_add_id -> .)
    NE              reduce using rule 110 (np_add_id -> .)
    AND             reduce using rule 110 (np_add_id -> .)
    OR              reduce using rule 110 (np_add_id -> .)
    SEMI            reduce using rule 110 (np_add_id -> .)
    RPAREN          reduce using rule 110 (np_add_id -> .)
    COMMA           reduce using rule 110 (np_add_id -> .)
    RBRACKET        reduce using rule 110 (np_add_id -> .)
    TO              reduce using rule 110 (np_add_id -> .)
    BY              reduce using rule 110 (np_add_id -> .)

    np_add_id                      shift and go to state 157

state 160

    (70) factor_prima_1 -> MINUS varcte .

    TIMES           reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    DIVIDE          reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    PLUS            reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    MINUS           reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    LT              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    LE              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    GT              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    GE              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    EQ              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    NE              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    AND             reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    OR              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    SEMI            reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    RPAREN          reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    COMMA           reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    RBRACKET        reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    TO              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)
    BY              reduce using rule 70 (factor_prima_1 -> MINUS varcte .)


state 161

    (73) varcte -> CTEI np_add_cte_int .

    TIMES           reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    DIVIDE          reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    PLUS            reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    MINUS           reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    LT              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    LE              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    GT              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    GE              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    EQ              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    NE              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    AND             reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    OR              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    SEMI            reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    RPAREN          reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    COMMA           reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    RBRACKET        reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    TO              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)
    BY              reduce using rule 73 (varcte -> CTEI np_add_cte_int .)


state 162

    (74) varcte -> CTEF np_add_cte_float .

    TIMES           reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    DIVIDE          reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    PLUS            reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    MINUS           reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    LT              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    LE              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    GT              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    GE              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    EQ              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    NE              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    AND             reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    OR              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    SEMI            reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    RPAREN          reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    COMMA           reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    RBRACKET        reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    TO              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)
    BY              reduce using rule 74 (varcte -> CTEF np_add_cte_float .)


state 163

    (75) varcte -> CTEC np_add_cte_char .

    TIMES           reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    DIVIDE          reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    PLUS            reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    MINUS           reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    LT              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    LE              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    GT              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    GE              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    EQ              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    NE              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    AND             reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    OR              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    SEMI            reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    RPAREN          reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    COMMA           reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    RBRACKET        reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    TO              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)
    BY              reduce using rule 75 (varcte -> CTEC np_add_cte_char .)


state 164

    (76) varcte -> TRUE np_add_cte_bool .

    TIMES           reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    DIVIDE          reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    PLUS            reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    MINUS           reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    LT              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    LE              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    GT              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    GE              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    EQ              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    NE              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    AND             reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    OR              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    SEMI            reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    RPAREN          reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    COMMA           reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    RBRACKET        reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    TO              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)
    BY              reduce using rule 76 (varcte -> TRUE np_add_cte_bool .)


state 165

    (77) varcte -> FALSE np_add_cte_bool .

    TIMES           reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    DIVIDE          reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    PLUS            reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    MINUS           reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    LT              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    LE              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    GT              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    GE              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    EQ              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    NE              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    AND             reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    OR              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    SEMI            reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    RPAREN          reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    COMMA           reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    RBRACKET        reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    TO              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)
    BY              reduce using rule 77 (varcte -> FALSE np_add_cte_bool .)


state 166

    (91) non_conditional_loop -> FOR LPAREN ID . np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (110) np_add_id -> .

    EQUALS          reduce using rule 110 (np_add_id -> .)

    np_add_id                      shift and go to state 208

state 167

    (90) conditional_loop -> WHILE np_while_init LPAREN . expression RPAREN np_while_expression DO block np_while_end_block
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 209
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 168

    (99) mean -> MEAN LPAREN expression . RPAREN SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 210
    AND             shift and go to state 142
    OR              shift and go to state 143


state 169

    (100) median -> MEDIAN LPAREN expression . RPAREN SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 211
    AND             shift and go to state 142
    OR              shift and go to state 143


state 170

    (101) mode -> MODE LPAREN expression . RPAREN SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 212
    AND             shift and go to state 142
    OR              shift and go to state 143


state 171

    (102) variance -> VARIANCE LPAREN expression . RPAREN SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 213
    AND             shift and go to state 142
    OR              shift and go to state 143


state 172

    (103) standard_deviation -> STDEV LPAREN expression . RPAREN SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 214
    AND             shift and go to state 142
    OR              shift and go to state 143


state 173

    (25) params -> ID COLON type . np_add_vars np_add_params_type COMMA params
    (26) params -> ID COLON type . np_add_vars np_add_params_type
    (109) np_add_vars -> .

    COMMA           reduce using rule 109 (np_add_vars -> .)
    RPAREN          reduce using rule 109 (np_add_vars -> .)

    np_add_vars                    shift and go to state 215

state 174

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block . np_end_function
    (137) np_end_function -> .

    FUNCTION        reduce using rule 137 (np_end_function -> .)
    MAIN            reduce using rule 137 (np_end_function -> .)

    np_end_function                shift and go to state 216

state 175

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 217

state 176

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 218

state 177

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars . np_set_func_start_point block np_end_function
    (136) np_set_func_start_point -> .

    LBRACE          reduce using rule 136 (np_set_func_start_point -> .)

    np_set_func_start_point        shift and go to state 219

state 178

    (95) void_function_call -> ID LPAREN np_check_function_call np_function_end_params . RPAREN SEMI

    RPAREN          shift and go to state 220


state 179

    (96) void_function_call -> ID LPAREN np_check_function_call function_call_1 . np_function_end_params RPAREN SEMI
    (142) np_function_end_params -> .

    RPAREN          reduce using rule 142 (np_function_end_params -> .)

    np_function_end_params         shift and go to state 221

state 180

    (97) function_call_1 -> expression . np_function_call_add_param
    (98) function_call_1 -> expression . np_function_call_add_param COMMA function_call_1
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (141) np_function_call_add_param -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    COMMA           reduce using rule 141 (np_function_call_add_param -> .)
    RPAREN          reduce using rule 141 (np_function_call_add_param -> .)

    np_function_call_add_param     shift and go to state 222

state 181

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array . expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 223
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 182

    (43) assignment -> ID np_add_id EQUALS np_add_operator . expression np_assign_expression SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 224
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 183

    (44) condition -> IF LPAREN expression RPAREN . np_condition_gotof block np_condition_end_gotof
    (45) condition -> IF LPAREN expression RPAREN . np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof
    (123) np_condition_gotof -> .

    LBRACE          reduce using rule 123 (np_condition_gotof -> .)

    np_condition_gotof             shift and go to state 225

state 184

    (78) writing -> PRINT LPAREN writing_1 RPAREN . SEMI

    SEMI            shift and go to state 226


state 185

    (79) writing_1 -> expression np_add_print_quadruple_exp . COMMA writing_1
    (81) writing_1 -> expression np_add_print_quadruple_exp .

    COMMA           shift and go to state 227
    RPAREN          reduce using rule 81 (writing_1 -> expression np_add_print_quadruple_exp .)


state 186

    (80) writing_1 -> CTESTRING np_add_print_quadruple_str . COMMA writing_1
    (82) writing_1 -> CTESTRING np_add_print_quadruple_str .

    COMMA           shift and go to state 228
    RPAREN          reduce using rule 82 (writing_1 -> CTESTRING np_add_print_quadruple_str .)


state 187

    (83) reading -> READ LPAREN reading_1 RPAREN . SEMI

    SEMI            shift and go to state 229


state 188

    (84) reading_1 -> ID COMMA . reading_1
    (84) reading_1 -> . ID COMMA reading_1
    (85) reading_1 -> . ID LBRACKET expression RBRACKET COMMA reading_1
    (86) reading_1 -> . ID
    (87) reading_1 -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 140

    reading_1                      shift and go to state 230

state 189

    (85) reading_1 -> ID LBRACKET . expression RBRACKET COMMA reading_1
    (87) reading_1 -> ID LBRACKET . expression RBRACKET
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 231
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 190

    (92) return -> RETURN expression np_add_return_quadruple SEMI .

    ID              reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    IF              reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    PRINT           reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    READ            reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    RETURN          reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    FOR             reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    WHILE           reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    MEAN            reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    MEDIAN          reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    MODE            reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    VARIANCE        reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    STDEV           reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)
    RBRACE          reduce using rule 92 (return -> RETURN expression np_add_return_quadruple SEMI .)


state 191

    (49) expression0 -> expression AND np_add_operator . expression
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 232
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 192

    (50) expression0 -> expression OR np_add_operator . expression
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 233
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 193

    (51) expression1 -> exp LT np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 234
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 194

    (52) expression1 -> exp LE np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 235
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 195

    (53) expression1 -> exp GT np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 236
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 196

    (54) expression1 -> exp GE np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 237
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 197

    (55) expression1 -> exp EQ np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 238
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 198

    (56) expression1 -> exp NE np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 239
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 199

    (58) exp -> term np_add_quadruple_sum_min exp_1 .

    LT              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    LE              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    GT              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    GE              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    EQ              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    NE              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    AND             reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    OR              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    SEMI            reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    RPAREN          reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    COMMA           reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    RBRACKET        reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    TO              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)
    BY              reduce using rule 58 (exp -> term np_add_quadruple_sum_min exp_1 .)


state 200

    (59) exp_1 -> PLUS . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 240

state 201

    (60) exp_1 -> MINUS . np_add_operator exp
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 241

state 202

    (62) term -> factor np_add_quadruple_times_div term_2 .

    PLUS            reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    MINUS           reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    LT              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    LE              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    GT              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    GE              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    EQ              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    NE              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    AND             reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    OR              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    SEMI            reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    RPAREN          reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    COMMA           reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    RBRACKET        reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    TO              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)
    BY              reduce using rule 62 (term -> factor np_add_quadruple_times_div term_2 .)


state 203

    (63) term_2 -> TIMES . np_add_operator term
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 242

state 204

    (64) term_2 -> DIVIDE . np_add_operator term
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 243

state 205

    (65) factor -> LPAREN np_add_paren expression . RPAREN np_pop_paren
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 244
    AND             shift and go to state 142
    OR              shift and go to state 143


state 206

    (66) factor -> ID LBRACKET np_check_is_array . expression np_verify_array_dim RBRACKET np_get_array_address
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 245
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 207

    (93) function_call -> ID LPAREN np_check_function_call . np_function_end_params RPAREN
    (94) function_call -> ID LPAREN np_check_function_call . function_call_1 np_function_end_params RPAREN
    (142) np_function_end_params -> .
    (97) function_call_1 -> . expression np_function_call_add_param
    (98) function_call_1 -> . expression np_function_call_add_param COMMA function_call_1
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    RPAREN          reduce using rule 142 (np_function_end_params -> .)
    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    np_function_end_params         shift and go to state 246
    function_call_1                shift and go to state 247
    expression                     shift and go to state 180
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 208

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id . EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    EQUALS          shift and go to state 248


state 209

    (90) conditional_loop -> WHILE np_while_init LPAREN expression . RPAREN np_while_expression DO block np_while_end_block
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 249
    AND             shift and go to state 142
    OR              shift and go to state 143


state 210

    (99) mean -> MEAN LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 250


state 211

    (100) median -> MEDIAN LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 251


state 212

    (101) mode -> MODE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 252


state 213

    (102) variance -> VARIANCE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 253


state 214

    (103) standard_deviation -> STDEV LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 254


state 215

    (25) params -> ID COLON type np_add_vars . np_add_params_type COMMA params
    (26) params -> ID COLON type np_add_vars . np_add_params_type
    (135) np_add_params_type -> .

    COMMA           reduce using rule 135 (np_add_params_type -> .)
    RPAREN          reduce using rule 135 (np_add_params_type -> .)

    np_add_params_type             shift and go to state 255

state 216

    (16) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 16 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 16 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN np_set_func_start_point block np_end_function .)


state 217

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block . np_end_function
    (137) np_end_function -> .

    FUNCTION        reduce using rule 137 (np_end_function -> .)
    MAIN            reduce using rule 137 (np_end_function -> .)

    np_end_function                shift and go to state 256

state 218

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block . np_end_function
    (137) np_end_function -> .

    FUNCTION        reduce using rule 137 (np_end_function -> .)
    MAIN            reduce using rule 137 (np_end_function -> .)

    np_end_function                shift and go to state 257

state 219

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point . block np_end_function
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 258

state 220

    (95) void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN . SEMI

    SEMI            shift and go to state 259


state 221

    (96) void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params . RPAREN SEMI

    RPAREN          shift and go to state 260


state 222

    (97) function_call_1 -> expression np_function_call_add_param .
    (98) function_call_1 -> expression np_function_call_add_param . COMMA function_call_1

    RPAREN          reduce using rule 97 (function_call_1 -> expression np_function_call_add_param .)
    COMMA           shift and go to state 261


state 223

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression . np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (144) np_verify_array_dim -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    RBRACKET        reduce using rule 144 (np_verify_array_dim -> .)

    np_verify_array_dim            shift and go to state 262

state 224

    (43) assignment -> ID np_add_id EQUALS np_add_operator expression . np_assign_expression SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (122) np_assign_expression -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    SEMI            reduce using rule 122 (np_assign_expression -> .)

    np_assign_expression           shift and go to state 263

state 225

    (44) condition -> IF LPAREN expression RPAREN np_condition_gotof . block np_condition_end_gotof
    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof . block ELSE np_condition_goto_else block np_condition_end_gotof
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 264

state 226

    (78) writing -> PRINT LPAREN writing_1 RPAREN SEMI .

    ID              reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    IF              reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    PRINT           reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    READ            reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    RETURN          reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    FOR             reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    WHILE           reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    MEAN            reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    MEDIAN          reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    MODE            reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    VARIANCE        reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    STDEV           reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)
    RBRACE          reduce using rule 78 (writing -> PRINT LPAREN writing_1 RPAREN SEMI .)


state 227

    (79) writing_1 -> expression np_add_print_quadruple_exp COMMA . writing_1
    (79) writing_1 -> . expression np_add_print_quadruple_exp COMMA writing_1
    (80) writing_1 -> . CTESTRING np_add_print_quadruple_str COMMA writing_1
    (81) writing_1 -> . expression np_add_print_quadruple_exp
    (82) writing_1 -> . CTESTRING np_add_print_quadruple_str
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    CTESTRING       shift and go to state 138
    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 137
    writing_1                      shift and go to state 265
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 228

    (80) writing_1 -> CTESTRING np_add_print_quadruple_str COMMA . writing_1
    (79) writing_1 -> . expression np_add_print_quadruple_exp COMMA writing_1
    (80) writing_1 -> . CTESTRING np_add_print_quadruple_str COMMA writing_1
    (81) writing_1 -> . expression np_add_print_quadruple_exp
    (82) writing_1 -> . CTESTRING np_add_print_quadruple_str
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    CTESTRING       shift and go to state 138
    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    writing_1                      shift and go to state 266
    expression                     shift and go to state 137
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 229

    (83) reading -> READ LPAREN reading_1 RPAREN SEMI .

    ID              reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    IF              reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    PRINT           reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    READ            reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    RETURN          reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    FOR             reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    WHILE           reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    MEAN            reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    MEDIAN          reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    MODE            reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    VARIANCE        reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    STDEV           reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)
    RBRACE          reduce using rule 83 (reading -> READ LPAREN reading_1 RPAREN SEMI .)


state 230

    (84) reading_1 -> ID COMMA reading_1 .

    RPAREN          reduce using rule 84 (reading_1 -> ID COMMA reading_1 .)


state 231

    (85) reading_1 -> ID LBRACKET expression . RBRACKET COMMA reading_1
    (87) reading_1 -> ID LBRACKET expression . RBRACKET
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RBRACKET        shift and go to state 267
    AND             shift and go to state 142
    OR              shift and go to state 143


state 232

    (49) expression0 -> expression AND np_add_operator expression .
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 49 (expression0 -> expression AND np_add_operator expression .)
    RPAREN          reduce using rule 49 (expression0 -> expression AND np_add_operator expression .)
    COMMA           reduce using rule 49 (expression0 -> expression AND np_add_operator expression .)
    RBRACKET        reduce using rule 49 (expression0 -> expression AND np_add_operator expression .)
    TO              reduce using rule 49 (expression0 -> expression AND np_add_operator expression .)
    BY              reduce using rule 49 (expression0 -> expression AND np_add_operator expression .)
    AND             shift and go to state 142
    OR              shift and go to state 143

  ! AND             [ reduce using rule 49 (expression0 -> expression AND np_add_operator expression .) ]
  ! OR              [ reduce using rule 49 (expression0 -> expression AND np_add_operator expression .) ]


state 233

    (50) expression0 -> expression OR np_add_operator expression .
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 50 (expression0 -> expression OR np_add_operator expression .)
    RPAREN          reduce using rule 50 (expression0 -> expression OR np_add_operator expression .)
    COMMA           reduce using rule 50 (expression0 -> expression OR np_add_operator expression .)
    RBRACKET        reduce using rule 50 (expression0 -> expression OR np_add_operator expression .)
    TO              reduce using rule 50 (expression0 -> expression OR np_add_operator expression .)
    BY              reduce using rule 50 (expression0 -> expression OR np_add_operator expression .)
    AND             shift and go to state 142
    OR              shift and go to state 143

  ! AND             [ reduce using rule 50 (expression0 -> expression OR np_add_operator expression .) ]
  ! OR              [ reduce using rule 50 (expression0 -> expression OR np_add_operator expression .) ]


state 234

    (51) expression1 -> exp LT np_add_operator exp .

    AND             reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)
    OR              reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)
    SEMI            reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)
    RPAREN          reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)
    COMMA           reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)
    RBRACKET        reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)
    TO              reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)
    BY              reduce using rule 51 (expression1 -> exp LT np_add_operator exp .)


state 235

    (52) expression1 -> exp LE np_add_operator exp .

    AND             reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)
    OR              reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)
    SEMI            reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)
    RPAREN          reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)
    COMMA           reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)
    RBRACKET        reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)
    TO              reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)
    BY              reduce using rule 52 (expression1 -> exp LE np_add_operator exp .)


state 236

    (53) expression1 -> exp GT np_add_operator exp .

    AND             reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)
    OR              reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)
    SEMI            reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)
    RPAREN          reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)
    COMMA           reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)
    RBRACKET        reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)
    TO              reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)
    BY              reduce using rule 53 (expression1 -> exp GT np_add_operator exp .)


state 237

    (54) expression1 -> exp GE np_add_operator exp .

    AND             reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)
    OR              reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)
    SEMI            reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)
    RPAREN          reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)
    COMMA           reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)
    RBRACKET        reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)
    TO              reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)
    BY              reduce using rule 54 (expression1 -> exp GE np_add_operator exp .)


state 238

    (55) expression1 -> exp EQ np_add_operator exp .

    AND             reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)
    OR              reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)
    SEMI            reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)
    RPAREN          reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)
    COMMA           reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)
    RBRACKET        reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)
    TO              reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)
    BY              reduce using rule 55 (expression1 -> exp EQ np_add_operator exp .)


state 239

    (56) expression1 -> exp NE np_add_operator exp .

    AND             reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)
    OR              reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)
    SEMI            reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)
    RPAREN          reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)
    COMMA           reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)
    RBRACKET        reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)
    TO              reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)
    BY              reduce using rule 56 (expression1 -> exp NE np_add_operator exp .)


state 240

    (59) exp_1 -> PLUS np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 268
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 241

    (60) exp_1 -> MINUS np_add_operator . exp
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    exp                            shift and go to state 269
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 242

    (63) term_2 -> TIMES np_add_operator . term
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    term                           shift and go to state 270
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 243

    (64) term_2 -> DIVIDE np_add_operator . term
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    term                           shift and go to state 271
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 244

    (65) factor -> LPAREN np_add_paren expression RPAREN . np_pop_paren
    (117) np_pop_paren -> .

    TIMES           reduce using rule 117 (np_pop_paren -> .)
    DIVIDE          reduce using rule 117 (np_pop_paren -> .)
    PLUS            reduce using rule 117 (np_pop_paren -> .)
    MINUS           reduce using rule 117 (np_pop_paren -> .)
    LT              reduce using rule 117 (np_pop_paren -> .)
    LE              reduce using rule 117 (np_pop_paren -> .)
    GT              reduce using rule 117 (np_pop_paren -> .)
    GE              reduce using rule 117 (np_pop_paren -> .)
    EQ              reduce using rule 117 (np_pop_paren -> .)
    NE              reduce using rule 117 (np_pop_paren -> .)
    AND             reduce using rule 117 (np_pop_paren -> .)
    OR              reduce using rule 117 (np_pop_paren -> .)
    SEMI            reduce using rule 117 (np_pop_paren -> .)
    RPAREN          reduce using rule 117 (np_pop_paren -> .)
    COMMA           reduce using rule 117 (np_pop_paren -> .)
    RBRACKET        reduce using rule 117 (np_pop_paren -> .)
    TO              reduce using rule 117 (np_pop_paren -> .)
    BY              reduce using rule 117 (np_pop_paren -> .)

    np_pop_paren                   shift and go to state 272

state 245

    (66) factor -> ID LBRACKET np_check_is_array expression . np_verify_array_dim RBRACKET np_get_array_address
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (144) np_verify_array_dim -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    RBRACKET        reduce using rule 144 (np_verify_array_dim -> .)

    np_verify_array_dim            shift and go to state 273

state 246

    (93) function_call -> ID LPAREN np_check_function_call np_function_end_params . RPAREN

    RPAREN          shift and go to state 274


state 247

    (94) function_call -> ID LPAREN np_check_function_call function_call_1 . np_function_end_params RPAREN
    (142) np_function_end_params -> .

    RPAREN          reduce using rule 142 (np_function_end_params -> .)

    np_function_end_params         shift and go to state 275

state 248

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS . np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 276

state 249

    (90) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN . np_while_expression DO block np_while_end_block
    (127) np_while_expression -> .

    DO              reduce using rule 127 (np_while_expression -> .)

    np_while_expression            shift and go to state 277

state 250

    (99) mean -> MEAN LPAREN expression RPAREN SEMI .

    ID              reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 99 (mean -> MEAN LPAREN expression RPAREN SEMI .)


state 251

    (100) median -> MEDIAN LPAREN expression RPAREN SEMI .

    ID              reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 100 (median -> MEDIAN LPAREN expression RPAREN SEMI .)


state 252

    (101) mode -> MODE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 101 (mode -> MODE LPAREN expression RPAREN SEMI .)


state 253

    (102) variance -> VARIANCE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 102 (variance -> VARIANCE LPAREN expression RPAREN SEMI .)


state 254

    (103) standard_deviation -> STDEV LPAREN expression RPAREN SEMI .

    ID              reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    MEAN            reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    MEDIAN          reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    MODE            reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    VARIANCE        reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    STDEV           reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 103 (standard_deviation -> STDEV LPAREN expression RPAREN SEMI .)


state 255

    (25) params -> ID COLON type np_add_vars np_add_params_type . COMMA params
    (26) params -> ID COLON type np_add_vars np_add_params_type .

    COMMA           shift and go to state 278
    RPAREN          reduce using rule 26 (params -> ID COLON type np_add_vars np_add_params_type .)


state 256

    (18) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 18 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 18 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN RPAREN vars np_set_func_start_point block np_end_function .)


state 257

    (17) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 17 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 17 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN np_set_func_start_point block np_end_function .)


state 258

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block . np_end_function
    (137) np_end_function -> .

    FUNCTION        reduce using rule 137 (np_end_function -> .)
    MAIN            reduce using rule 137 (np_end_function -> .)

    np_end_function                shift and go to state 279

state 259

    (95) void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .

    ID              reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    IF              reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    PRINT           reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    READ            reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    RETURN          reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    FOR             reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    WHILE           reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    MEAN            reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    MEDIAN          reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    MODE            reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    VARIANCE        reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    STDEV           reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)
    RBRACE          reduce using rule 95 (void_function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN SEMI .)


state 260

    (96) void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN . SEMI

    SEMI            shift and go to state 280


state 261

    (98) function_call_1 -> expression np_function_call_add_param COMMA . function_call_1
    (97) function_call_1 -> . expression np_function_call_add_param
    (98) function_call_1 -> . expression np_function_call_add_param COMMA function_call_1
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 180
    function_call_1                shift and go to state 281
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 262

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim . RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI

    RBRACKET        shift and go to state 282


state 263

    (43) assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression . SEMI

    SEMI            shift and go to state 283


state 264

    (44) condition -> IF LPAREN expression RPAREN np_condition_gotof block . np_condition_end_gotof
    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof block . ELSE np_condition_goto_else block np_condition_end_gotof
    (124) np_condition_end_gotof -> .

    ELSE            shift and go to state 285
    ID              reduce using rule 124 (np_condition_end_gotof -> .)
    IF              reduce using rule 124 (np_condition_end_gotof -> .)
    PRINT           reduce using rule 124 (np_condition_end_gotof -> .)
    READ            reduce using rule 124 (np_condition_end_gotof -> .)
    RETURN          reduce using rule 124 (np_condition_end_gotof -> .)
    FOR             reduce using rule 124 (np_condition_end_gotof -> .)
    WHILE           reduce using rule 124 (np_condition_end_gotof -> .)
    MEAN            reduce using rule 124 (np_condition_end_gotof -> .)
    MEDIAN          reduce using rule 124 (np_condition_end_gotof -> .)
    MODE            reduce using rule 124 (np_condition_end_gotof -> .)
    VARIANCE        reduce using rule 124 (np_condition_end_gotof -> .)
    STDEV           reduce using rule 124 (np_condition_end_gotof -> .)
    RBRACE          reduce using rule 124 (np_condition_end_gotof -> .)

    np_condition_end_gotof         shift and go to state 284

state 265

    (79) writing_1 -> expression np_add_print_quadruple_exp COMMA writing_1 .

    RPAREN          reduce using rule 79 (writing_1 -> expression np_add_print_quadruple_exp COMMA writing_1 .)


state 266

    (80) writing_1 -> CTESTRING np_add_print_quadruple_str COMMA writing_1 .

    RPAREN          reduce using rule 80 (writing_1 -> CTESTRING np_add_print_quadruple_str COMMA writing_1 .)


state 267

    (85) reading_1 -> ID LBRACKET expression RBRACKET . COMMA reading_1
    (87) reading_1 -> ID LBRACKET expression RBRACKET .

    COMMA           shift and go to state 286
    RPAREN          reduce using rule 87 (reading_1 -> ID LBRACKET expression RBRACKET .)


state 268

    (59) exp_1 -> PLUS np_add_operator exp .

    LT              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    LE              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    GT              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    GE              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    EQ              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    NE              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    AND             reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    OR              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    SEMI            reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    RPAREN          reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    COMMA           reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    RBRACKET        reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    TO              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)
    BY              reduce using rule 59 (exp_1 -> PLUS np_add_operator exp .)


state 269

    (60) exp_1 -> MINUS np_add_operator exp .

    LT              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    LE              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    GT              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    GE              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    EQ              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    NE              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    AND             reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    OR              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    SEMI            reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    RPAREN          reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    COMMA           reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    RBRACKET        reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    TO              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)
    BY              reduce using rule 60 (exp_1 -> MINUS np_add_operator exp .)


state 270

    (63) term_2 -> TIMES np_add_operator term .

    PLUS            reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    MINUS           reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    LT              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    LE              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    GT              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    GE              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    EQ              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    NE              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    AND             reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    OR              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    SEMI            reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    RPAREN          reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    COMMA           reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    RBRACKET        reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    TO              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)
    BY              reduce using rule 63 (term_2 -> TIMES np_add_operator term .)


state 271

    (64) term_2 -> DIVIDE np_add_operator term .

    PLUS            reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    MINUS           reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    LT              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    LE              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    GT              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    GE              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    EQ              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    NE              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    AND             reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    OR              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    SEMI            reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    RPAREN          reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    COMMA           reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    RBRACKET        reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    TO              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)
    BY              reduce using rule 64 (term_2 -> DIVIDE np_add_operator term .)


state 272

    (65) factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .

    TIMES           reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    DIVIDE          reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    PLUS            reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    MINUS           reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    LT              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    LE              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    GT              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    GE              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    EQ              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    NE              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    AND             reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    OR              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    SEMI            reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    RPAREN          reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    COMMA           reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    RBRACKET        reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    TO              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)
    BY              reduce using rule 65 (factor -> LPAREN np_add_paren expression RPAREN np_pop_paren .)


state 273

    (66) factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim . RBRACKET np_get_array_address

    RBRACKET        shift and go to state 287


state 274

    (93) function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .

    TIMES           reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    DIVIDE          reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    PLUS            reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    MINUS           reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    LT              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    LE              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    GT              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    GE              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    EQ              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    NE              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    AND             reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    OR              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    SEMI            reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    RPAREN          reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    COMMA           reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    RBRACKET        reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    TO              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)
    BY              reduce using rule 93 (function_call -> ID LPAREN np_check_function_call np_function_end_params RPAREN .)


state 275

    (94) function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params . RPAREN

    RPAREN          shift and go to state 288


state 276

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator . expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 289
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 277

    (90) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression . DO block np_while_end_block

    DO              shift and go to state 290


state 278

    (25) params -> ID COLON type np_add_vars np_add_params_type COMMA . params
    (25) params -> . ID COLON type np_add_vars np_add_params_type COMMA params
    (26) params -> . ID COLON type np_add_vars np_add_params_type

    ID              shift and go to state 83

    params                         shift and go to state 291

state 279

    (19) function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function .

    FUNCTION        reduce using rule 19 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function .)
    MAIN            reduce using rule 19 (function -> FUNCTION ID COLON return_type np_create_new_scope LPAREN params RPAREN vars np_set_func_start_point block np_end_function .)


state 280

    (96) void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .

    ID              reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    IF              reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    PRINT           reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    READ            reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    RETURN          reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    FOR             reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    WHILE           reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    MEAN            reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    MEDIAN          reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    MODE            reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    VARIANCE        reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    STDEV           reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)
    RBRACE          reduce using rule 96 (void_function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN SEMI .)


state 281

    (98) function_call_1 -> expression np_function_call_add_param COMMA function_call_1 .

    RPAREN          reduce using rule 98 (function_call_1 -> expression np_function_call_add_param COMMA function_call_1 .)


state 282

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET . np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI
    (145) np_get_array_address -> .

    EQUALS          reduce using rule 145 (np_get_array_address -> .)

    np_get_array_address           shift and go to state 292

state 283

    (43) assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .

    ID              reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    IF              reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    PRINT           reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    READ            reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    RETURN          reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    FOR             reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    WHILE           reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    MEAN            reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    MEDIAN          reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    MODE            reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    VARIANCE        reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    STDEV           reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)
    RBRACE          reduce using rule 43 (assignment -> ID np_add_id EQUALS np_add_operator expression np_assign_expression SEMI .)


state 284

    (44) condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .

    ID              reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    IF              reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    PRINT           reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    READ            reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    RETURN          reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    FOR             reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    WHILE           reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    MEAN            reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    MEDIAN          reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    MODE            reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    VARIANCE        reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    STDEV           reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)
    RBRACE          reduce using rule 44 (condition -> IF LPAREN expression RPAREN np_condition_gotof block np_condition_end_gotof .)


state 285

    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE . np_condition_goto_else block np_condition_end_gotof
    (125) np_condition_goto_else -> .

    LBRACE          reduce using rule 125 (np_condition_goto_else -> .)

    np_condition_goto_else         shift and go to state 293

state 286

    (85) reading_1 -> ID LBRACKET expression RBRACKET COMMA . reading_1
    (84) reading_1 -> . ID COMMA reading_1
    (85) reading_1 -> . ID LBRACKET expression RBRACKET COMMA reading_1
    (86) reading_1 -> . ID
    (87) reading_1 -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 140

    reading_1                      shift and go to state 294

state 287

    (66) factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET . np_get_array_address
    (145) np_get_array_address -> .

    TIMES           reduce using rule 145 (np_get_array_address -> .)
    DIVIDE          reduce using rule 145 (np_get_array_address -> .)
    PLUS            reduce using rule 145 (np_get_array_address -> .)
    MINUS           reduce using rule 145 (np_get_array_address -> .)
    LT              reduce using rule 145 (np_get_array_address -> .)
    LE              reduce using rule 145 (np_get_array_address -> .)
    GT              reduce using rule 145 (np_get_array_address -> .)
    GE              reduce using rule 145 (np_get_array_address -> .)
    EQ              reduce using rule 145 (np_get_array_address -> .)
    NE              reduce using rule 145 (np_get_array_address -> .)
    AND             reduce using rule 145 (np_get_array_address -> .)
    OR              reduce using rule 145 (np_get_array_address -> .)
    SEMI            reduce using rule 145 (np_get_array_address -> .)
    RPAREN          reduce using rule 145 (np_get_array_address -> .)
    COMMA           reduce using rule 145 (np_get_array_address -> .)
    RBRACKET        reduce using rule 145 (np_get_array_address -> .)
    TO              reduce using rule 145 (np_get_array_address -> .)
    BY              reduce using rule 145 (np_get_array_address -> .)

    np_get_array_address           shift and go to state 295

state 288

    (94) function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .

    TIMES           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    DIVIDE          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    PLUS            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    MINUS           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    LT              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    LE              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    GT              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    GE              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    EQ              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    NE              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    AND             reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    OR              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    SEMI            reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    RPAREN          reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    COMMA           reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    RBRACKET        reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    TO              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)
    BY              reduce using rule 94 (function_call -> ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN .)


state 289

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression . np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (129) np_assign_expression_for -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    TO              reduce using rule 129 (np_assign_expression_for -> .)

    np_assign_expression_for       shift and go to state 296

state 290

    (90) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO . block np_while_end_block
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 297

state 291

    (25) params -> ID COLON type np_add_vars np_add_params_type COMMA params .

    RPAREN          reduce using rule 25 (params -> ID COLON type np_add_vars np_add_params_type COMMA params .)


state 292

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address . EQUALS np_add_operator expression np_assign_expression SEMI

    EQUALS          shift and go to state 298


state 293

    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else . block np_condition_end_gotof
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 299

state 294

    (85) reading_1 -> ID LBRACKET expression RBRACKET COMMA reading_1 .

    RPAREN          reduce using rule 85 (reading_1 -> ID LBRACKET expression RBRACKET COMMA reading_1 .)


state 295

    (66) factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .

    TIMES           reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    DIVIDE          reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    PLUS            reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    MINUS           reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    LT              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    LE              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    GT              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    GE              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    EQ              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    NE              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    AND             reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    OR              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    SEMI            reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    RPAREN          reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    COMMA           reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    RBRACKET        reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    TO              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)
    BY              reduce using rule 66 (factor -> ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address .)


state 296

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for . TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end

    TO              shift and go to state 300


state 297

    (90) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block . np_while_end_block
    (128) np_while_end_block -> .

    ID              reduce using rule 128 (np_while_end_block -> .)
    IF              reduce using rule 128 (np_while_end_block -> .)
    PRINT           reduce using rule 128 (np_while_end_block -> .)
    READ            reduce using rule 128 (np_while_end_block -> .)
    RETURN          reduce using rule 128 (np_while_end_block -> .)
    FOR             reduce using rule 128 (np_while_end_block -> .)
    WHILE           reduce using rule 128 (np_while_end_block -> .)
    MEAN            reduce using rule 128 (np_while_end_block -> .)
    MEDIAN          reduce using rule 128 (np_while_end_block -> .)
    MODE            reduce using rule 128 (np_while_end_block -> .)
    VARIANCE        reduce using rule 128 (np_while_end_block -> .)
    STDEV           reduce using rule 128 (np_while_end_block -> .)
    RBRACE          reduce using rule 128 (np_while_end_block -> .)

    np_while_end_block             shift and go to state 301

state 298

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS . np_add_operator expression np_assign_expression SEMI
    (115) np_add_operator -> .

    LPAREN          reduce using rule 115 (np_add_operator -> .)
    ID              reduce using rule 115 (np_add_operator -> .)
    PLUS            reduce using rule 115 (np_add_operator -> .)
    MINUS           reduce using rule 115 (np_add_operator -> .)
    CTEI            reduce using rule 115 (np_add_operator -> .)
    CTEF            reduce using rule 115 (np_add_operator -> .)
    CTEC            reduce using rule 115 (np_add_operator -> .)
    TRUE            reduce using rule 115 (np_add_operator -> .)
    FALSE           reduce using rule 115 (np_add_operator -> .)

    np_add_operator                shift and go to state 302

state 299

    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block . np_condition_end_gotof
    (124) np_condition_end_gotof -> .

    ID              reduce using rule 124 (np_condition_end_gotof -> .)
    IF              reduce using rule 124 (np_condition_end_gotof -> .)
    PRINT           reduce using rule 124 (np_condition_end_gotof -> .)
    READ            reduce using rule 124 (np_condition_end_gotof -> .)
    RETURN          reduce using rule 124 (np_condition_end_gotof -> .)
    FOR             reduce using rule 124 (np_condition_end_gotof -> .)
    WHILE           reduce using rule 124 (np_condition_end_gotof -> .)
    MEAN            reduce using rule 124 (np_condition_end_gotof -> .)
    MEDIAN          reduce using rule 124 (np_condition_end_gotof -> .)
    MODE            reduce using rule 124 (np_condition_end_gotof -> .)
    VARIANCE        reduce using rule 124 (np_condition_end_gotof -> .)
    STDEV           reduce using rule 124 (np_condition_end_gotof -> .)
    RBRACE          reduce using rule 124 (np_condition_end_gotof -> .)

    np_condition_end_gotof         shift and go to state 303

state 300

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO . expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 304
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 301

    (90) conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .

    ID              reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    IF              reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    PRINT           reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    READ            reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    RETURN          reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    FOR             reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    WHILE           reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    MEAN            reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    MEDIAN          reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    MODE            reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    VARIANCE        reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    STDEV           reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)
    RBRACE          reduce using rule 90 (conditional_loop -> WHILE np_while_init LPAREN expression RPAREN np_while_expression DO block np_while_end_block .)


state 302

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator . expression np_assign_expression SEMI
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 305
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 303

    (45) condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .

    ID              reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    IF              reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    PRINT           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    READ            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    RETURN          reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    FOR             reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    WHILE           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    MEAN            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    MEDIAN          reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    MODE            reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    VARIANCE        reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    STDEV           reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)
    RBRACE          reduce using rule 45 (condition -> IF LPAREN expression RPAREN np_condition_gotof block ELSE np_condition_goto_else block np_condition_end_gotof .)


state 304

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression . np_non_conditional_limit BY expression RPAREN block np_non_conditional_end
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (130) np_non_conditional_limit -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    BY              reduce using rule 130 (np_non_conditional_limit -> .)

    np_non_conditional_limit       shift and go to state 306

state 305

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression . np_assign_expression SEMI
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression
    (122) np_assign_expression -> .

    AND             shift and go to state 142
    OR              shift and go to state 143
    SEMI            reduce using rule 122 (np_assign_expression -> .)

    np_assign_expression           shift and go to state 307

state 306

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit . BY expression RPAREN block np_non_conditional_end

    BY              shift and go to state 308


state 307

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression . SEMI

    SEMI            shift and go to state 309


state 308

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY . expression RPAREN block np_non_conditional_end
    (46) expression -> . exp
    (47) expression -> . expression1 np_add_quadruple_logical
    (48) expression -> . expression0 np_add_quadruple_or_and
    (57) exp -> . term np_add_quadruple_sum_min
    (58) exp -> . term np_add_quadruple_sum_min exp_1
    (51) expression1 -> . exp LT np_add_operator exp
    (52) expression1 -> . exp LE np_add_operator exp
    (53) expression1 -> . exp GT np_add_operator exp
    (54) expression1 -> . exp GE np_add_operator exp
    (55) expression1 -> . exp EQ np_add_operator exp
    (56) expression1 -> . exp NE np_add_operator exp
    (49) expression0 -> . expression AND np_add_operator expression
    (50) expression0 -> . expression OR np_add_operator expression
    (61) term -> . factor np_add_quadruple_times_div
    (62) term -> . factor np_add_quadruple_times_div term_2
    (65) factor -> . LPAREN np_add_paren expression RPAREN np_pop_paren
    (66) factor -> . ID LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address
    (67) factor -> . function_call
    (68) factor -> . factor_prima_1
    (93) function_call -> . ID LPAREN np_check_function_call np_function_end_params RPAREN
    (94) function_call -> . ID LPAREN np_check_function_call function_call_1 np_function_end_params RPAREN
    (69) factor_prima_1 -> . PLUS varcte
    (70) factor_prima_1 -> . MINUS varcte
    (71) factor_prima_1 -> . varcte
    (72) varcte -> . ID np_add_id
    (73) varcte -> . CTEI np_add_cte_int
    (74) varcte -> . CTEF np_add_cte_float
    (75) varcte -> . CTEC np_add_cte_char
    (76) varcte -> . TRUE np_add_cte_bool
    (77) varcte -> . FALSE np_add_cte_bool

    LPAREN          shift and go to state 109
    ID              shift and go to state 110
    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTEC            shift and go to state 118
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120

    expression                     shift and go to state 310
    exp                            shift and go to state 104
    expression1                    shift and go to state 105
    expression0                    shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    function_call                  shift and go to state 111
    factor_prima_1                 shift and go to state 112
    varcte                         shift and go to state 114

state 309

    (42) assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .

    ID              reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    IF              reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    PRINT           reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    READ            reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    RETURN          reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    FOR             reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    WHILE           reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    MEAN            reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    MEDIAN          reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    MODE            reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    VARIANCE        reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    STDEV           reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)
    RBRACE          reduce using rule 42 (assignment -> ID np_add_id LBRACKET np_check_is_array expression np_verify_array_dim RBRACKET np_get_array_address EQUALS np_add_operator expression np_assign_expression SEMI .)


state 310

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression . RPAREN block np_non_conditional_end
    (49) expression0 -> expression . AND np_add_operator expression
    (50) expression0 -> expression . OR np_add_operator expression

    RPAREN          shift and go to state 311
    AND             shift and go to state 142
    OR              shift and go to state 143


state 311

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN . block np_non_conditional_end
    (22) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 48

    block                          shift and go to state 312

state 312

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block . np_non_conditional_end
    (131) np_non_conditional_end -> .

    ID              reduce using rule 131 (np_non_conditional_end -> .)
    IF              reduce using rule 131 (np_non_conditional_end -> .)
    PRINT           reduce using rule 131 (np_non_conditional_end -> .)
    READ            reduce using rule 131 (np_non_conditional_end -> .)
    RETURN          reduce using rule 131 (np_non_conditional_end -> .)
    FOR             reduce using rule 131 (np_non_conditional_end -> .)
    WHILE           reduce using rule 131 (np_non_conditional_end -> .)
    MEAN            reduce using rule 131 (np_non_conditional_end -> .)
    MEDIAN          reduce using rule 131 (np_non_conditional_end -> .)
    MODE            reduce using rule 131 (np_non_conditional_end -> .)
    VARIANCE        reduce using rule 131 (np_non_conditional_end -> .)
    STDEV           reduce using rule 131 (np_non_conditional_end -> .)
    RBRACE          reduce using rule 131 (np_non_conditional_end -> .)

    np_non_conditional_end         shift and go to state 313

state 313

    (91) non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .

    ID              reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    IF              reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    PRINT           reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    READ            reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    RETURN          reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    FOR             reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    WHILE           reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    MEAN            reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    MEDIAN          reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    MODE            reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    VARIANCE        reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    STDEV           reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)
    RBRACE          reduce using rule 91 (non_conditional_loop -> FOR LPAREN ID np_add_id EQUALS np_add_operator expression np_assign_expression_for TO expression np_non_conditional_limit BY expression RPAREN block np_non_conditional_end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 232 resolved as shift
WARNING: shift/reduce conflict for OR in state 232 resolved as shift
WARNING: shift/reduce conflict for AND in state 233 resolved as shift
WARNING: shift/reduce conflict for OR in state 233 resolved as shift
